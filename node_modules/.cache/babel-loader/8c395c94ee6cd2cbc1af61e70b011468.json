{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = bezierCurveTo;\n/**\n * Calculate the points for a bezier curve and then draws it.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @param {number} fromX - Starting point x\n * @param {number} fromY - Starting point y\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} cpX2 - Second Control point x\n * @param {number} cpY2 - Second Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number} n - Number of segments approximating the bezier curve\n * @param {number[]} [path=[]] - Path array to push points into\n * @return {number[]} Array of points of the curve\n */\n\nfunction bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, n) {\n  var path = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n  var dt = 0;\n  var dt2 = 0;\n  var dt3 = 0;\n  var t2 = 0;\n  var t3 = 0;\n  path.push(fromX, fromY);\n\n  for (var i = 1, j = 0; i <= n; ++i) {\n    j = i / n;\n    dt = 1 - j;\n    dt2 = dt * dt;\n    dt3 = dt2 * dt;\n    t2 = j * j;\n    t3 = t2 * j;\n    path.push(dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX, dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);\n  }\n\n  return path;\n}","map":{"version":3,"sources":["../../../../src/core/graphics/utils/bezierCurveTo.js"],"names":["bezierCurveTo","path","dt","dt2","dt3","t2","t3","i","j"],"mappings":";;;kBAkBwBA,a;AAlBxB;;;;;;;;;;;;;;;;;;;AAkBe,SAAA,aAAA,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EACf;AAAA,MADuFC,IACvF,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAD8F,EAC9F;AACI,MAAIC,EAAAA,GAAJ,CAAA;AACA,MAAIC,GAAAA,GAAJ,CAAA;AACA,MAAIC,GAAAA,GAAJ,CAAA;AACA,MAAIC,EAAAA,GAAJ,CAAA;AACA,MAAIC,EAAAA,GAAJ,CAAA;AAEAL,EAAAA,IAAAA,CAAAA,IAAAA,CAAAA,KAAAA,EAAAA,KAAAA;;AAEA,OAAK,IAAIM,CAAAA,GAAJ,CAAA,EAAWC,CAAAA,GAAhB,CAAA,EAAuBD,CAAAA,IAAvB,CAAA,EAA+B,EAA/B,CAAA,EACA;AACIC,IAAAA,CAAAA,GAAID,CAAAA,GAAJC,CAAAA;AAEAN,IAAAA,EAAAA,GAAM,IAANA,CAAAA;AACAC,IAAAA,GAAAA,GAAMD,EAAAA,GAANC,EAAAA;AACAC,IAAAA,GAAAA,GAAMD,GAAAA,GAANC,EAAAA;AAEAC,IAAAA,EAAAA,GAAKG,CAAAA,GAALH,CAAAA;AACAC,IAAAA,EAAAA,GAAKD,EAAAA,GAALC,CAAAA;AAEAL,IAAAA,IAAAA,CAAAA,IAAAA,CACKG,GAAAA,GAAD,KAACA,GAAgB,IAAA,GAAA,GAAA,CAAA,GAAjB,GAACA,GAAsC,IAAA,EAAA,GAAA,EAAA,GAAvC,IAACA,GAA6DE,EAAAA,GADlEL,GAAAA,EAEKG,GAAAA,GAAD,KAACA,GAAgB,IAAA,GAAA,GAAA,CAAA,GAAjB,GAACA,GAAsC,IAAA,EAAA,GAAA,EAAA,GAAvC,IAACA,GAA6DE,EAAAA,GAFlEL,GAAAA;AAIH;;AAED,SAAA,IAAA;AACH","sourcesContent":["/**\n * Calculate the points for a bezier curve and then draws it.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @param {number} fromX - Starting point x\n * @param {number} fromY - Starting point y\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} cpX2 - Second Control point x\n * @param {number} cpY2 - Second Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number} n - Number of segments approximating the bezier curve\n * @param {number[]} [path=[]] - Path array to push points into\n * @return {number[]} Array of points of the curve\n */\nexport default function bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, n, path = [])\n{\n    let dt = 0;\n    let dt2 = 0;\n    let dt3 = 0;\n    let t2 = 0;\n    let t3 = 0;\n\n    path.push(fromX, fromY);\n\n    for (let i = 1, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        dt = (1 - j);\n        dt2 = dt * dt;\n        dt3 = dt2 * dt;\n\n        t2 = j * j;\n        t3 = t2 * j;\n\n        path.push(\n            (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX),\n            (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY)\n        );\n    }\n\n    return path;\n}\n"]},"metadata":{},"sourceType":"script"}