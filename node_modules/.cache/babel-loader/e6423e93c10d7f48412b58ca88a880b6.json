{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.mixin = mixin;\nexports.delayMixin = delayMixin;\nexports.performMixins = performMixins;\n/**\n * Mixes all enumerable properties and methods from a source object to a target object.\n *\n * @memberof PIXI.utils.mixins\n * @function mixin\n * @param {object} target The prototype or instance that properties and methods should be added to.\n * @param {object} source The source of properties and methods to mix in.\n */\n\nfunction mixin(target, source) {\n  if (!target || !source) return; // in ES8/ES2017, this would be really easy:\n  // Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n  // get all the enumerable property keys\n\n  var keys = Object.keys(source); // loop through properties\n\n  for (var i = 0; i < keys.length; ++i) {\n    var propertyName = keys[i]; // Set the property using the property descriptor - this works for accessors and normal value properties\n\n    Object.defineProperty(target, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));\n  }\n}\n\nvar mixins = [];\n/**\n * Queues a mixin to be handled towards the end of the initialization of PIXI, so that deprecation\n * can take effect.\n *\n * @memberof PIXI.utils.mixins\n * @function delayMixin\n * @private\n * @param {object} target The prototype or instance that properties and methods should be added to.\n * @param {object} source The source of properties and methods to mix in.\n */\n\nfunction delayMixin(target, source) {\n  mixins.push(target, source);\n}\n/**\n * Handles all mixins queued via delayMixin().\n *\n * @memberof PIXI.utils.mixins\n * @function performMixins\n * @private\n */\n\n\nfunction performMixins() {\n  for (var i = 0; i < mixins.length; i += 2) {\n    mixin(mixins[i], mixins[i + 1]);\n  }\n\n  mixins.length = 0;\n}","map":{"version":3,"sources":["../../../src/core/utils/mixin.js"],"names":["mixin","keys","Object","i","propertyName","mixins","delayMixin","performMixins"],"mappings":";;;QAQgBA,K,GAAAA,K;QA+BAM,U,GAAAA,U;QAYAC,a,GAAAA,a;AAnDhB;;;;;;;;;AAQO,SAAA,KAAA,CAAA,MAAA,EAAA,MAAA,EACP;AACI,MAAI,CAAA,MAAA,IAAW,CAAf,MAAA,EAAwB,OAD5B,CAEI;AACA;AAEA;;AACA,MAAMN,IAAAA,GAAOC,MAAAA,CAAAA,IAAAA,CAAb,MAAaA,CAAb,CANJ,CAQI;;AACA,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIF,IAAAA,CAApB,MAAA,EAAiC,EAAjC,CAAA,EACA;AACI,QAAMG,YAAAA,GAAeH,IAAAA,CAArB,CAAqBA,CAArB,CADJ,CAGI;;AACAC,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAA4CA,MAAAA,CAAAA,wBAAAA,CAAAA,MAAAA,EAA5CA,YAA4CA,CAA5CA;AACH;AACJ;;AAED,IAAMG,MAAAA,GAAN,EAAA;AAEA;;;;;;;;;;;AAUO,SAAA,UAAA,CAAA,MAAA,EAAA,MAAA,EACP;AACIA,EAAAA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA;AACH;AAED;;;;;;;;;AAOO,SAAA,aAAA,GACP;AACI,OAAK,IAAIF,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIE,MAAAA,CAApB,MAAA,EAAmCF,CAAAA,IAAnC,CAAA,EACA;AACIH,IAAAA,KAAAA,CAAMK,MAAAA,CAANL,CAAMK,CAANL,EAAiBK,MAAAA,CAAOF,CAAAA,GAAxBH,CAAiBK,CAAjBL,CAAAA;AACH;;AACDK,EAAAA,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA;AACH","sourcesContent":["/**\n * Mixes all enumerable properties and methods from a source object to a target object.\n *\n * @memberof PIXI.utils.mixins\n * @function mixin\n * @param {object} target The prototype or instance that properties and methods should be added to.\n * @param {object} source The source of properties and methods to mix in.\n */\nexport function mixin(target, source)\n{\n    if (!target || !source) return;\n    // in ES8/ES2017, this would be really easy:\n    // Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n\n    // get all the enumerable property keys\n    const keys = Object.keys(source);\n\n    // loop through properties\n    for (let i = 0; i < keys.length; ++i)\n    {\n        const propertyName = keys[i];\n\n        // Set the property using the property descriptor - this works for accessors and normal value properties\n        Object.defineProperty(target, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));\n    }\n}\n\nconst mixins = [];\n\n/**\n * Queues a mixin to be handled towards the end of the initialization of PIXI, so that deprecation\n * can take effect.\n *\n * @memberof PIXI.utils.mixins\n * @function delayMixin\n * @private\n * @param {object} target The prototype or instance that properties and methods should be added to.\n * @param {object} source The source of properties and methods to mix in.\n */\nexport function delayMixin(target, source)\n{\n    mixins.push(target, source);\n}\n\n/**\n * Handles all mixins queued via delayMixin().\n *\n * @memberof PIXI.utils.mixins\n * @function performMixins\n * @private\n */\nexport function performMixins()\n{\n    for (let i = 0; i < mixins.length; i += 2)\n    {\n        mixin(mixins[i], mixins[i + 1]);\n    }\n    mixins.length = 0;\n}\n"]},"metadata":{},"sourceType":"script"}