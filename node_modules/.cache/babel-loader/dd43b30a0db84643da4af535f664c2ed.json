{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _WebGLManager2 = require('./WebGLManager');\n\nvar _WebGLManager3 = _interopRequireDefault(_WebGLManager2);\n\nvar _SpriteMaskFilter = require('../filters/spriteMask/SpriteMaskFilter');\n\nvar _SpriteMaskFilter2 = _interopRequireDefault(_SpriteMaskFilter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\n\n\nvar MaskManager = function (_WebGLManager) {\n  _inherits(MaskManager, _WebGLManager);\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n   */\n\n\n  function MaskManager(renderer) {\n    _classCallCheck(this, MaskManager); // TODO - we don't need both!\n\n\n    var _this = _possibleConstructorReturn(this, _WebGLManager.call(this, renderer));\n\n    _this.scissor = false;\n    _this.scissorData = null;\n    _this.scissorRenderTarget = null;\n    _this.enableScissor = true;\n    _this.alphaMaskPool = [];\n    _this.alphaMaskIndex = 0;\n    return _this;\n  }\n  /**\n   * Applies the Mask and adds it to the current filter stack.\n   *\n   * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n   * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n   */\n\n\n  MaskManager.prototype.pushMask = function pushMask(target, maskData) {\n    // TODO the root check means scissor rect will not\n    // be used on render textures more info here:\n    // https://github.com/pixijs/pixi.js/pull/3545\n    if (maskData.texture) {\n      this.pushSpriteMask(target, maskData);\n    } else if (this.enableScissor && !this.scissor && this.renderer._activeRenderTarget.root && !this.renderer.stencilManager.stencilMaskStack.length && maskData.isFastRect()) {\n      var matrix = maskData.worldTransform;\n      var rot = Math.atan2(matrix.b, matrix.a); // use the nearest degree!\n\n      rot = Math.round(rot * (180 / Math.PI));\n\n      if (rot % 90) {\n        this.pushStencilMask(maskData);\n      } else {\n        this.pushScissorMask(target, maskData);\n      }\n    } else {\n      this.pushStencilMask(maskData);\n    }\n  };\n  /**\n   * Removes the last mask from the mask stack and doesn't return it.\n   *\n   * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n   * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n   */\n\n\n  MaskManager.prototype.popMask = function popMask(target, maskData) {\n    if (maskData.texture) {\n      this.popSpriteMask(target, maskData);\n    } else if (this.enableScissor && !this.renderer.stencilManager.stencilMaskStack.length) {\n      this.popScissorMask(target, maskData);\n    } else {\n      this.popStencilMask(target, maskData);\n    }\n  };\n  /**\n   * Applies the Mask and adds it to the current filter stack.\n   *\n   * @param {PIXI.RenderTarget} target - Display Object to push the sprite mask to\n   * @param {PIXI.Sprite} maskData - Sprite to be used as the mask\n   */\n\n\n  MaskManager.prototype.pushSpriteMask = function pushSpriteMask(target, maskData) {\n    var alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n    if (!alphaMaskFilter) {\n      alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new _SpriteMaskFilter2.default(maskData)];\n    }\n\n    alphaMaskFilter[0].resolution = this.renderer.resolution;\n    alphaMaskFilter[0].maskSprite = maskData;\n    var stashFilterArea = target.filterArea;\n    target.filterArea = maskData.getBounds(true);\n    this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n    target.filterArea = stashFilterArea;\n    this.alphaMaskIndex++;\n  };\n  /**\n   * Removes the last filter from the filter stack and doesn't return it.\n   *\n   */\n\n\n  MaskManager.prototype.popSpriteMask = function popSpriteMask() {\n    this.renderer.filterManager.popFilter();\n    this.alphaMaskIndex--;\n  };\n  /**\n   * Applies the Mask and adds it to the current filter stack.\n   *\n   * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n   */\n\n\n  MaskManager.prototype.pushStencilMask = function pushStencilMask(maskData) {\n    this.renderer.currentRenderer.stop();\n    this.renderer.stencilManager.pushStencil(maskData);\n  };\n  /**\n   * Removes the last filter from the filter stack and doesn't return it.\n   *\n   */\n\n\n  MaskManager.prototype.popStencilMask = function popStencilMask() {\n    this.renderer.currentRenderer.stop();\n    this.renderer.stencilManager.popStencil();\n  };\n  /**\n   *\n   * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n   * @param {PIXI.Graphics} maskData - The masking data.\n   */\n\n\n  MaskManager.prototype.pushScissorMask = function pushScissorMask(target, maskData) {\n    maskData.renderable = true;\n    var renderTarget = this.renderer._activeRenderTarget;\n    var bounds = maskData.getBounds();\n    bounds.fit(renderTarget.size);\n    maskData.renderable = false;\n    this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n    var resolution = this.renderer.resolution;\n    this.renderer.gl.scissor(bounds.x * resolution, (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution, bounds.width * resolution, bounds.height * resolution);\n    this.scissorRenderTarget = renderTarget;\n    this.scissorData = maskData;\n    this.scissor = true;\n  };\n  /**\n   *\n   *\n   */\n\n\n  MaskManager.prototype.popScissorMask = function popScissorMask() {\n    this.scissorRenderTarget = null;\n    this.scissorData = null;\n    this.scissor = false; // must be scissor!\n\n    var gl = this.renderer.gl;\n    gl.disable(gl.SCISSOR_TEST);\n  };\n\n  return MaskManager;\n}(_WebGLManager3.default);\n\nexports.default = MaskManager;","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/managers/MaskManager.js"],"names":["MaskManager","pushMask","target","maskData","matrix","rot","Math","popMask","pushSpriteMask","alphaMaskFilter","stashFilterArea","popSpriteMask","pushStencilMask","popStencilMask","pushScissorMask","renderTarget","bounds","resolution","popScissorMask","gl"],"mappings":"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","sourcesContent":["import WebGLManager from './WebGLManager';\nimport AlphaMaskFilter from '../filters/spriteMask/SpriteMaskFilter';\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nexport default class MaskManager extends WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // TODO - we don't need both!\n        this.scissor = false;\n        this.scissorData = null;\n        this.scissorRenderTarget = null;\n\n        this.enableScissor = true;\n\n        this.alphaMaskPool = [];\n        this.alphaMaskIndex = 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pushMask(target, maskData)\n    {\n        // TODO the root check means scissor rect will not\n        // be used on render textures more info here:\n        // https://github.com/pixijs/pixi.js/pull/3545\n\n        if (maskData.texture)\n        {\n            this.pushSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor\n            && !this.scissor\n            && this.renderer._activeRenderTarget.root\n            && !this.renderer.stencilManager.stencilMaskStack.length\n            && maskData.isFastRect())\n        {\n            const matrix = maskData.worldTransform;\n\n            let rot = Math.atan2(matrix.b, matrix.a);\n\n            // use the nearest degree!\n            rot = Math.round(rot * (180 / Math.PI));\n\n            if (rot % 90)\n            {\n                this.pushStencilMask(maskData);\n            }\n            else\n            {\n                this.pushScissorMask(target, maskData);\n            }\n        }\n        else\n        {\n            this.pushStencilMask(maskData);\n        }\n    }\n\n    /**\n     * Removes the last mask from the mask stack and doesn't return it.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    popMask(target, maskData)\n    {\n        if (maskData.texture)\n        {\n            this.popSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor && !this.renderer.stencilManager.stencilMaskStack.length)\n        {\n            this.popScissorMask(target, maskData);\n        }\n        else\n        {\n            this.popStencilMask(target, maskData);\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.RenderTarget} target - Display Object to push the sprite mask to\n     * @param {PIXI.Sprite} maskData - Sprite to be used as the mask\n     */\n    pushSpriteMask(target, maskData)\n    {\n        let alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n        if (!alphaMaskFilter)\n        {\n            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new AlphaMaskFilter(maskData)];\n        }\n\n        alphaMaskFilter[0].resolution = this.renderer.resolution;\n        alphaMaskFilter[0].maskSprite = maskData;\n\n        const stashFilterArea = target.filterArea;\n\n        target.filterArea = maskData.getBounds(true);\n        this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n        target.filterArea = stashFilterArea;\n\n        this.alphaMaskIndex++;\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popSpriteMask()\n    {\n        this.renderer.filterManager.popFilter();\n        this.alphaMaskIndex--;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pushStencilMask(maskData)\n    {\n        this.renderer.currentRenderer.stop();\n        this.renderer.stencilManager.pushStencil(maskData);\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popStencilMask()\n    {\n        this.renderer.currentRenderer.stop();\n        this.renderer.stencilManager.popStencil();\n    }\n\n    /**\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Graphics} maskData - The masking data.\n     */\n    pushScissorMask(target, maskData)\n    {\n        maskData.renderable = true;\n\n        const renderTarget = this.renderer._activeRenderTarget;\n\n        const bounds = maskData.getBounds();\n\n        bounds.fit(renderTarget.size);\n        maskData.renderable = false;\n\n        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n\n        const resolution = this.renderer.resolution;\n\n        this.renderer.gl.scissor(\n            bounds.x * resolution,\n            (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution,\n            bounds.width * resolution,\n            bounds.height * resolution\n        );\n\n        this.scissorRenderTarget = renderTarget;\n        this.scissorData = maskData;\n        this.scissor = true;\n    }\n\n    /**\n     *\n     *\n     */\n    popScissorMask()\n    {\n        this.scissorRenderTarget = null;\n        this.scissorData = null;\n        this.scissor = false;\n\n        // must be scissor!\n        const gl = this.renderer.gl;\n\n        gl.disable(gl.SCISSOR_TEST);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}