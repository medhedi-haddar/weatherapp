{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _const = require('../../const');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar RoundedRectangle = function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param {number} [width=0] - The overall width of this rounded rectangle\n   * @param {number} [height=0] - The overall height of this rounded rectangle\n   * @param {number} [radius=20] - Controls the radius of the rounded corners\n   */\n  function RoundedRectangle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n\n    _classCallCheck(this, RoundedRectangle);\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n\n    this.x = x;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.y = y;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.width = width;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.height = height;\n    /**\n     * @member {number}\n     * @default 20\n     */\n\n    this.radius = radius;\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readonly\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n\n    this.type = _const.SHAPES.RREC;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle\n   *\n   * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n   */\n\n\n  RoundedRectangle.prototype.clone = function clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n   */\n\n\n  RoundedRectangle.prototype.contains = function contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        if (y >= this.y + this.radius && y <= this.y + this.height - this.radius || x >= this.x + this.radius && x <= this.x + this.width - this.radius) {\n          return true;\n        }\n\n        var dx = x - (this.x + this.radius);\n        var dy = y - (this.y + this.radius);\n        var radius2 = this.radius * this.radius;\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n\n        dx = x - (this.x + this.width - this.radius);\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n\n        dy = y - (this.y + this.height - this.radius);\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n\n        dx = x - (this.x + this.radius);\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  return RoundedRectangle;\n}();\n\nexports.default = RoundedRectangle;","map":{"version":3,"sources":["../../../../src/core/math/shapes/RoundedRectangle.js"],"names":["RoundedRectangle","x","y","width","height","radius","clone","contains","dx","dy","radius2"],"mappings":"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","sourcesContent":["import { SHAPES } from '../../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\nexport default class RoundedRectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [width=0] - The overall width of this rounded rectangle\n     * @param {number} [height=0] - The overall height of this rounded rectangle\n     * @param {number} [radius=20] - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = width;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = height;\n\n        /**\n         * @member {number}\n         * @default 20\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readonly\n         * @default PIXI.SHAPES.RREC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle\n     *\n     * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n     */\n    clone()\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                if ((y >= this.y + this.radius && y <= this.y + this.height - this.radius)\n                || (x >= this.x + this.radius && x <= this.x + this.width - this.radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + this.radius);\n                let dy = y - (this.y + this.radius);\n                const radius2 = this.radius * this.radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}