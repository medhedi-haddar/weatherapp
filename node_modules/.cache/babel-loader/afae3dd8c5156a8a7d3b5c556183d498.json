{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _resourceLoader = require('resource-loader');\n\nvar _resourceLoader2 = _interopRequireDefault(_resourceLoader);\n\nvar _blob = require('resource-loader/lib/middlewares/parsing/blob');\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _textureParser = require('./textureParser');\n\nvar _textureParser2 = _interopRequireDefault(_textureParser);\n\nvar _spritesheetParser = require('./spritesheetParser');\n\nvar _spritesheetParser2 = _interopRequireDefault(_spritesheetParser);\n\nvar _bitmapFontParser = require('./bitmapFontParser');\n\nvar _bitmapFontParser2 = _interopRequireDefault(_bitmapFontParser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n *\n * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n *\n * ```js\n * const loader = PIXI.loader; // PixiJS exposes a premade instance for you to use.\n * //or\n * const loader = new PIXI.loaders.Loader(); // you can also create your own if you want\n *\n * const sprites = {};\n *\n * // Chainable `add` to enqueue a resource\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n * loader.pre(cachingMiddleware);\n *\n * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n * loader.use(parsingMiddleware);\n *\n * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n * // resources have loaded.\n * loader.load((loader, resources) => {\n *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n *     // They have a couple default properties:\n *     // - `url`: The URL that the resource was loaded from\n *     // - `error`: The error that happened when trying to load (if any)\n *     // - `data`: The raw data that was loaded\n *     // also may contain other properties based on the middleware that runs.\n *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n * });\n *\n * // throughout the process multiple signals can be dispatched.\n * loader.onProgress.add(() => {}); // called once per loaded/errored file\n * loader.onError.add(() => {}); // called once per errored file\n * loader.onLoad.add(() => {}); // called once per loaded file\n * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class\n * @extends module:resource-loader.ResourceLoader\n * @memberof PIXI.loaders\n */\n\n\nvar Loader = function (_ResourceLoader) {\n  _inherits(Loader, _ResourceLoader);\n  /**\n   * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n   * @param {number} [concurrency=10] - The number of resources to load concurrently.\n   */\n\n\n  function Loader(baseUrl, concurrency) {\n    _classCallCheck(this, Loader);\n\n    var _this = _possibleConstructorReturn(this, _ResourceLoader.call(this, baseUrl, concurrency));\n\n    _eventemitter2.default.call(_this);\n\n    for (var i = 0; i < Loader._pixiMiddleware.length; ++i) {\n      _this.use(Loader._pixiMiddleware[i]());\n    } // Compat layer, translate the new v2 signals into old v1 events.\n\n\n    _this.onStart.add(function (l) {\n      return _this.emit('start', l);\n    });\n\n    _this.onProgress.add(function (l, r) {\n      return _this.emit('progress', l, r);\n    });\n\n    _this.onError.add(function (e, l, r) {\n      return _this.emit('error', e, l, r);\n    });\n\n    _this.onLoad.add(function (l, r) {\n      return _this.emit('load', l, r);\n    });\n\n    _this.onComplete.add(function (l, r) {\n      return _this.emit('complete', l, r);\n    });\n\n    return _this;\n  }\n  /**\n   * Adds a default middleware to the PixiJS loader.\n   *\n   * @static\n   * @param {Function} fn - The middleware to add.\n   */\n\n\n  Loader.addPixiMiddleware = function addPixiMiddleware(fn) {\n    Loader._pixiMiddleware.push(fn);\n  };\n  /**\n   * Destroy the loader, removes references.\n   */\n\n\n  Loader.prototype.destroy = function destroy() {\n    this.removeAllListeners();\n    this.reset();\n  };\n\n  return Loader;\n}(_resourceLoader2.default); // Copy EE3 prototype (mixin)\n\n\nexports.default = Loader;\n\nfor (var k in _eventemitter2.default.prototype) {\n  Loader.prototype[k] = _eventemitter2.default.prototype[k];\n}\n\nLoader._pixiMiddleware = [// parse any blob into more usable objects (e.g. Image)\n_blob.blobMiddlewareFactory, // parse any Image objects into textures\n_textureParser2.default, // parse any spritesheet data into multiple textures\n_spritesheetParser2.default, // parse bitmap font data into multiple textures\n_bitmapFontParser2.default]; // Add custom extentions\n\nvar Resource = _resourceLoader2.default.Resource;\nResource.setExtensionXhrType('fnt', Resource.XHR_RESPONSE_TYPE.DOCUMENT);","map":{"version":3,"sources":["../../src/loaders/loader.js"],"names":["Loader","i","addPixiMiddleware","fn","destroy","Resource"],"mappings":"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","sourcesContent":["import ResourceLoader from 'resource-loader';\nimport { blobMiddlewareFactory } from 'resource-loader/lib/middlewares/parsing/blob';\nimport EventEmitter from 'eventemitter3';\nimport textureParser from './textureParser';\nimport spritesheetParser from './spritesheetParser';\nimport bitmapFontParser from './bitmapFontParser';\n\n/**\n *\n * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n *\n * ```js\n * const loader = PIXI.loader; // PixiJS exposes a premade instance for you to use.\n * //or\n * const loader = new PIXI.loaders.Loader(); // you can also create your own if you want\n *\n * const sprites = {};\n *\n * // Chainable `add` to enqueue a resource\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n * loader.pre(cachingMiddleware);\n *\n * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n * loader.use(parsingMiddleware);\n *\n * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n * // resources have loaded.\n * loader.load((loader, resources) => {\n *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n *     // They have a couple default properties:\n *     // - `url`: The URL that the resource was loaded from\n *     // - `error`: The error that happened when trying to load (if any)\n *     // - `data`: The raw data that was loaded\n *     // also may contain other properties based on the middleware that runs.\n *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n * });\n *\n * // throughout the process multiple signals can be dispatched.\n * loader.onProgress.add(() => {}); // called once per loaded/errored file\n * loader.onError.add(() => {}); // called once per errored file\n * loader.onLoad.add(() => {}); // called once per loaded file\n * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class\n * @extends module:resource-loader.ResourceLoader\n * @memberof PIXI.loaders\n */\nexport default class Loader extends ResourceLoader\n{\n    /**\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    constructor(baseUrl, concurrency)\n    {\n        super(baseUrl, concurrency);\n        EventEmitter.call(this);\n\n        for (let i = 0; i < Loader._pixiMiddleware.length; ++i)\n        {\n            this.use(Loader._pixiMiddleware[i]());\n        }\n\n        // Compat layer, translate the new v2 signals into old v1 events.\n        this.onStart.add((l) => this.emit('start', l));\n        this.onProgress.add((l, r) => this.emit('progress', l, r));\n        this.onError.add((e, l, r) => this.emit('error', e, l, r));\n        this.onLoad.add((l, r) => this.emit('load', l, r));\n        this.onComplete.add((l, r) => this.emit('complete', l, r));\n    }\n\n    /**\n     * Adds a default middleware to the PixiJS loader.\n     *\n     * @static\n     * @param {Function} fn - The middleware to add.\n     */\n    static addPixiMiddleware(fn)\n    {\n        Loader._pixiMiddleware.push(fn);\n    }\n\n    /**\n     * Destroy the loader, removes references.\n     */\n    destroy()\n    {\n        this.removeAllListeners();\n        this.reset();\n    }\n}\n\n// Copy EE3 prototype (mixin)\nfor (const k in EventEmitter.prototype)\n{\n    Loader.prototype[k] = EventEmitter.prototype[k];\n}\n\nLoader._pixiMiddleware = [\n    // parse any blob into more usable objects (e.g. Image)\n    blobMiddlewareFactory,\n    // parse any Image objects into textures\n    textureParser,\n    // parse any spritesheet data into multiple textures\n    spritesheetParser,\n    // parse bitmap font data into multiple textures\n    bitmapFontParser,\n];\n\n// Add custom extentions\nconst Resource = ResourceLoader.Resource;\n\nResource.setExtensionXhrType('fnt', Resource.XHR_RESPONSE_TYPE.DOCUMENT);\n"]},"metadata":{},"sourceType":"script"}