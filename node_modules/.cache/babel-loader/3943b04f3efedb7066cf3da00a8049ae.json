{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nvar _settings = require('../settings');\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _determineCrossOrigin = require('../utils/determineCrossOrigin');\n\nvar _determineCrossOrigin2 = _interopRequireDefault(_determineCrossOrigin);\n\nvar _bitTwiddle = require('bit-twiddle');\n\nvar _bitTwiddle2 = _interopRequireDefault(_bitTwiddle);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * A texture stores the information that represents an image. All textures have a base texture.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\n\n\nvar BaseTexture = function (_EventEmitter) {\n  _inherits(BaseTexture, _EventEmitter);\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement} [source] - the source object of the texture.\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture\n   */\n\n\n  function BaseTexture(source, scaleMode, resolution) {\n    _classCallCheck(this, BaseTexture);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.uid = (0, _utils.uid)();\n    _this.touched = 0;\n    /**\n     * The resolution / device pixel ratio of the texture\n     *\n     * @member {number}\n     * @default 1\n     */\n\n    _this.resolution = resolution || _settings2.default.RESOLUTION;\n    /**\n     * The width of the base texture set when the image has loaded\n     *\n     * @readonly\n     * @member {number}\n     */\n\n    _this.width = 100;\n    /**\n     * The height of the base texture set when the image has loaded\n     *\n     * @readonly\n     * @member {number}\n     */\n\n    _this.height = 100; // TODO docs\n    // used to store the actual dimensions of the source\n\n    /**\n     * Used to store the actual width of the source of this texture\n     *\n     * @readonly\n     * @member {number}\n     */\n\n    _this.realWidth = 100;\n    /**\n     * Used to store the actual height of the source of this texture\n     *\n     * @readonly\n     * @member {number}\n     */\n\n    _this.realHeight = 100;\n    /**\n     * The scale mode to apply when scaling this texture\n     *\n     * @member {number}\n     * @default PIXI.settings.SCALE_MODE\n     * @see PIXI.SCALE_MODES\n     */\n\n    _this.scaleMode = scaleMode !== undefined ? scaleMode : _settings2.default.SCALE_MODE;\n    /**\n     * Set to true once the base texture has successfully loaded.\n     *\n     * This is never true if the underlying source fails to load or has no texture data.\n     *\n     * @readonly\n     * @member {boolean}\n     */\n\n    _this.hasLoaded = false;\n    /**\n     * Set to true if the source is currently loading.\n     *\n     * If an Image source is loading the 'loaded' or 'error' event will be\n     * dispatched when the operation ends. An underyling source that is\n     * immediately-available bypasses loading entirely.\n     *\n     * @readonly\n     * @member {boolean}\n     */\n\n    _this.isLoading = false;\n    /**\n     * The image source that is used to create the texture.\n     *\n     * TODO: Make this a setter that calls loadSource();\n     *\n     * @readonly\n     * @member {HTMLImageElement|HTMLCanvasElement}\n     */\n\n    _this.source = null; // set in loadSource, if at all\n\n    /**\n     * The image source that is used to create the texture. This is used to\n     * store the original Svg source when it is replaced with a canvas element.\n     *\n     * TODO: Currently not in use but could be used when re-scaling svg.\n     *\n     * @readonly\n     * @member {Image}\n     */\n\n    _this.origSource = null; // set in loadSvg, if at all\n\n    /**\n     * Type of image defined in source, eg. `png` or `svg`\n     *\n     * @readonly\n     * @member {string}\n     */\n\n    _this.imageType = null; // set in updateImageType\n\n    /**\n     * Scale for source image. Used with Svg images to scale them before rasterization.\n     *\n     * @readonly\n     * @member {number}\n     */\n\n    _this.sourceScale = 1.0;\n    /**\n     * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)\n     * All blend modes, and shaders written for default value. Change it on your own risk.\n     *\n     * @member {boolean}\n     * @default true\n     */\n\n    _this.premultipliedAlpha = true;\n    /**\n     * The image url of the texture\n     *\n     * @member {string}\n     */\n\n    _this.imageUrl = null;\n    /**\n     * Whether or not the texture is a power of two, try to use power of two textures as much\n     * as you can\n     *\n     * @private\n     * @member {boolean}\n     */\n\n    _this.isPowerOfTwo = false; // used for webGL\n\n    /**\n     *\n     * Set this to true if a mipmap of this texture needs to be generated. This value needs\n     * to be set before the texture is used\n     * Also the texture must be a power of two size to work\n     *\n     * @member {boolean}\n     * @see PIXI.MIPMAP_TEXTURES\n     */\n\n    _this.mipmap = _settings2.default.MIPMAP_TEXTURES;\n    /**\n     *\n     * WebGL Texture wrap mode\n     *\n     * @member {number}\n     * @see PIXI.WRAP_MODES\n     */\n\n    _this.wrapMode = _settings2.default.WRAP_MODE;\n    /**\n     * A map of renderer IDs to webgl textures\n     *\n     * @private\n     * @member {object<number, WebGLTexture>}\n     */\n\n    _this._glTextures = {};\n    _this._enabled = 0;\n    _this._virtalBoundId = -1;\n    /**\n     * If the object has been destroyed via destroy(). If true, it should not be used.\n     *\n     * @member {boolean}\n     * @private\n     * @readonly\n     */\n\n    _this._destroyed = false;\n    /**\n     * The ids under which this BaseTexture has been added to the base texture cache. This is\n     * automatically set as long as BaseTexture.addToCache is used, but may not be set if a\n     * BaseTexture is added directly to the BaseTextureCache array.\n     *\n     * @member {string[]}\n     */\n\n    _this.textureCacheIds = []; // if no source passed don't try to load\n\n    if (source) {\n      _this.loadSource(source);\n    }\n    /**\n     * Fired when a not-immediately-available source finishes loading.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#loaded\n     * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n     */\n\n    /**\n     * Fired when a not-immediately-available source fails to load.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#error\n     * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n     */\n\n    /**\n     * Fired when BaseTexture is updated.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#update\n     * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n     */\n\n    /**\n     * Fired when BaseTexture is destroyed.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#dispose\n     * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n     */\n\n\n    return _this;\n  }\n  /**\n   * Updates the texture on all the webgl renderers, this also assumes the src has changed.\n   *\n   * @fires PIXI.BaseTexture#update\n   */\n\n\n  BaseTexture.prototype.update = function update() {\n    // Svg size is handled during load\n    if (this.imageType !== 'svg') {\n      this.realWidth = this.source.naturalWidth || this.source.videoWidth || this.source.width;\n      this.realHeight = this.source.naturalHeight || this.source.videoHeight || this.source.height;\n\n      this._updateDimensions();\n    }\n\n    this.emit('update', this);\n  };\n  /**\n   * Update dimensions from real values\n   */\n\n\n  BaseTexture.prototype._updateDimensions = function _updateDimensions() {\n    this.width = this.realWidth / this.resolution;\n    this.height = this.realHeight / this.resolution;\n    this.isPowerOfTwo = _bitTwiddle2.default.isPow2(this.realWidth) && _bitTwiddle2.default.isPow2(this.realHeight);\n  };\n  /**\n   * Load a source.\n   *\n   * If the source is not-immediately-available, such as an image that needs to be\n   * downloaded, then the 'loaded' or 'error' event will be dispatched in the future\n   * and `hasLoaded` will remain false after this call.\n   *\n   * The logic state after calling `loadSource` directly or indirectly (eg. `fromImage`, `new BaseTexture`) is:\n   *\n   *     if (texture.hasLoaded) {\n   *        // texture ready for use\n   *     } else if (texture.isLoading) {\n   *        // listen to 'loaded' and/or 'error' events on texture\n   *     } else {\n   *        // not loading, not going to load UNLESS the source is reloaded\n   *        // (it may still make sense to listen to the events)\n   *     }\n   *\n   * @protected\n   * @param {HTMLImageElement|HTMLCanvasElement} source - the source object of the texture.\n   */\n\n\n  BaseTexture.prototype.loadSource = function loadSource(source) {\n    var wasLoading = this.isLoading;\n    this.hasLoaded = false;\n    this.isLoading = false;\n\n    if (wasLoading && this.source) {\n      this.source.onload = null;\n      this.source.onerror = null;\n    }\n\n    var firstSourceLoaded = !this.source;\n    this.source = source; // Apply source if loaded. Otherwise setup appropriate loading monitors.\n\n    if ((source.src && source.complete || source.getContext) && source.width && source.height) {\n      this._updateImageType();\n\n      if (this.imageType === 'svg') {\n        this._loadSvgSource();\n      } else {\n        this._sourceLoaded();\n      }\n\n      if (firstSourceLoaded) {\n        // send loaded event if previous source was null and we have been passed a pre-loaded IMG element\n        this.emit('loaded', this);\n      }\n    } else if (!source.getContext) {\n      // Image fail / not ready\n      this.isLoading = true;\n      var scope = this;\n\n      source.onload = function () {\n        scope._updateImageType();\n\n        source.onload = null;\n        source.onerror = null;\n\n        if (!scope.isLoading) {\n          return;\n        }\n\n        scope.isLoading = false;\n\n        scope._sourceLoaded();\n\n        if (scope.imageType === 'svg') {\n          scope._loadSvgSource();\n\n          return;\n        }\n\n        scope.emit('loaded', scope);\n      };\n\n      source.onerror = function () {\n        source.onload = null;\n        source.onerror = null;\n\n        if (!scope.isLoading) {\n          return;\n        }\n\n        scope.isLoading = false;\n        scope.emit('error', scope);\n      }; // Per http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\n      //   \"The value of `complete` can thus change while a script is executing.\"\n      // So complete needs to be re-checked after the callbacks have been added..\n      // NOTE: complete will be true if the image has no src so best to check if the src is set.\n\n\n      if (source.complete && source.src) {\n        // ..and if we're complete now, no need for callbacks\n        source.onload = null;\n        source.onerror = null;\n\n        if (scope.imageType === 'svg') {\n          scope._loadSvgSource();\n\n          return;\n        }\n\n        this.isLoading = false;\n\n        if (source.width && source.height) {\n          this._sourceLoaded(); // If any previous subscribers possible\n\n\n          if (wasLoading) {\n            this.emit('loaded', this);\n          }\n        } // If any previous subscribers possible\n        else if (wasLoading) {\n          this.emit('error', this);\n        }\n      }\n    }\n  };\n  /**\n   * Updates type of the source image.\n   */\n\n\n  BaseTexture.prototype._updateImageType = function _updateImageType() {\n    if (!this.imageUrl) {\n      return;\n    }\n\n    var dataUri = (0, _utils.decomposeDataUri)(this.imageUrl);\n    var imageType = void 0;\n\n    if (dataUri && dataUri.mediaType === 'image') {\n      // Check for subType validity\n      var firstSubType = dataUri.subType.split('+')[0];\n      imageType = (0, _utils.getUrlFileExtension)('.' + firstSubType);\n\n      if (!imageType) {\n        throw new Error('Invalid image type in data URI.');\n      }\n    } else {\n      imageType = (0, _utils.getUrlFileExtension)(this.imageUrl);\n\n      if (!imageType) {\n        imageType = 'png';\n      }\n    }\n\n    this.imageType = imageType;\n  };\n  /**\n   * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls\n   * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.\n   */\n\n\n  BaseTexture.prototype._loadSvgSource = function _loadSvgSource() {\n    if (this.imageType !== 'svg') {\n      // Do nothing if source is not svg\n      return;\n    }\n\n    var dataUri = (0, _utils.decomposeDataUri)(this.imageUrl);\n\n    if (dataUri) {\n      this._loadSvgSourceUsingDataUri(dataUri);\n    } else {\n      // We got an URL, so we need to do an XHR to check the svg size\n      this._loadSvgSourceUsingXhr();\n    }\n  };\n  /**\n   * Reads an SVG string from data URI and then calls `_loadSvgSourceUsingString`.\n   *\n   * @param {string} dataUri - The data uri to load from.\n   */\n\n\n  BaseTexture.prototype._loadSvgSourceUsingDataUri = function _loadSvgSourceUsingDataUri(dataUri) {\n    var svgString = void 0;\n\n    if (dataUri.encoding === 'base64') {\n      if (!atob) {\n        throw new Error('Your browser doesn\\'t support base64 conversions.');\n      }\n\n      svgString = atob(dataUri.data);\n    } else {\n      svgString = dataUri.data;\n    }\n\n    this._loadSvgSourceUsingString(svgString);\n  };\n  /**\n   * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.\n   */\n\n\n  BaseTexture.prototype._loadSvgSourceUsingXhr = function _loadSvgSourceUsingXhr() {\n    var _this2 = this;\n\n    var svgXhr = new XMLHttpRequest(); // This throws error on IE, so SVG Document can't be used\n    // svgXhr.responseType = 'document';\n    // This is not needed since we load the svg as string (breaks IE too)\n    // but overrideMimeType() can be used to force the response to be parsed as XML\n    // svgXhr.overrideMimeType('image/svg+xml');\n\n    svgXhr.onload = function () {\n      if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200) {\n        throw new Error('Failed to load SVG using XHR.');\n      }\n\n      _this2._loadSvgSourceUsingString(svgXhr.response);\n    };\n\n    svgXhr.onerror = function () {\n      return _this2.emit('error', _this2);\n    };\n\n    svgXhr.open('GET', this.imageUrl, true);\n    svgXhr.send();\n  };\n  /**\n   * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the\n   * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by\n   * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.\n   *\n   * @param  {string} svgString SVG source as string\n   *\n   * @fires PIXI.BaseTexture#loaded\n   */\n\n\n  BaseTexture.prototype._loadSvgSourceUsingString = function _loadSvgSourceUsingString(svgString) {\n    var svgSize = (0, _utils.getSvgSize)(svgString);\n    var svgWidth = svgSize.width;\n    var svgHeight = svgSize.height;\n\n    if (!svgWidth || !svgHeight) {\n      throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n    } // Scale realWidth and realHeight\n\n\n    this.realWidth = Math.round(svgWidth * this.sourceScale);\n    this.realHeight = Math.round(svgHeight * this.sourceScale);\n\n    this._updateDimensions(); // Create a canvas element\n\n\n    var canvas = document.createElement('canvas');\n    canvas.width = this.realWidth;\n    canvas.height = this.realHeight;\n    canvas._pixiId = 'canvas_' + (0, _utils.uid)(); // Draw the Svg to the canvas\n\n    canvas.getContext('2d').drawImage(this.source, 0, 0, svgWidth, svgHeight, 0, 0, this.realWidth, this.realHeight); // Replace the original source image with the canvas\n\n    this.origSource = this.source;\n    this.source = canvas; // Add also the canvas in cache (destroy clears by `imageUrl` and `source._pixiId`)\n\n    BaseTexture.addToCache(this, canvas._pixiId);\n    this.isLoading = false;\n\n    this._sourceLoaded();\n\n    this.emit('loaded', this);\n  };\n  /**\n   * Used internally to update the width, height, and some other tracking vars once\n   * a source has successfully loaded.\n   *\n   * @private\n   */\n\n\n  BaseTexture.prototype._sourceLoaded = function _sourceLoaded() {\n    this.hasLoaded = true;\n    this.update();\n  };\n  /**\n   * Destroys this base texture\n   *\n   */\n\n\n  BaseTexture.prototype.destroy = function destroy() {\n    if (this.imageUrl) {\n      delete _utils.TextureCache[this.imageUrl];\n      this.imageUrl = null;\n\n      if (!navigator.isCocoonJS) {\n        this.source.src = '';\n      }\n    }\n\n    this.source = null;\n    this.dispose();\n    BaseTexture.removeFromCache(this);\n    this.textureCacheIds = null;\n    this._destroyed = true;\n  };\n  /**\n   * Frees the texture from WebGL memory without destroying this texture object.\n   * This means you can still use the texture later which will upload it to GPU\n   * memory again.\n   *\n   * @fires PIXI.BaseTexture#dispose\n   */\n\n\n  BaseTexture.prototype.dispose = function dispose() {\n    this.emit('dispose', this);\n  };\n  /**\n   * Changes the source image of the texture.\n   * The original source must be an Image element.\n   *\n   * @param {string} newSrc - the path of the image\n   */\n\n\n  BaseTexture.prototype.updateSourceImage = function updateSourceImage(newSrc) {\n    this.source.src = newSrc;\n    this.loadSource(this.source);\n  };\n  /**\n   * Helper function that creates a base texture from the given image url.\n   * If the image is not in the base texture cache it will be created and loaded.\n   *\n   * @static\n   * @param {string} imageUrl - The image url of the texture\n   * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n   * @return {PIXI.BaseTexture} The new base texture.\n   */\n\n\n  BaseTexture.fromImage = function fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {\n    var baseTexture = _utils.BaseTextureCache[imageUrl];\n\n    if (!baseTexture) {\n      // new Image() breaks tex loading in some versions of Chrome.\n      // See https://code.google.com/p/chromium/issues/detail?id=238071\n      var image = new Image(); // document.createElement('img');\n\n      if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0) {\n        image.crossOrigin = (0, _determineCrossOrigin2.default)(imageUrl);\n      } else if (crossorigin) {\n        image.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n      }\n\n      baseTexture = new BaseTexture(image, scaleMode);\n      baseTexture.imageUrl = imageUrl;\n\n      if (sourceScale) {\n        baseTexture.sourceScale = sourceScale;\n      } // if there is an @2x at the end of the url we are going to assume its a highres image\n\n\n      baseTexture.resolution = (0, _utils.getResolutionOfUrl)(imageUrl);\n      image.src = imageUrl; // Setting this triggers load\n\n      BaseTexture.addToCache(baseTexture, imageUrl);\n    }\n\n    return baseTexture;\n  };\n  /**\n   * Helper function that creates a base texture from the given canvas element.\n   *\n   * @static\n   * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n   * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {string} [origin='canvas'] - A string origin of who created the base texture\n   * @return {PIXI.BaseTexture} The new base texture.\n   */\n\n\n  BaseTexture.fromCanvas = function fromCanvas(canvas, scaleMode) {\n    var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'canvas';\n\n    if (!canvas._pixiId) {\n      canvas._pixiId = origin + '_' + (0, _utils.uid)();\n    }\n\n    var baseTexture = _utils.BaseTextureCache[canvas._pixiId];\n\n    if (!baseTexture) {\n      baseTexture = new BaseTexture(canvas, scaleMode);\n      BaseTexture.addToCache(baseTexture, canvas._pixiId);\n    }\n\n    return baseTexture;\n  };\n  /**\n   * Helper function that creates a base texture based on the source you provide.\n   * The source can be - image url, image element, canvas element. If the\n   * source is an image url or an image element and not in the base texture\n   * cache, it will be created and loaded.\n   *\n   * @static\n   * @param {string|HTMLImageElement|HTMLCanvasElement} source - The source to create base texture from.\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n   * @return {PIXI.BaseTexture} The new base texture.\n   */\n\n\n  BaseTexture.from = function from(source, scaleMode, sourceScale) {\n    if (typeof source === 'string') {\n      return BaseTexture.fromImage(source, undefined, scaleMode, sourceScale);\n    } else if (source instanceof HTMLImageElement) {\n      var imageUrl = source.src;\n      var baseTexture = _utils.BaseTextureCache[imageUrl];\n\n      if (!baseTexture) {\n        baseTexture = new BaseTexture(source, scaleMode);\n        baseTexture.imageUrl = imageUrl;\n\n        if (sourceScale) {\n          baseTexture.sourceScale = sourceScale;\n        } // if there is an @2x at the end of the url we are going to assume its a highres image\n\n\n        baseTexture.resolution = (0, _utils.getResolutionOfUrl)(imageUrl);\n        BaseTexture.addToCache(baseTexture, imageUrl);\n      }\n\n      return baseTexture;\n    } else if (source instanceof HTMLCanvasElement) {\n      return BaseTexture.fromCanvas(source, scaleMode);\n    } // lets assume its a base texture!\n\n\n    return source;\n  };\n  /**\n   * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n   *\n   * @static\n   * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n   * @param {string} id - The id that the BaseTexture will be stored against.\n   */\n\n\n  BaseTexture.addToCache = function addToCache(baseTexture, id) {\n    if (id) {\n      if (baseTexture.textureCacheIds.indexOf(id) === -1) {\n        baseTexture.textureCacheIds.push(id);\n      } // @if DEBUG\n\n      /* eslint-disable no-console */\n\n\n      if (_utils.BaseTextureCache[id]) {\n        console.warn('BaseTexture added to the cache with an id [' + id + '] that already had an entry');\n      }\n      /* eslint-enable no-console */\n      // @endif\n\n\n      _utils.BaseTextureCache[id] = baseTexture;\n    }\n  };\n  /**\n   * Remove a BaseTexture from the global BaseTextureCache.\n   *\n   * @static\n   * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n   * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n   */\n\n\n  BaseTexture.removeFromCache = function removeFromCache(baseTexture) {\n    if (typeof baseTexture === 'string') {\n      var baseTextureFromCache = _utils.BaseTextureCache[baseTexture];\n\n      if (baseTextureFromCache) {\n        var index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n        if (index > -1) {\n          baseTextureFromCache.textureCacheIds.splice(index, 1);\n        }\n\n        delete _utils.BaseTextureCache[baseTexture];\n        return baseTextureFromCache;\n      }\n    } else if (baseTexture && baseTexture.textureCacheIds) {\n      for (var i = 0; i < baseTexture.textureCacheIds.length; ++i) {\n        delete _utils.BaseTextureCache[baseTexture.textureCacheIds[i]];\n      }\n\n      baseTexture.textureCacheIds.length = 0;\n      return baseTexture;\n    }\n\n    return null;\n  };\n\n  return BaseTexture;\n}(_eventemitter2.default);\n\nexports.default = BaseTexture;","map":{"version":3,"sources":["../../../src/core/textures/BaseTexture.js"],"names":["BaseTexture","resolution","scaleMode","update","_updateDimensions","loadSource","source","wasLoading","firstSourceLoaded","scope","_updateImageType","dataUri","imageType","firstSubType","_loadSvgSource","_loadSvgSourceUsingDataUri","svgString","atob","_loadSvgSourceUsingXhr","svgXhr","_loadSvgSourceUsingString","svgSize","svgWidth","svgHeight","Math","canvas","document","_sourceLoaded","destroy","navigator","dispose","updateSourceImage","newSrc","fromImage","imageUrl","crossorigin","sourceScale","baseTexture","image","fromCanvas","origin","from","addToCache","id","console","removeFromCache","baseTextureFromCache","index","i"],"mappings":"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","sourcesContent":["import {\n    uid, getUrlFileExtension, decomposeDataUri, getSvgSize,\n    getResolutionOfUrl, BaseTextureCache, TextureCache,\n} from '../utils';\nimport settings from '../settings';\nimport EventEmitter from 'eventemitter3';\nimport determineCrossOrigin from '../utils/determineCrossOrigin';\nimport bitTwiddle from 'bit-twiddle';\n\n/**\n * A texture stores the information that represents an image. All textures have a base texture.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class BaseTexture extends EventEmitter\n{\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement} [source] - the source object of the texture.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture\n     */\n    constructor(source, scaleMode, resolution)\n    {\n        super();\n\n        this.uid = uid();\n\n        this.touched = 0;\n\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = resolution || settings.RESOLUTION;\n\n        /**\n         * The width of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.width = 100;\n\n        /**\n         * The height of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.height = 100;\n\n        // TODO docs\n        // used to store the actual dimensions of the source\n        /**\n         * Used to store the actual width of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realWidth = 100;\n        /**\n         * Used to store the actual height of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realHeight = 100;\n\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {number}\n         * @default PIXI.settings.SCALE_MODE\n         * @see PIXI.SCALE_MODES\n         */\n        this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n\n        /**\n         * Set to true once the base texture has successfully loaded.\n         *\n         * This is never true if the underlying source fails to load or has no texture data.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.hasLoaded = false;\n\n        /**\n         * Set to true if the source is currently loading.\n         *\n         * If an Image source is loading the 'loaded' or 'error' event will be\n         * dispatched when the operation ends. An underyling source that is\n         * immediately-available bypasses loading entirely.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.isLoading = false;\n\n        /**\n         * The image source that is used to create the texture.\n         *\n         * TODO: Make this a setter that calls loadSource();\n         *\n         * @readonly\n         * @member {HTMLImageElement|HTMLCanvasElement}\n         */\n        this.source = null; // set in loadSource, if at all\n\n        /**\n         * The image source that is used to create the texture. This is used to\n         * store the original Svg source when it is replaced with a canvas element.\n         *\n         * TODO: Currently not in use but could be used when re-scaling svg.\n         *\n         * @readonly\n         * @member {Image}\n         */\n        this.origSource = null; // set in loadSvg, if at all\n\n        /**\n         * Type of image defined in source, eg. `png` or `svg`\n         *\n         * @readonly\n         * @member {string}\n         */\n        this.imageType = null; // set in updateImageType\n\n        /**\n         * Scale for source image. Used with Svg images to scale them before rasterization.\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.sourceScale = 1.0;\n\n        /**\n         * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)\n         * All blend modes, and shaders written for default value. Change it on your own risk.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.premultipliedAlpha = true;\n\n        /**\n         * The image url of the texture\n         *\n         * @member {string}\n         */\n        this.imageUrl = null;\n\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.isPowerOfTwo = false;\n\n        // used for webGL\n\n        /**\n         *\n         * Set this to true if a mipmap of this texture needs to be generated. This value needs\n         * to be set before the texture is used\n         * Also the texture must be a power of two size to work\n         *\n         * @member {boolean}\n         * @see PIXI.MIPMAP_TEXTURES\n         */\n        this.mipmap = settings.MIPMAP_TEXTURES;\n\n        /**\n         *\n         * WebGL Texture wrap mode\n         *\n         * @member {number}\n         * @see PIXI.WRAP_MODES\n         */\n        this.wrapMode = settings.WRAP_MODE;\n\n        /**\n         * A map of renderer IDs to webgl textures\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n        this._glTextures = {};\n\n        this._enabled = 0;\n        this._virtalBoundId = -1;\n\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean}\n         * @private\n         * @readonly\n         */\n        this._destroyed = false;\n\n        /**\n         * The ids under which this BaseTexture has been added to the base texture cache. This is\n         * automatically set as long as BaseTexture.addToCache is used, but may not be set if a\n         * BaseTexture is added directly to the BaseTextureCache array.\n         *\n         * @member {string[]}\n         */\n        this.textureCacheIds = [];\n\n        // if no source passed don't try to load\n        if (source)\n        {\n            this.loadSource(source);\n        }\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */\n    }\n\n    /**\n     * Updates the texture on all the webgl renderers, this also assumes the src has changed.\n     *\n     * @fires PIXI.BaseTexture#update\n     */\n    update()\n    {\n        // Svg size is handled during load\n        if (this.imageType !== 'svg')\n        {\n            this.realWidth = this.source.naturalWidth || this.source.videoWidth || this.source.width;\n            this.realHeight = this.source.naturalHeight || this.source.videoHeight || this.source.height;\n\n            this._updateDimensions();\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Update dimensions from real values\n     */\n    _updateDimensions()\n    {\n        this.width = this.realWidth / this.resolution;\n        this.height = this.realHeight / this.resolution;\n\n        this.isPowerOfTwo = bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n    }\n\n    /**\n     * Load a source.\n     *\n     * If the source is not-immediately-available, such as an image that needs to be\n     * downloaded, then the 'loaded' or 'error' event will be dispatched in the future\n     * and `hasLoaded` will remain false after this call.\n     *\n     * The logic state after calling `loadSource` directly or indirectly (eg. `fromImage`, `new BaseTexture`) is:\n     *\n     *     if (texture.hasLoaded) {\n     *        // texture ready for use\n     *     } else if (texture.isLoading) {\n     *        // listen to 'loaded' and/or 'error' events on texture\n     *     } else {\n     *        // not loading, not going to load UNLESS the source is reloaded\n     *        // (it may still make sense to listen to the events)\n     *     }\n     *\n     * @protected\n     * @param {HTMLImageElement|HTMLCanvasElement} source - the source object of the texture.\n     */\n    loadSource(source)\n    {\n        const wasLoading = this.isLoading;\n\n        this.hasLoaded = false;\n        this.isLoading = false;\n\n        if (wasLoading && this.source)\n        {\n            this.source.onload = null;\n            this.source.onerror = null;\n        }\n\n        const firstSourceLoaded = !this.source;\n\n        this.source = source;\n\n        // Apply source if loaded. Otherwise setup appropriate loading monitors.\n        if (((source.src && source.complete) || source.getContext) && source.width && source.height)\n        {\n            this._updateImageType();\n\n            if (this.imageType === 'svg')\n            {\n                this._loadSvgSource();\n            }\n            else\n            {\n                this._sourceLoaded();\n            }\n\n            if (firstSourceLoaded)\n            {\n                // send loaded event if previous source was null and we have been passed a pre-loaded IMG element\n                this.emit('loaded', this);\n            }\n        }\n        else if (!source.getContext)\n        {\n            // Image fail / not ready\n            this.isLoading = true;\n\n            const scope = this;\n\n            source.onload = () =>\n            {\n                scope._updateImageType();\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope._sourceLoaded();\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                scope.emit('loaded', scope);\n            };\n\n            source.onerror = () =>\n            {\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope.emit('error', scope);\n            };\n\n            // Per http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\n            //   \"The value of `complete` can thus change while a script is executing.\"\n            // So complete needs to be re-checked after the callbacks have been added..\n            // NOTE: complete will be true if the image has no src so best to check if the src is set.\n            if (source.complete && source.src)\n            {\n                // ..and if we're complete now, no need for callbacks\n                source.onload = null;\n                source.onerror = null;\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                this.isLoading = false;\n\n                if (source.width && source.height)\n                {\n                    this._sourceLoaded();\n\n                    // If any previous subscribers possible\n                    if (wasLoading)\n                    {\n                        this.emit('loaded', this);\n                    }\n                }\n                // If any previous subscribers possible\n                else if (wasLoading)\n                {\n                    this.emit('error', this);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates type of the source image.\n     */\n    _updateImageType()\n    {\n        if (!this.imageUrl)\n        {\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n        let imageType;\n\n        if (dataUri && dataUri.mediaType === 'image')\n        {\n            // Check for subType validity\n            const firstSubType = dataUri.subType.split('+')[0];\n\n            imageType = getUrlFileExtension(`.${firstSubType}`);\n\n            if (!imageType)\n            {\n                throw new Error('Invalid image type in data URI.');\n            }\n        }\n        else\n        {\n            imageType = getUrlFileExtension(this.imageUrl);\n\n            if (!imageType)\n            {\n                imageType = 'png';\n            }\n        }\n\n        this.imageType = imageType;\n    }\n\n    /**\n     * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls\n     * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.\n     */\n    _loadSvgSource()\n    {\n        if (this.imageType !== 'svg')\n        {\n            // Do nothing if source is not svg\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n\n        if (dataUri)\n        {\n            this._loadSvgSourceUsingDataUri(dataUri);\n        }\n        else\n        {\n            // We got an URL, so we need to do an XHR to check the svg size\n            this._loadSvgSourceUsingXhr();\n        }\n    }\n\n    /**\n     * Reads an SVG string from data URI and then calls `_loadSvgSourceUsingString`.\n     *\n     * @param {string} dataUri - The data uri to load from.\n     */\n    _loadSvgSourceUsingDataUri(dataUri)\n    {\n        let svgString;\n\n        if (dataUri.encoding === 'base64')\n        {\n            if (!atob)\n            {\n                throw new Error('Your browser doesn\\'t support base64 conversions.');\n            }\n            svgString = atob(dataUri.data);\n        }\n        else\n        {\n            svgString = dataUri.data;\n        }\n\n        this._loadSvgSourceUsingString(svgString);\n    }\n\n    /**\n     * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.\n     */\n    _loadSvgSourceUsingXhr()\n    {\n        const svgXhr = new XMLHttpRequest();\n\n        // This throws error on IE, so SVG Document can't be used\n        // svgXhr.responseType = 'document';\n\n        // This is not needed since we load the svg as string (breaks IE too)\n        // but overrideMimeType() can be used to force the response to be parsed as XML\n        // svgXhr.overrideMimeType('image/svg+xml');\n\n        svgXhr.onload = () =>\n        {\n            if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200)\n            {\n                throw new Error('Failed to load SVG using XHR.');\n            }\n\n            this._loadSvgSourceUsingString(svgXhr.response);\n        };\n\n        svgXhr.onerror = () => this.emit('error', this);\n\n        svgXhr.open('GET', this.imageUrl, true);\n        svgXhr.send();\n    }\n\n    /**\n     * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the\n     * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by\n     * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.\n     *\n     * @param  {string} svgString SVG source as string\n     *\n     * @fires PIXI.BaseTexture#loaded\n     */\n    _loadSvgSourceUsingString(svgString)\n    {\n        const svgSize = getSvgSize(svgString);\n\n        const svgWidth = svgSize.width;\n        const svgHeight = svgSize.height;\n\n        if (!svgWidth || !svgHeight)\n        {\n            throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n        }\n\n        // Scale realWidth and realHeight\n        this.realWidth = Math.round(svgWidth * this.sourceScale);\n        this.realHeight = Math.round(svgHeight * this.sourceScale);\n\n        this._updateDimensions();\n\n        // Create a canvas element\n        const canvas = document.createElement('canvas');\n\n        canvas.width = this.realWidth;\n        canvas.height = this.realHeight;\n        canvas._pixiId = `canvas_${uid()}`;\n\n        // Draw the Svg to the canvas\n        canvas\n            .getContext('2d')\n            .drawImage(this.source, 0, 0, svgWidth, svgHeight, 0, 0, this.realWidth, this.realHeight);\n\n        // Replace the original source image with the canvas\n        this.origSource = this.source;\n        this.source = canvas;\n\n        // Add also the canvas in cache (destroy clears by `imageUrl` and `source._pixiId`)\n        BaseTexture.addToCache(this, canvas._pixiId);\n\n        this.isLoading = false;\n        this._sourceLoaded();\n        this.emit('loaded', this);\n    }\n\n    /**\n     * Used internally to update the width, height, and some other tracking vars once\n     * a source has successfully loaded.\n     *\n     * @private\n     */\n    _sourceLoaded()\n    {\n        this.hasLoaded = true;\n        this.update();\n    }\n\n    /**\n     * Destroys this base texture\n     *\n     */\n    destroy()\n    {\n        if (this.imageUrl)\n        {\n            delete TextureCache[this.imageUrl];\n\n            this.imageUrl = null;\n\n            if (!navigator.isCocoonJS)\n            {\n                this.source.src = '';\n            }\n        }\n\n        this.source = null;\n\n        this.dispose();\n\n        BaseTexture.removeFromCache(this);\n        this.textureCacheIds = null;\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose()\n    {\n        this.emit('dispose', this);\n    }\n\n    /**\n     * Changes the source image of the texture.\n     * The original source must be an Image element.\n     *\n     * @param {string} newSrc - the path of the image\n     */\n    updateSourceImage(newSrc)\n    {\n        this.source.src = newSrc;\n\n        this.loadSource(this.source);\n    }\n\n    /**\n     * Helper function that creates a base texture from the given image url.\n     * If the image is not in the base texture cache it will be created and loaded.\n     *\n     * @static\n     * @param {string} imageUrl - The image url of the texture\n     * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n    {\n        let baseTexture = BaseTextureCache[imageUrl];\n\n        if (!baseTexture)\n        {\n            // new Image() breaks tex loading in some versions of Chrome.\n            // See https://code.google.com/p/chromium/issues/detail?id=238071\n            const image = new Image();// document.createElement('img');\n\n            if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0)\n            {\n                image.crossOrigin = determineCrossOrigin(imageUrl);\n            }\n            else if (crossorigin)\n            {\n                image.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n            }\n\n            baseTexture = new BaseTexture(image, scaleMode);\n            baseTexture.imageUrl = imageUrl;\n\n            if (sourceScale)\n            {\n                baseTexture.sourceScale = sourceScale;\n            }\n\n            // if there is an @2x at the end of the url we are going to assume its a highres image\n            baseTexture.resolution = getResolutionOfUrl(imageUrl);\n\n            image.src = imageUrl; // Setting this triggers load\n\n            BaseTexture.addToCache(baseTexture, imageUrl);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Helper function that creates a base texture from the given canvas element.\n     *\n     * @static\n     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n     * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {string} [origin='canvas'] - A string origin of who created the base texture\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromCanvas(canvas, scaleMode, origin = 'canvas')\n    {\n        if (!canvas._pixiId)\n        {\n            canvas._pixiId = `${origin}_${uid()}`;\n        }\n\n        let baseTexture = BaseTextureCache[canvas._pixiId];\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture(canvas, scaleMode);\n            BaseTexture.addToCache(baseTexture, canvas._pixiId);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element. If the\n     * source is an image url or an image element and not in the base texture\n     * cache, it will be created and loaded.\n     *\n     * @static\n     * @param {string|HTMLImageElement|HTMLCanvasElement} source - The source to create base texture from.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static from(source, scaleMode, sourceScale)\n    {\n        if (typeof source === 'string')\n        {\n            return BaseTexture.fromImage(source, undefined, scaleMode, sourceScale);\n        }\n        else if (source instanceof HTMLImageElement)\n        {\n            const imageUrl = source.src;\n            let baseTexture = BaseTextureCache[imageUrl];\n\n            if (!baseTexture)\n            {\n                baseTexture = new BaseTexture(source, scaleMode);\n                baseTexture.imageUrl = imageUrl;\n\n                if (sourceScale)\n                {\n                    baseTexture.sourceScale = sourceScale;\n                }\n\n                // if there is an @2x at the end of the url we are going to assume its a highres image\n                baseTexture.resolution = getResolutionOfUrl(imageUrl);\n\n                BaseTexture.addToCache(baseTexture, imageUrl);\n            }\n\n            return baseTexture;\n        }\n        else if (source instanceof HTMLCanvasElement)\n        {\n            return BaseTexture.fromCanvas(source, scaleMode);\n        }\n\n        // lets assume its a base texture!\n        return source;\n    }\n\n    /**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */\n    static addToCache(baseTexture, id)\n    {\n        if (id)\n        {\n            if (baseTexture.textureCacheIds.indexOf(id) === -1)\n            {\n                baseTexture.textureCacheIds.push(id);\n            }\n\n            // @if DEBUG\n            /* eslint-disable no-console */\n            if (BaseTextureCache[id])\n            {\n                console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n            }\n            /* eslint-enable no-console */\n            // @endif\n\n            BaseTextureCache[id] = baseTexture;\n        }\n    }\n\n    /**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     *\n     * @static\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */\n    static removeFromCache(baseTexture)\n    {\n        if (typeof baseTexture === 'string')\n        {\n            const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n            if (baseTextureFromCache)\n            {\n                const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n                if (index > -1)\n                {\n                    baseTextureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete BaseTextureCache[baseTexture];\n\n                return baseTextureFromCache;\n            }\n        }\n        else if (baseTexture && baseTexture.textureCacheIds)\n        {\n            for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n            {\n                delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n            }\n\n            baseTexture.textureCacheIds.length = 0;\n\n            return baseTexture;\n        }\n\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}