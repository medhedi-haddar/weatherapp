{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.blobMiddlewareFactory = blobMiddlewareFactory;\n\nvar _Resource = require('../../Resource');\n\nvar _b = require('../../b64');\n\nvar Url = window.URL || window.webkitURL; // a middleware for transforming XHR loaded Blobs into more useful objects\n\nfunction blobMiddlewareFactory() {\n  return function blobMiddleware(resource, next) {\n    if (!resource.data) {\n      next();\n      return;\n    } // if this was an XHR load of a blob\n\n\n    if (resource.xhr && resource.xhrType === _Resource.Resource.XHR_RESPONSE_TYPE.BLOB) {\n      // if there is no blob support we probably got a binary string back\n      if (!window.Blob || typeof resource.data === 'string') {\n        var type = resource.xhr.getResponseHeader('content-type'); // this is an image, convert the binary string into a data url\n\n        if (type && type.indexOf('image') === 0) {\n          resource.data = new Image();\n          resource.data.src = 'data:' + type + ';base64,' + (0, _b.encodeBinary)(resource.xhr.responseText);\n          resource.type = _Resource.Resource.TYPE.IMAGE; // wait until the image loads and then callback\n\n          resource.data.onload = function () {\n            resource.data.onload = null;\n            next();\n          }; // next will be called on load\n\n\n          return;\n        }\n      } // if content type says this is an image, then we should transform the blob into an Image object\n      else if (resource.data.type.indexOf('image') === 0) {\n        var src = Url.createObjectURL(resource.data);\n        resource.blob = resource.data;\n        resource.data = new Image();\n        resource.data.src = src;\n        resource.type = _Resource.Resource.TYPE.IMAGE; // cleanup the no longer used blob after the image loads\n        // TODO: Is this correct? Will the image be invalid after revoking?\n\n        resource.data.onload = function () {\n          Url.revokeObjectURL(src);\n          resource.data.onload = null;\n          next();\n        }; // next will be called on load.\n\n\n        return;\n      }\n    }\n\n    next();\n  };\n}","map":{"version":3,"sources":["../../../src/middlewares/parsing/blob.js"],"names":["Url","window","blobMiddlewareFactory","resource","next","Resource","type","src"],"mappings":";;;QAMgBE,qB,GAAAA,qB;;AANhB,IAAA,SAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,EAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAMF,GAAAA,GAAMC,MAAAA,CAAAA,GAAAA,IAAcA,MAAAA,CAA1B,SAAA,C,CAEA;;AACO,SAAA,qBAAA,GAAiC;AACpC,SAAO,SAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAwC;AAC3C,QAAI,CAACE,QAAAA,CAAL,IAAA,EAAoB;AAChBC,MAAAA,IAAAA;AAEA;AACH,KAL0C,CAO3C;;;AACA,QAAID,QAAAA,CAAAA,GAAAA,IAAgBA,QAAAA,CAAAA,OAAAA,KAAqBE,SAAAA,CAAAA,QAAAA,CAAAA,iBAAAA,CAAzC,IAAA,EAA0E;AACtE;AACA,UAAI,CAACJ,MAAAA,CAAD,IAAA,IAAgB,OAAOE,QAAAA,CAAP,IAAA,KAApB,QAAA,EAAuD;AACnD,YAAMG,IAAAA,GAAOH,QAAAA,CAAAA,GAAAA,CAAAA,iBAAAA,CAAb,cAAaA,CAAb,CADmD,CAGnD;;AACA,YAAIG,IAAAA,IAAQA,IAAAA,CAAAA,OAAAA,CAAAA,OAAAA,MAAZ,CAAA,EAAyC;AACrCH,UAAAA,QAAAA,CAAAA,IAAAA,GAAgB,IAAhBA,KAAgB,EAAhBA;AACAA,UAAAA,QAAAA,CAAAA,IAAAA,CAAAA,GAAAA,GAAAA,UAAAA,IAAAA,GAAAA,UAAAA,GAA2C,CAAA,GAAA,EAAA,CAAA,YAAA,EAAaA,QAAAA,CAAAA,GAAAA,CAAxDA,YAA2C,CAA3CA;AAEAA,UAAAA,QAAAA,CAAAA,IAAAA,GAAgBE,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAhBF,KAAAA,CAJqC,CAMrC;;AACAA,UAAAA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,GAAuB,YAAM;AACzBA,YAAAA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,GAAAA,IAAAA;AAEAC,YAAAA,IAAAA;AAHJD,WAAAA,CAPqC,CAarC;;;AACA;AACH;AACJ,OApBD,CAqBA;AArBA,WAsBK,IAAIA,QAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAAA,OAAAA,MAAJ,CAAA,EAA+C;AAChD,YAAMI,GAAAA,GAAMP,GAAAA,CAAAA,eAAAA,CAAoBG,QAAAA,CAAhC,IAAYH,CAAZ;AAEAG,QAAAA,QAAAA,CAAAA,IAAAA,GAAgBA,QAAAA,CAAhBA,IAAAA;AACAA,QAAAA,QAAAA,CAAAA,IAAAA,GAAgB,IAAhBA,KAAgB,EAAhBA;AACAA,QAAAA,QAAAA,CAAAA,IAAAA,CAAAA,GAAAA,GAAAA,GAAAA;AAEAA,QAAAA,QAAAA,CAAAA,IAAAA,GAAgBE,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAhBF,KAAAA,CAPgD,CAShD;AACA;;AACAA,QAAAA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,GAAuB,YAAM;AACzBH,UAAAA,GAAAA,CAAAA,eAAAA,CAAAA,GAAAA;AACAG,UAAAA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,GAAAA,IAAAA;AAEAC,UAAAA,IAAAA;AAJJD,SAAAA,CAXgD,CAkBhD;;;AACA;AACH;AACJ;;AAEDC,IAAAA,IAAAA;AAvDJ,GAAA;AAyDH","sourcesContent":["import { Resource } from '../../Resource';\nimport { encodeBinary } from '../../b64';\n\nconst Url = window.URL || window.webkitURL;\n\n// a middleware for transforming XHR loaded Blobs into more useful objects\nexport function blobMiddlewareFactory() {\n    return function blobMiddleware(resource, next) {\n        if (!resource.data) {\n            next();\n\n            return;\n        }\n\n        // if this was an XHR load of a blob\n        if (resource.xhr && resource.xhrType === Resource.XHR_RESPONSE_TYPE.BLOB) {\n            // if there is no blob support we probably got a binary string back\n            if (!window.Blob || typeof resource.data === 'string') {\n                const type = resource.xhr.getResponseHeader('content-type');\n\n                // this is an image, convert the binary string into a data url\n                if (type && type.indexOf('image') === 0) {\n                    resource.data = new Image();\n                    resource.data.src = `data:${type};base64,${encodeBinary(resource.xhr.responseText)}`;\n\n                    resource.type = Resource.TYPE.IMAGE;\n\n                    // wait until the image loads and then callback\n                    resource.data.onload = () => {\n                        resource.data.onload = null;\n\n                        next();\n                    };\n\n                    // next will be called on load\n                    return;\n                }\n            }\n            // if content type says this is an image, then we should transform the blob into an Image object\n            else if (resource.data.type.indexOf('image') === 0) {\n                const src = Url.createObjectURL(resource.data);\n\n                resource.blob = resource.data;\n                resource.data = new Image();\n                resource.data.src = src;\n\n                resource.type = Resource.TYPE.IMAGE;\n\n                // cleanup the no longer used blob after the image loads\n                // TODO: Is this correct? Will the image be invalid after revoking?\n                resource.data.onload = () => {\n                    Url.revokeObjectURL(src);\n                    resource.data.onload = null;\n\n                    next();\n                };\n\n                // next will be called on load.\n                return;\n            }\n        }\n\n        next();\n    };\n}\n"]},"metadata":{},"sourceType":"script"}