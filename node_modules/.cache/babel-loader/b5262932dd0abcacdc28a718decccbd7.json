{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _const = require('../../const');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar Rectangle = function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n   * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n   * @param {number} [width=0] - The overall width of this rectangle\n   * @param {number} [height=0] - The overall height of this rectangle\n   */\n  function Rectangle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Rectangle);\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n\n    this.x = Number(x);\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.y = Number(y);\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.width = Number(width);\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.height = Number(height);\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n\n    this.type = _const.SHAPES.RECT;\n  }\n  /**\n   * returns the left edge of the rectangle\n   *\n   * @member {number}\n   */\n\n  /**\n   * Creates a clone of this Rectangle\n   *\n   * @return {PIXI.Rectangle} a copy of the rectangle\n   */\n\n\n  Rectangle.prototype.clone = function clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Copies another rectangle to this one.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to copy.\n   * @return {PIXI.Rectangle} Returns itself.\n   */\n\n\n  Rectangle.prototype.copy = function copy(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Rectangle\n   */\n\n\n  Rectangle.prototype.contains = function contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Pads the rectangle making it grow in all directions.\n   *\n   * @param {number} paddingX - The horizontal padding amount.\n   * @param {number} [paddingY] - The vertical padding amount.\n   */\n\n\n  Rectangle.prototype.pad = function pad(paddingX, paddingY) {\n    paddingX = paddingX || 0;\n    paddingY = paddingY || (paddingY !== 0 ? paddingX : 0);\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n  };\n  /**\n   * Fits this rectangle around the passed one.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n   */\n\n\n  Rectangle.prototype.fit = function fit(rectangle) {\n    var x1 = Math.max(this.x, rectangle.x);\n    var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.max(this.y, rectangle.y);\n    var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n  };\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n   */\n\n\n  Rectangle.prototype.enlarge = function enlarge(rectangle) {\n    var x1 = Math.min(this.x, rectangle.x);\n    var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.min(this.y, rectangle.y);\n    var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n  };\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   *\n   * @param {number} [resolution=1] resolution\n   * @param {number} [eps=0.001] precision\n   */\n\n\n  Rectangle.prototype.ceil = function ceil() {\n    var resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.001;\n    var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n  };\n\n  _createClass(Rectangle, [{\n    key: 'left',\n    get: function get() {\n      return this.x;\n    }\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'right',\n    get: function get() {\n      return this.x + this.width;\n    }\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'top',\n    get: function get() {\n      return this.y;\n    }\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'bottom',\n    get: function get() {\n      return this.y + this.height;\n    }\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     */\n\n  }], [{\n    key: 'EMPTY',\n    get: function get() {\n      return new Rectangle(0, 0, 0, 0);\n    }\n  }]);\n\n  return Rectangle;\n}();\n\nexports.default = Rectangle;","map":{"version":3,"sources":["../../../../src/core/math/shapes/Rectangle.js"],"names":["Rectangle","x","y","width","height","Number","clone","copy","rectangle","contains","pad","paddingX","paddingY","fit","x1","Math","x2","y1","y2","enlarge","ceil","resolution","eps"],"mappings":"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","sourcesContent":["import { SHAPES } from '../../const';\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Rectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left()\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right()\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top()\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom()\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     */\n    static get EMPTY()\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone()\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    copy(rectangle)\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     *\n     * @param {number} paddingX - The horizontal padding amount.\n     * @param {number} [paddingY] - The vertical padding amount.\n     */\n    pad(paddingX, paddingY)\n    {\n        paddingX = paddingX || 0;\n        paddingY = paddingY || ((paddingY !== 0) ? paddingX : 0);\n\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     */\n    fit(rectangle)\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     */\n    enlarge(rectangle)\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param {number} [resolution=1] resolution\n     * @param {number} [eps=0.001] precision\n     */\n    ceil(resolution = 1, eps = 0.001)\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}