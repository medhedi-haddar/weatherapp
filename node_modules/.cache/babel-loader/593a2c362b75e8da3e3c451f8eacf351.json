{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = trimCanvas;\n/**\n * Trim transparent borders from a canvas\n *\n * @memberof PIXI\n * @function trimCanvas\n * @private\n * @param {HTMLCanvasElement} canvas - the canvas to trim\n * @returns {object} Trim data\n */\n\nfunction trimCanvas(canvas) {\n  // https://gist.github.com/remy/784508\n  var width = canvas.width;\n  var height = canvas.height;\n  var context = canvas.getContext('2d');\n  var imageData = context.getImageData(0, 0, width, height);\n  var pixels = imageData.data;\n  var len = pixels.length;\n  var bound = {\n    top: null,\n    left: null,\n    right: null,\n    bottom: null\n  };\n  var data = null;\n  var i = void 0;\n  var x = void 0;\n  var y = void 0;\n\n  for (i = 0; i < len; i += 4) {\n    if (pixels[i + 3] !== 0) {\n      x = i / 4 % width;\n      y = ~~(i / 4 / width);\n\n      if (bound.top === null) {\n        bound.top = y;\n      }\n\n      if (bound.left === null) {\n        bound.left = x;\n      } else if (x < bound.left) {\n        bound.left = x;\n      }\n\n      if (bound.right === null) {\n        bound.right = x + 1;\n      } else if (bound.right < x) {\n        bound.right = x + 1;\n      }\n\n      if (bound.bottom === null) {\n        bound.bottom = y;\n      } else if (bound.bottom < y) {\n        bound.bottom = y;\n      }\n    }\n  }\n\n  if (bound.top !== null) {\n    width = bound.right - bound.left;\n    height = bound.bottom - bound.top + 1;\n    data = context.getImageData(bound.left, bound.top, width, height);\n  }\n\n  return {\n    height: height,\n    width: width,\n    data: data\n  };\n}","map":{"version":3,"sources":["../../../src/core/utils/trimCanvas.js"],"names":["trimCanvas","width","canvas","height","context","imageData","pixels","len","bound","top","left","right","bottom","data","i","x","y"],"mappings":"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","sourcesContent":["/**\n * Trim transparent borders from a canvas\n *\n * @memberof PIXI\n * @function trimCanvas\n * @private\n * @param {HTMLCanvasElement} canvas - the canvas to trim\n * @returns {object} Trim data\n */\nexport default function trimCanvas(canvas)\n{\n    // https://gist.github.com/remy/784508\n\n    let width = canvas.width;\n    let height = canvas.height;\n\n    const context = canvas.getContext('2d');\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = imageData.data;\n    const len = pixels.length;\n\n    const bound = {\n        top: null,\n        left: null,\n        right: null,\n        bottom: null,\n    };\n    let data = null;\n    let i;\n    let x;\n    let y;\n\n    for (i = 0; i < len; i += 4)\n    {\n        if (pixels[i + 3] !== 0)\n        {\n            x = (i / 4) % width;\n            y = ~~((i / 4) / width);\n\n            if (bound.top === null)\n            {\n                bound.top = y;\n            }\n\n            if (bound.left === null)\n            {\n                bound.left = x;\n            }\n            else if (x < bound.left)\n            {\n                bound.left = x;\n            }\n\n            if (bound.right === null)\n            {\n                bound.right = x + 1;\n            }\n            else if (bound.right < x)\n            {\n                bound.right = x + 1;\n            }\n\n            if (bound.bottom === null)\n            {\n                bound.bottom = y;\n            }\n            else if (bound.bottom < y)\n            {\n                bound.bottom = y;\n            }\n        }\n    }\n\n    if (bound.top !== null)\n    {\n        width = bound.right - bound.left;\n        height = bound.bottom - bound.top + 1;\n        data = context.getImageData(bound.left, bound.top, width, height);\n    }\n\n    return {\n        height,\n        width,\n        data,\n    };\n}\n"]},"metadata":{},"sourceType":"script"}