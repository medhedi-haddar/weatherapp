{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _BlurXFilter = require('./BlurXFilter');\n\nvar _BlurXFilter2 = _interopRequireDefault(_BlurXFilter);\n\nvar _BlurYFilter = require('./BlurYFilter');\n\nvar _BlurYFilter2 = _interopRequireDefault(_BlurYFilter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\n\n\nvar BlurFilter = function (_core$Filter) {\n  _inherits(BlurFilter, _core$Filter);\n  /**\n   * @param {number} strength - The strength of the blur filter.\n   * @param {number} quality - The quality of the blur filter.\n   * @param {number} resolution - The resolution of the blur filter.\n   * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n\n\n  function BlurFilter(strength, quality, resolution, kernelSize) {\n    _classCallCheck(this, BlurFilter);\n\n    var _this = _possibleConstructorReturn(this, _core$Filter.call(this));\n\n    _this.blurXFilter = new _BlurXFilter2.default(strength, quality, resolution, kernelSize);\n    _this.blurYFilter = new _BlurYFilter2.default(strength, quality, resolution, kernelSize);\n    _this.padding = 0;\n    _this.resolution = resolution || core.settings.RESOLUTION;\n    _this.quality = quality || 4;\n    _this.blur = strength || 8;\n    return _this;\n  }\n  /**\n   * Applies the filter.\n   *\n   * @param {PIXI.FilterManager} filterManager - The manager.\n   * @param {PIXI.RenderTarget} input - The input target.\n   * @param {PIXI.RenderTarget} output - The output target.\n   */\n\n\n  BlurFilter.prototype.apply = function apply(filterManager, input, output) {\n    var renderTarget = filterManager.getRenderTarget(true);\n    this.blurXFilter.apply(filterManager, input, renderTarget, true);\n    this.blurYFilter.apply(filterManager, renderTarget, output, false);\n    filterManager.returnRenderTarget(renderTarget);\n  };\n  /**\n   * Sets the strength of both the blurX and blurY properties simultaneously\n   *\n   * @member {number}\n   * @default 2\n   */\n\n\n  _createClass(BlurFilter, [{\n    key: 'blur',\n    get: function get() {\n      return this.blurXFilter.blur;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.blurXFilter.blur = this.blurYFilter.blur = value;\n      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @default 1\n     */\n\n  }, {\n    key: 'quality',\n    get: function get() {\n      return this.blurXFilter.quality;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n\n  }, {\n    key: 'blurX',\n    get: function get() {\n      return this.blurXFilter.blur;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.blurXFilter.blur = value;\n      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n\n  }, {\n    key: 'blurY',\n    get: function get() {\n      return this.blurYFilter.blur;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.blurYFilter.blur = value;\n      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n\n  }, {\n    key: 'blendMode',\n    get: function get() {\n      return this.blurYFilter._blendMode;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.blurYFilter._blendMode = value;\n    }\n  }]);\n\n  return BlurFilter;\n}(core.Filter);\n\nexports.default = BlurFilter;","map":{"version":3,"sources":["../../../src/filters/blur/BlurFilter.js"],"names":["core","BlurFilter","Filter","resolution","quality","strength","apply","filterManager","input","output","renderTarget","value","Math"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;IAAYA,I;;AACZ,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;IAQqBC,U;;AAEjB;;;;;;;;AAMA,WAAA,UAAA,CAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AAAA,QAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EACI,YAAA,CAAA,IAAA,CADJ,IACI,CADJ,CAAA;;AAGI,IAAA,KAAA,CAAA,WAAA,GAAmB,IAAA,aAAA,CAAA,OAAA,CAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EAAnB,UAAmB,CAAnB;AACA,IAAA,KAAA,CAAA,WAAA,GAAmB,IAAA,aAAA,CAAA,OAAA,CAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EAAnB,UAAmB,CAAnB;AAEA,IAAA,KAAA,CAAA,OAAA,GAAA,CAAA;AACA,IAAA,KAAA,CAAA,UAAA,GAAkBE,UAAAA,IAAcH,IAAAA,CAAAA,QAAAA,CAAhC,UAAA;AACA,IAAA,KAAA,CAAA,OAAA,GAAeI,OAAAA,IAAf,CAAA;AACA,IAAA,KAAA,CAAA,IAAA,GAAYC,QAAAA,IAAZ,CAAA;AATJ,WAAA,KAAA;AAUC;AAED;;;;;;;;;uBAOAC,K,kBAAMC,a,EAAeC,K,EAAOC,M,EAC5B;AACI,QAAMC,YAAAA,GAAeH,aAAAA,CAAAA,eAAAA,CAArB,IAAqBA,CAArB;AAEA,SAAA,WAAA,CAAA,KAAA,CAAA,aAAA,EAAA,KAAA,EAAA,YAAA,EAAA,IAAA;AACA,SAAA,WAAA,CAAA,KAAA,CAAA,aAAA,EAAA,YAAA,EAAA,MAAA,EAAA,KAAA;AAEAA,IAAAA,aAAAA,CAAAA,kBAAAA,CAAAA,YAAAA;;AAGJ;;;;;;;;;;wBAOA;AACI,aAAO,KAAA,WAAA,CAAP,IAAA;;sBAGKI,K,EAAO;AAChB;AACI,WAAA,WAAA,CAAA,IAAA,GAAwB,KAAA,WAAA,CAAA,IAAA,GAAxB,KAAA;AACA,WAAA,OAAA,GAAeC,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,GAAAA,CAAS,KAAA,WAAA,CAAlBA,QAASA,CAATA,EAA8CA,IAAAA,CAAAA,GAAAA,CAAS,KAAA,WAAA,CAAvDA,QAA8CA,CAA9CA,IAAf,CAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,KAAA,WAAA,CAAP,OAAA;;sBAGQD,K,EAAO;AACnB;AACI,WAAA,WAAA,CAAA,OAAA,GAA2B,KAAA,WAAA,CAAA,OAAA,GAA3B,KAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,KAAA,WAAA,CAAP,IAAA;;sBAGMA,K,EAAO;AACjB;AACI,WAAA,WAAA,CAAA,IAAA,GAAA,KAAA;AACA,WAAA,OAAA,GAAeC,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,GAAAA,CAAS,KAAA,WAAA,CAAlBA,QAASA,CAATA,EAA8CA,IAAAA,CAAAA,GAAAA,CAAS,KAAA,WAAA,CAAvDA,QAA8CA,CAA9CA,IAAf,CAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,KAAA,WAAA,CAAP,IAAA;;sBAGMD,K,EAAO;AACjB;AACI,WAAA,WAAA,CAAA,IAAA,GAAA,KAAA;AACA,WAAA,OAAA,GAAeC,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,GAAAA,CAAS,KAAA,WAAA,CAAlBA,QAASA,CAATA,EAA8CA,IAAAA,CAAAA,GAAAA,CAAS,KAAA,WAAA,CAAvDA,QAA8CA,CAA9CA,IAAf,CAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,KAAA,WAAA,CAAP,UAAA;;sBAGUD,K,EAAO;AACrB;AACI,WAAA,WAAA,CAAA,UAAA,GAAA,KAAA;AACH;;;;EAvHmCX,IAAAA,CAAKE,M;;kBAAxBD,U","sourcesContent":["import * as core from '../../core';\nimport BlurXFilter from './BlurXFilter';\nimport BlurYFilter from './BlurYFilter';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class BlurFilter extends core.Filter\n{\n    /**\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength, quality, resolution, kernelSize)\n    {\n        super();\n\n        this.blurXFilter = new BlurXFilter(strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurYFilter(strength, quality, resolution, kernelSize);\n\n        this.padding = 0;\n        this.resolution = resolution || core.settings.RESOLUTION;\n        this.quality = quality || 4;\n        this.blur = strength || 8;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output)\n    {\n        const renderTarget = filterManager.getRenderTarget(true);\n\n        this.blurXFilter.apply(filterManager, input, renderTarget, true);\n        this.blurYFilter.apply(filterManager, renderTarget, output, false);\n\n        filterManager.returnRenderTarget(renderTarget);\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @default 1\n     */\n    get quality()\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = value;\n        this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY()\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter.blur = value;\n        this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode()\n    {\n        return this.blurYFilter._blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter._blendMode = value;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}