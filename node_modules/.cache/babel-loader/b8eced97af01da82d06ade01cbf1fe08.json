{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar TEMP_RECT = new core.Rectangle();\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.extract\n *\n * @class\n * @memberof PIXI.extract\n */\n\nvar CanvasExtract = function () {\n  /**\n   * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n   */\n  function CanvasExtract(renderer) {\n    _classCallCheck(this, CanvasExtract);\n\n    this.renderer = renderer;\n    /**\n     * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n     *\n     * @member {PIXI.extract.CanvasExtract} extract\n     * @memberof PIXI.CanvasRenderer#\n     * @see PIXI.extract.CanvasExtract\n     */\n\n    renderer.extract = this;\n  }\n  /**\n   * Will return a HTML Image of the target\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {HTMLImageElement} HTML Image of the target\n   */\n\n\n  CanvasExtract.prototype.image = function image(target) {\n    var image = new Image();\n    image.src = this.base64(target);\n    return image;\n  };\n  /**\n   * Will return a a base64 encoded string of this target. It works by calling\n   *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {string} A base64 encoded string of the texture.\n   */\n\n\n  CanvasExtract.prototype.base64 = function base64(target) {\n    return this.canvas(target).toDataURL();\n  };\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n   */\n\n\n  CanvasExtract.prototype.canvas = function canvas(target) {\n    var renderer = this.renderer;\n    var context = void 0;\n    var resolution = void 0;\n    var frame = void 0;\n    var renderTexture = void 0;\n\n    if (target) {\n      if (target instanceof core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = renderer.generateTexture(target);\n      }\n    }\n\n    if (renderTexture) {\n      context = renderTexture.baseTexture._canvasRenderTarget.context;\n      resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n      frame = renderTexture.frame;\n    } else {\n      context = renderer.rootContext;\n      resolution = renderer.resolution;\n      frame = TEMP_RECT;\n      frame.width = this.renderer.width;\n      frame.height = this.renderer.height;\n    }\n\n    var width = Math.floor(frame.width * resolution + 1e-4);\n    var height = Math.floor(frame.height * resolution + 1e-4);\n    var canvasBuffer = new core.CanvasRenderTarget(width, height, 1);\n    var canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n    canvasBuffer.context.putImageData(canvasData, 0, 0); // send the canvas back..\n\n    return canvasBuffer.canvas;\n  };\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n   */\n\n\n  CanvasExtract.prototype.pixels = function pixels(target) {\n    var renderer = this.renderer;\n    var context = void 0;\n    var resolution = void 0;\n    var frame = void 0;\n    var renderTexture = void 0;\n\n    if (target) {\n      if (target instanceof core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = renderer.generateTexture(target);\n      }\n    }\n\n    if (renderTexture) {\n      context = renderTexture.baseTexture._canvasRenderTarget.context;\n      resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n      frame = renderTexture.frame;\n    } else {\n      context = renderer.rootContext;\n      frame = TEMP_RECT;\n      frame.width = renderer.width;\n      frame.height = renderer.height;\n    }\n\n    return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n  };\n  /**\n   * Destroys the extract\n   *\n   */\n\n\n  CanvasExtract.prototype.destroy = function destroy() {\n    this.renderer.extract = null;\n    this.renderer = null;\n  };\n\n  return CanvasExtract;\n}();\n\nexports.default = CanvasExtract;\ncore.CanvasRenderer.registerPlugin('extract', CanvasExtract);","map":{"version":3,"sources":["../../../src/extract/canvas/CanvasExtract.js"],"names":["core","TEMP_RECT","CanvasExtract","renderer","image","target","base64","canvas","context","resolution","frame","renderTexture","width","Math","height","canvasBuffer","canvasData","pixels","destroy"],"mappings":"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","sourcesContent":["import * as core from '../../core';\n\nconst TEMP_RECT = new core.Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.extract\n *\n * @class\n * @memberof PIXI.extract\n */\nexport default class CanvasExtract\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.extract.CanvasExtract} extract\n         * @memberof PIXI.CanvasRenderer#\n         * @see PIXI.extract.CanvasExtract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target)\n    {\n        return this.canvas(target).toDataURL();\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof core.RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = renderTexture.baseTexture._canvasRenderTarget.context;\n            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new core.CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof core.RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = renderTexture.baseTexture._canvasRenderTarget.context;\n            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n        }\n\n        return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n}\n\ncore.CanvasRenderer.registerPlugin('extract', CanvasExtract);\n"]},"metadata":{},"sourceType":"script"}