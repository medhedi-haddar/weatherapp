{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * DisplayObjects with the {@link PIXI.interaction.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI.interaction\n */\n\n\nvar InteractionTrackingData = function () {\n  /**\n   * @param {number} pointerId - Unique pointer id of the event\n   */\n  function InteractionTrackingData(pointerId) {\n    _classCallCheck(this, InteractionTrackingData);\n\n    this._pointerId = pointerId;\n    this._flags = InteractionTrackingData.FLAGS.NONE;\n  }\n  /**\n   *\n   * @private\n   * @param {number} flag - The interaction flag to set\n   * @param {boolean} yn - Should the flag be set or unset\n   */\n\n\n  InteractionTrackingData.prototype._doSet = function _doSet(flag, yn) {\n    if (yn) {\n      this._flags = this._flags | flag;\n    } else {\n      this._flags = this._flags & ~flag;\n    }\n  };\n  /**\n   * Unique pointer id of the event\n   *\n   * @readonly\n   * @member {number}\n   */\n\n\n  _createClass(InteractionTrackingData, [{\n    key: \"pointerId\",\n    get: function get() {\n      return this._pointerId;\n    }\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n\n  }, {\n    key: \"flags\",\n    get: function get() {\n      return this._flags;\n    }\n    /**\n     * Set the flags for the tracking data\n     *\n     * @param {number} flags - Flags to set\n     */\n    ,\n    set: function set(flags) {\n      this._flags = flags;\n    }\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n\n  }, {\n    key: \"none\",\n    get: function get() {\n      return this._flags === this.constructor.FLAGS.NONE;\n    }\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n\n  }, {\n    key: \"over\",\n    get: function get() {\n      return (this._flags & this.constructor.FLAGS.OVER) !== 0;\n    }\n    /**\n     * Set the over flag\n     *\n     * @param {boolean} yn - Is the event over?\n     */\n    ,\n    set: function set(yn) {\n      this._doSet(this.constructor.FLAGS.OVER, yn);\n    }\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n\n  }, {\n    key: \"rightDown\",\n    get: function get() {\n      return (this._flags & this.constructor.FLAGS.RIGHT_DOWN) !== 0;\n    }\n    /**\n     * Set the right down flag\n     *\n     * @param {boolean} yn - Is the right mouse button down?\n     */\n    ,\n    set: function set(yn) {\n      this._doSet(this.constructor.FLAGS.RIGHT_DOWN, yn);\n    }\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n\n  }, {\n    key: \"leftDown\",\n    get: function get() {\n      return (this._flags & this.constructor.FLAGS.LEFT_DOWN) !== 0;\n    }\n    /**\n     * Set the left down flag\n     *\n     * @param {boolean} yn - Is the left mouse button down?\n     */\n    ,\n    set: function set(yn) {\n      this._doSet(this.constructor.FLAGS.LEFT_DOWN, yn);\n    }\n  }]);\n\n  return InteractionTrackingData;\n}();\n\nexports.default = InteractionTrackingData;\nInteractionTrackingData.FLAGS = Object.freeze({\n  NONE: 0,\n  OVER: 1 << 0,\n  LEFT_DOWN: 1 << 1,\n  RIGHT_DOWN: 1 << 2\n});","map":{"version":3,"sources":["../../src/interaction/InteractionTrackingData.js"],"names":["InteractionTrackingData","_doSet","flag","yn","flags","NONE","OVER","LEFT_DOWN","RIGHT_DOWN"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;IAOqBA,uB;AAEjB;;;AAGA,WAAA,uBAAA,CAAA,SAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,uBAAA,CAAA;;AACI,SAAA,UAAA,GAAA,SAAA;AACA,SAAA,MAAA,GAAcA,uBAAAA,CAAAA,KAAAA,CAAd,IAAA;AACH;AAED;;;;;;;;oCAMAC,M,mBAAOC,I,EAAMC,E,EACb;AACI,QAAA,EAAA,EACA;AACI,WAAA,MAAA,GAAc,KAAA,MAAA,GAAd,IAAA;AAFJ,KAAA,MAKA;AACI,WAAA,MAAA,GAAc,KAAA,MAAA,GAAe,CAA7B,IAAA;AACH;;AAGL;;;;;;;;;;wBAOA;AACI,aAAO,KAAP,UAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,KAAP,MAAA;AACH;AAED;;;;;;sBAKUC,K,EACV;AACI,WAAA,MAAA,GAAA,KAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,KAAA,MAAA,KAAgB,KAAA,WAAA,CAAA,KAAA,CAAvB,IAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,CAAC,KAAA,MAAA,GAAc,KAAA,WAAA,CAAA,KAAA,CAAf,IAAA,MAAP,CAAA;AACH;AAED;;;;;;sBAKSD,E,EACT;AACI,WAAA,MAAA,CAAY,KAAA,WAAA,CAAA,KAAA,CAAZ,IAAA,EAAA,EAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,CAAC,KAAA,MAAA,GAAc,KAAA,WAAA,CAAA,KAAA,CAAf,UAAA,MAAP,CAAA;AACH;AAED;;;;;;sBAKcA,E,EACd;AACI,WAAA,MAAA,CAAY,KAAA,WAAA,CAAA,KAAA,CAAZ,UAAA,EAAA,EAAA;AACH;AAED;;;;;;;;;wBAOA;AACI,aAAO,CAAC,KAAA,MAAA,GAAc,KAAA,WAAA,CAAA,KAAA,CAAf,SAAA,MAAP,CAAA;AACH;AAED;;;;;;sBAKaA,E,EACb;AACI,WAAA,MAAA,CAAY,KAAA,WAAA,CAAA,KAAA,CAAZ,SAAA,EAAA,EAAA;AACH;;;;;;kBArIgBH,uB;AAwIrBA,uBAAAA,CAAAA,KAAAA,GAAgC,MAAA,CAAA,MAAA,CAAc;AAC1CK,EAAAA,IAAAA,EAD0C,CAAA;AAE1CC,EAAAA,IAAAA,EAAM,KAFoC,CAAA;AAG1CC,EAAAA,SAAAA,EAAW,KAH+B,CAAA;AAI1CC,EAAAA,UAAAA,EAAY,KAAK;AAJyB,CAAd,CAAhCR","sourcesContent":["/**\n * DisplayObjects with the {@link PIXI.interaction.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI.interaction\n */\nexport default class InteractionTrackingData\n{\n    /**\n     * @param {number} pointerId - Unique pointer id of the event\n     */\n    constructor(pointerId)\n    {\n        this._pointerId = pointerId;\n        this._flags = InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     *\n     * @private\n     * @param {number} flag - The interaction flag to set\n     * @param {boolean} yn - Should the flag be set or unset\n     */\n    _doSet(flag, yn)\n    {\n        if (yn)\n        {\n            this._flags = this._flags | flag;\n        }\n        else\n        {\n            this._flags = this._flags & (~flag);\n        }\n    }\n\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @member {number}\n     */\n    get pointerId()\n    {\n        return this._pointerId;\n    }\n\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get flags()\n    {\n        return this._flags;\n    }\n\n    /**\n     * Set the flags for the tracking data\n     *\n     * @param {number} flags - Flags to set\n     */\n    set flags(flags)\n    {\n        this._flags = flags;\n    }\n\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get none()\n    {\n        return this._flags === this.constructor.FLAGS.NONE;\n    }\n\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get over()\n    {\n        return (this._flags & this.constructor.FLAGS.OVER) !== 0;\n    }\n\n    /**\n     * Set the over flag\n     *\n     * @param {boolean} yn - Is the event over?\n     */\n    set over(yn)\n    {\n        this._doSet(this.constructor.FLAGS.OVER, yn);\n    }\n\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get rightDown()\n    {\n        return (this._flags & this.constructor.FLAGS.RIGHT_DOWN) !== 0;\n    }\n\n    /**\n     * Set the right down flag\n     *\n     * @param {boolean} yn - Is the right mouse button down?\n     */\n    set rightDown(yn)\n    {\n        this._doSet(this.constructor.FLAGS.RIGHT_DOWN, yn);\n    }\n\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get leftDown()\n    {\n        return (this._flags & this.constructor.FLAGS.LEFT_DOWN) !== 0;\n    }\n\n    /**\n     * Set the left down flag\n     *\n     * @param {boolean} yn - Is the left mouse button down?\n     */\n    set leftDown(yn)\n    {\n        this._doSet(this.constructor.FLAGS.LEFT_DOWN, yn);\n    }\n}\n\nInteractionTrackingData.FLAGS = Object.freeze({\n    NONE: 0,\n    OVER: 1 << 0,\n    LEFT_DOWN: 1 << 1,\n    RIGHT_DOWN: 1 << 2,\n});\n"]},"metadata":{},"sourceType":"script"}