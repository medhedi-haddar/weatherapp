{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _mapWebGLBlendModesToPixi = require('./utils/mapWebGLBlendModesToPixi');\n\nvar _mapWebGLBlendModesToPixi2 = _interopRequireDefault(_mapWebGLBlendModesToPixi);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar BLEND = 0;\nvar DEPTH_TEST = 1;\nvar FRONT_FACE = 2;\nvar CULL_FACE = 3;\nvar BLEND_FUNC = 4;\n/**\n * A WebGL state machines\n *\n * @memberof PIXI\n * @class\n */\n\nvar WebGLState = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n   */\n  function WebGLState(gl) {\n    _classCallCheck(this, WebGLState);\n    /**\n     * The current active state\n     *\n     * @member {Uint8Array}\n     */\n\n\n    this.activeState = new Uint8Array(16);\n    /**\n     * The default state\n     *\n     * @member {Uint8Array}\n     */\n\n    this.defaultState = new Uint8Array(16); // default blend mode..\n\n    this.defaultState[0] = 1;\n    /**\n     * The current state index in the stack\n     *\n     * @member {number}\n     * @private\n     */\n\n    this.stackIndex = 0;\n    /**\n     * The stack holding all the different states\n     *\n     * @member {Array<*>}\n     * @private\n     */\n\n    this.stack = [];\n    /**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n\n    this.gl = gl;\n    this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this.attribState = {\n      tempAttribState: new Array(this.maxAttribs),\n      attribState: new Array(this.maxAttribs)\n    };\n    this.blendModes = (0, _mapWebGLBlendModesToPixi2.default)(gl); // check we have vao..\n\n    this.nativeVaoExtension = gl.getExtension('OES_vertex_array_object') || gl.getExtension('MOZ_OES_vertex_array_object') || gl.getExtension('WEBKIT_OES_vertex_array_object');\n  }\n  /**\n   * Pushes a new active state\n   */\n\n\n  WebGLState.prototype.push = function push() {\n    // next state..\n    var state = this.stack[this.stackIndex];\n\n    if (!state) {\n      state = this.stack[this.stackIndex] = new Uint8Array(16);\n    }\n\n    ++this.stackIndex; // copy state..\n    // set active state so we can force overrides of gl state\n\n    for (var i = 0; i < this.activeState.length; i++) {\n      state[i] = this.activeState[i];\n    }\n  };\n  /**\n   * Pops a state out\n   */\n\n\n  WebGLState.prototype.pop = function pop() {\n    var state = this.stack[--this.stackIndex];\n    this.setState(state);\n  };\n  /**\n   * Sets the current state\n   *\n   * @param {*} state - The state to set.\n   */\n\n\n  WebGLState.prototype.setState = function setState(state) {\n    this.setBlend(state[BLEND]);\n    this.setDepthTest(state[DEPTH_TEST]);\n    this.setFrontFace(state[FRONT_FACE]);\n    this.setCullFace(state[CULL_FACE]);\n    this.setBlendMode(state[BLEND_FUNC]);\n  };\n  /**\n   * Enables or disabled blending.\n   *\n   * @param {boolean} value - Turn on or off webgl blending.\n   */\n\n\n  WebGLState.prototype.setBlend = function setBlend(value) {\n    value = value ? 1 : 0;\n\n    if (this.activeState[BLEND] === value) {\n      return;\n    }\n\n    this.activeState[BLEND] = value;\n    this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n  };\n  /**\n   * Sets the blend mode.\n   *\n   * @param {number} value - The blend mode to set to.\n   */\n\n\n  WebGLState.prototype.setBlendMode = function setBlendMode(value) {\n    if (value === this.activeState[BLEND_FUNC]) {\n      return;\n    }\n\n    this.activeState[BLEND_FUNC] = value;\n    var mode = this.blendModes[value];\n\n    if (mode.length === 2) {\n      this.gl.blendFunc(mode[0], mode[1]);\n    } else {\n      this.gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n    }\n  };\n  /**\n   * Sets whether to enable or disable depth test.\n   *\n   * @param {boolean} value - Turn on or off webgl depth testing.\n   */\n\n\n  WebGLState.prototype.setDepthTest = function setDepthTest(value) {\n    value = value ? 1 : 0;\n\n    if (this.activeState[DEPTH_TEST] === value) {\n      return;\n    }\n\n    this.activeState[DEPTH_TEST] = value;\n    this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n  };\n  /**\n   * Sets whether to enable or disable cull face.\n   *\n   * @param {boolean} value - Turn on or off webgl cull face.\n   */\n\n\n  WebGLState.prototype.setCullFace = function setCullFace(value) {\n    value = value ? 1 : 0;\n\n    if (this.activeState[CULL_FACE] === value) {\n      return;\n    }\n\n    this.activeState[CULL_FACE] = value;\n    this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n  };\n  /**\n   * Sets the gl front face.\n   *\n   * @param {boolean} value - true is clockwise and false is counter-clockwise\n   */\n\n\n  WebGLState.prototype.setFrontFace = function setFrontFace(value) {\n    value = value ? 1 : 0;\n\n    if (this.activeState[FRONT_FACE] === value) {\n      return;\n    }\n\n    this.activeState[FRONT_FACE] = value;\n    this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n  };\n  /**\n   * Disables all the vaos in use\n   *\n   */\n\n\n  WebGLState.prototype.resetAttributes = function resetAttributes() {\n    for (var i = 0; i < this.attribState.tempAttribState.length; i++) {\n      this.attribState.tempAttribState[i] = 0;\n    }\n\n    for (var _i = 0; _i < this.attribState.attribState.length; _i++) {\n      this.attribState.attribState[_i] = 0;\n    } // im going to assume one is always active for performance reasons.\n\n\n    for (var _i2 = 1; _i2 < this.maxAttribs; _i2++) {\n      this.gl.disableVertexAttribArray(_i2);\n    }\n  }; // used\n\n  /**\n   * Resets all the logic and disables the vaos\n   */\n\n\n  WebGLState.prototype.resetToDefault = function resetToDefault() {\n    // unbind any VAO if they exist..\n    if (this.nativeVaoExtension) {\n      this.nativeVaoExtension.bindVertexArrayOES(null);\n    } // reset all attributes..\n\n\n    this.resetAttributes(); // set active state so we can force overrides of gl state\n\n    for (var i = 0; i < this.activeState.length; ++i) {\n      this.activeState[i] = 32;\n    }\n\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n    this.setState(this.defaultState);\n  };\n\n  return WebGLState;\n}();\n\nexports.default = WebGLState;","map":{"version":3,"sources":["../../../../src/core/renderers/webgl/WebGLState.js"],"names":["BLEND","DEPTH_TEST","FRONT_FACE","CULL_FACE","BLEND_FUNC","WebGLState","gl","tempAttribState","attribState","push","state","i","pop","setState","setBlend","value","setBlendMode","mode","setDepthTest","setCullFace","setFrontFace","resetAttributes","resetToDefault"],"mappings":"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","sourcesContent":["import mapWebGLBlendModesToPixi from './utils/mapWebGLBlendModesToPixi';\n\nconst BLEND = 0;\nconst DEPTH_TEST = 1;\nconst FRONT_FACE = 2;\nconst CULL_FACE = 3;\nconst BLEND_FUNC = 4;\n\n/**\n * A WebGL state machines\n *\n * @memberof PIXI\n * @class\n */\nexport default class WebGLState\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     */\n    constructor(gl)\n    {\n        /**\n         * The current active state\n         *\n         * @member {Uint8Array}\n         */\n        this.activeState = new Uint8Array(16);\n\n        /**\n         * The default state\n         *\n         * @member {Uint8Array}\n         */\n        this.defaultState = new Uint8Array(16);\n\n        // default blend mode..\n        this.defaultState[0] = 1;\n\n        /**\n         * The current state index in the stack\n         *\n         * @member {number}\n         * @private\n         */\n        this.stackIndex = 0;\n\n        /**\n         * The stack holding all the different states\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.stack = [];\n\n        /**\n         * The current WebGL rendering context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n        this.attribState = {\n            tempAttribState: new Array(this.maxAttribs),\n            attribState: new Array(this.maxAttribs),\n        };\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        // check we have vao..\n        this.nativeVaoExtension = (\n            gl.getExtension('OES_vertex_array_object')\n            || gl.getExtension('MOZ_OES_vertex_array_object')\n            || gl.getExtension('WEBKIT_OES_vertex_array_object')\n        );\n    }\n\n    /**\n     * Pushes a new active state\n     */\n    push()\n    {\n        // next state..\n        let state = this.stack[this.stackIndex];\n\n        if (!state)\n        {\n            state = this.stack[this.stackIndex] = new Uint8Array(16);\n        }\n\n        ++this.stackIndex;\n\n        // copy state..\n        // set active state so we can force overrides of gl state\n        for (let i = 0; i < this.activeState.length; i++)\n        {\n            state[i] = this.activeState[i];\n        }\n    }\n\n    /**\n     * Pops a state out\n     */\n    pop()\n    {\n        const state = this.stack[--this.stackIndex];\n\n        this.setState(state);\n    }\n\n    /**\n     * Sets the current state\n     *\n     * @param {*} state - The state to set.\n     */\n    setState(state)\n    {\n        this.setBlend(state[BLEND]);\n        this.setDepthTest(state[DEPTH_TEST]);\n        this.setFrontFace(state[FRONT_FACE]);\n        this.setCullFace(state[CULL_FACE]);\n        this.setBlendMode(state[BLEND_FUNC]);\n    }\n\n    /**\n     * Enables or disabled blending.\n     *\n     * @param {boolean} value - Turn on or off webgl blending.\n     */\n    setBlend(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[BLEND] === value)\n        {\n            return;\n        }\n\n        this.activeState[BLEND] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets the blend mode.\n     *\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value)\n    {\n        if (value === this.activeState[BLEND_FUNC])\n        {\n            return;\n        }\n\n        this.activeState[BLEND_FUNC] = value;\n\n        const mode = this.blendModes[value];\n\n        if (mode.length === 2)\n        {\n            this.gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            this.gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     *\n     * @param {boolean} value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[DEPTH_TEST] === value)\n        {\n            return;\n        }\n\n        this.activeState[DEPTH_TEST] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     *\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[CULL_FACE] === value)\n        {\n            return;\n        }\n\n        this.activeState[CULL_FACE] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     *\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[FRONT_FACE] === value)\n        {\n            return;\n        }\n\n        this.activeState[FRONT_FACE] = value;\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Disables all the vaos in use\n     *\n     */\n    resetAttributes()\n    {\n        for (let i = 0; i < this.attribState.tempAttribState.length; i++)\n        {\n            this.attribState.tempAttribState[i] = 0;\n        }\n\n        for (let i = 0; i < this.attribState.attribState.length; i++)\n        {\n            this.attribState.attribState[i] = 0;\n        }\n\n        // im going to assume one is always active for performance reasons.\n        for (let i = 1; i < this.maxAttribs; i++)\n        {\n            this.gl.disableVertexAttribArray(i);\n        }\n    }\n\n    // used\n    /**\n     * Resets all the logic and disables the vaos\n     */\n    resetToDefault()\n    {\n        // unbind any VAO if they exist..\n        if (this.nativeVaoExtension)\n        {\n            this.nativeVaoExtension.bindVertexArrayOES(null);\n        }\n\n        // reset all attributes..\n        this.resetAttributes();\n\n        // set active state so we can force overrides of gl state\n        for (let i = 0; i < this.activeState.length; ++i)\n        {\n            this.activeState[i] = 32;\n        }\n\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.setState(this.defaultState);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}