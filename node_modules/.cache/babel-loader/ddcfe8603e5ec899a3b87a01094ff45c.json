{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = generateVertBlurSource;\nvar vertTemplate = ['attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform float strength;', 'uniform mat3 projectionMatrix;', 'varying vec2 vBlurTexCoords[%size%];', 'void main(void)', '{', 'gl_Position = vec4((projectionMatrix * vec3((aVertexPosition), 1.0)).xy, 0.0, 1.0);', '%blur%', '}'].join('\\n');\n\nfunction generateVertBlurSource(kernelSize, x) {\n  var halfLength = Math.ceil(kernelSize / 2);\n  var vertSource = vertTemplate;\n  var blurLoop = '';\n  var template = void 0; // let value;\n\n  if (x) {\n    template = 'vBlurTexCoords[%index%] = aTextureCoord + vec2(%sampleIndex% * strength, 0.0);';\n  } else {\n    template = 'vBlurTexCoords[%index%] = aTextureCoord + vec2(0.0, %sampleIndex% * strength);';\n  }\n\n  for (var i = 0; i < kernelSize; i++) {\n    var blur = template.replace('%index%', i); // value = i;\n    // if(i >= halfLength)\n    // {\n    //     value = kernelSize - i - 1;\n    // }\n\n    blur = blur.replace('%sampleIndex%', i - (halfLength - 1) + '.0');\n    blurLoop += blur;\n    blurLoop += '\\n';\n  }\n\n  vertSource = vertSource.replace('%blur%', blurLoop);\n  vertSource = vertSource.replace('%size%', kernelSize);\n  return vertSource;\n}","map":{"version":3,"sources":["../../../src/filters/blur/generateBlurVertSource.js"],"names":["vertTemplate","generateVertBlurSource","halfLength","Math","kernelSize","vertSource","blurLoop","template","i","blur"],"mappings":";;;kBAgBwBC,sB;AAhBxB,IAAMD,YAAAA,GAAe,CAAA,iCAAA,EAAA,+BAAA,EAAA,yBAAA,EAAA,gCAAA,EAAA,sCAAA,EAAA,iBAAA,EAAA,GAAA,EAAA,qFAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,CAArB,IAAqB,CAArB;;AAgBe,SAAA,sBAAA,CAAA,UAAA,EAAA,CAAA,EACf;AACI,MAAME,UAAAA,GAAaC,IAAAA,CAAAA,IAAAA,CAAUC,UAAAA,GAA7B,CAAmBD,CAAnB;AAEA,MAAIE,UAAAA,GAAJ,YAAA;AAEA,MAAIC,QAAAA,GAAJ,EAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA,CANJ,CAOI;;AAEA,MAAA,CAAA,EACA;AACIA,IAAAA,QAAAA,GAAAA,gFAAAA;AAFJ,GAAA,MAKA;AACIA,IAAAA,QAAAA,GAAAA,gFAAAA;AACH;;AAED,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,UAAA,EAAgCA,CAAhC,EAAA,EACA;AACI,QAAIC,IAAAA,GAAOF,QAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAX,CAAWA,CAAX,CADJ,CAGI;AAEA;AACA;AACA;AACA;;AAEAE,IAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,eAAAA,EAAiCD,CAAAA,IAAKN,UAAAA,GAAtCO,CAAiCD,CAAAA,GAAxCC,IAAOA,CAAPA;AAEAH,IAAAA,QAAAA,IAAAA,IAAAA;AACAA,IAAAA,QAAAA,IAAAA,IAAAA;AACH;;AAEDD,EAAAA,UAAAA,GAAaA,UAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAbA,QAAaA,CAAbA;AACAA,EAAAA,UAAAA,GAAaA,UAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAbA,UAAaA,CAAbA;AAEA,SAAA,UAAA;AACH","sourcesContent":["const vertTemplate = [\n    'attribute vec2 aVertexPosition;',\n    'attribute vec2 aTextureCoord;',\n\n    'uniform float strength;',\n    'uniform mat3 projectionMatrix;',\n\n    'varying vec2 vBlurTexCoords[%size%];',\n\n    'void main(void)',\n    '{',\n    'gl_Position = vec4((projectionMatrix * vec3((aVertexPosition), 1.0)).xy, 0.0, 1.0);',\n    '%blur%',\n    '}',\n].join('\\n');\n\nexport default function generateVertBlurSource(kernelSize, x)\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n    // let value;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] = aTextureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] = aTextureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        // value = i;\n\n        // if(i >= halfLength)\n        // {\n        //     value = kernelSize - i - 1;\n        // }\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize);\n\n    return vertSource;\n}\n"]},"metadata":{},"sourceType":"script"}