{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildRectangle;\n\nvar _buildLine = require('./buildLine');\n\nvar _buildLine2 = _interopRequireDefault(_buildLine);\n\nvar _utils = require('../../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\n\n\nfunction buildRectangle(graphicsData, webGLData, webGLDataNativeLines) {\n  // --- //\n  // need to convert points to a nice regular data\n  //\n  var rectData = graphicsData.shape;\n  var x = rectData.x;\n  var y = rectData.y;\n  var width = rectData.width;\n  var height = rectData.height;\n\n  if (graphicsData.fill) {\n    var color = (0, _utils.hex2rgb)(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var vertPos = verts.length / 6; // start\n\n    verts.push(x, y);\n    verts.push(r, g, b, alpha);\n    verts.push(x + width, y);\n    verts.push(r, g, b, alpha);\n    verts.push(x, y + height);\n    verts.push(r, g, b, alpha);\n    verts.push(x + width, y + height);\n    verts.push(r, g, b, alpha); // insert 2 dead triangles..\n\n    indices.push(vertPos, vertPos, vertPos + 1, vertPos + 2, vertPos + 3, vertPos + 3);\n  }\n\n  if (graphicsData.lineWidth) {\n    var tempPoints = graphicsData.points;\n    graphicsData.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y];\n    (0, _buildLine2.default)(graphicsData, webGLData, webGLDataNativeLines);\n    graphicsData.points = tempPoints;\n  }\n}","map":{"version":3,"sources":["../../../../../src/core/graphics/webgl/utils/buildRectangle.js"],"names":["buildRectangle","rectData","graphicsData","x","y","width","height","color","alpha","r","g","b","verts","webGLData","indices","vertPos","tempPoints"],"mappings":";;;kBAcwBA,c;;AAdxB,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;;;;;;AAEA;;;;;;;;;;;;;AAWe,SAAA,cAAA,CAAA,YAAA,EAAA,SAAA,EAAA,oBAAA,EACf;AACI;AACA;AACA;AACA,MAAMC,QAAAA,GAAWC,YAAAA,CAAjB,KAAA;AACA,MAAMC,CAAAA,GAAIF,QAAAA,CAAV,CAAA;AACA,MAAMG,CAAAA,GAAIH,QAAAA,CAAV,CAAA;AACA,MAAMI,KAAAA,GAAQJ,QAAAA,CAAd,KAAA;AACA,MAAMK,MAAAA,GAASL,QAAAA,CAAf,MAAA;;AAEA,MAAIC,YAAAA,CAAJ,IAAA,EACA;AACI,QAAMK,KAAAA,GAAQ,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQL,YAAAA,CAAtB,SAAc,CAAd;AACA,QAAMM,KAAAA,GAAQN,YAAAA,CAAd,SAAA;AAEA,QAAMO,CAAAA,GAAIF,KAAAA,CAAAA,CAAAA,CAAAA,GAAV,KAAA;AACA,QAAMG,CAAAA,GAAIH,KAAAA,CAAAA,CAAAA,CAAAA,GAAV,KAAA;AACA,QAAMI,CAAAA,GAAIJ,KAAAA,CAAAA,CAAAA,CAAAA,GAAV,KAAA;AAEA,QAAMK,KAAAA,GAAQC,SAAAA,CAAd,MAAA;AACA,QAAMC,OAAAA,GAAUD,SAAAA,CAAhB,OAAA;AAEA,QAAME,OAAAA,GAAUH,KAAAA,CAAAA,MAAAA,GAAhB,CAAA,CAXJ,CAaI;;AACAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA;AAEAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAWT,CAAAA,GAAXS,KAAAA,EAAAA,CAAAA;AACAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA;AAEAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAcR,CAAAA,GAAdQ,MAAAA;AACAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA;AAEAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAWT,CAAAA,GAAXS,KAAAA,EAAsBR,CAAAA,GAAtBQ,MAAAA;AACAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAxBJ,CA0BI;;AACAE,IAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAA+BC,OAAAA,GAA/BD,CAAAA,EAA4CC,OAAAA,GAA5CD,CAAAA,EAAyDC,OAAAA,GAAzDD,CAAAA,EAAsEC,OAAAA,GAAtED,CAAAA;AACH;;AAED,MAAIZ,YAAAA,CAAJ,SAAA,EACA;AACI,QAAMc,UAAAA,GAAad,YAAAA,CAAnB,MAAA;AAEAA,IAAAA,YAAAA,CAAAA,MAAAA,GAAsB,CAAA,CAAA,EAAA,CAAA,EAClBC,CAAAA,GADkB,KAAA,EAAA,CAAA,EAElBA,CAAAA,GAFkB,KAAA,EAEPC,CAAAA,GAFO,MAAA,EAAA,CAAA,EAGfA,CAAAA,GAHe,MAAA,EAAA,CAAA,EAAtBF,CAAsB,CAAtBA;AAMA,KAAA,GAAA,WAAA,CAAA,OAAA,EAAA,YAAA,EAAA,SAAA,EAAA,oBAAA;AAEAA,IAAAA,YAAAA,CAAAA,MAAAA,GAAAA,UAAAA;AACH;AACJ","sourcesContent":["import buildLine from './buildLine';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildRectangle(graphicsData, webGLData, webGLDataNativeLines)\n{\n    // --- //\n    // need to convert points to a nice regular data\n    //\n    const rectData = graphicsData.shape;\n    const x = rectData.x;\n    const y = rectData.y;\n    const width = rectData.width;\n    const height = rectData.height;\n\n    if (graphicsData.fill)\n    {\n        const color = hex2rgb(graphicsData.fillColor);\n        const alpha = graphicsData.fillAlpha;\n\n        const r = color[0] * alpha;\n        const g = color[1] * alpha;\n        const b = color[2] * alpha;\n\n        const verts = webGLData.points;\n        const indices = webGLData.indices;\n\n        const vertPos = verts.length / 6;\n\n        // start\n        verts.push(x, y);\n        verts.push(r, g, b, alpha);\n\n        verts.push(x + width, y);\n        verts.push(r, g, b, alpha);\n\n        verts.push(x, y + height);\n        verts.push(r, g, b, alpha);\n\n        verts.push(x + width, y + height);\n        verts.push(r, g, b, alpha);\n\n        // insert 2 dead triangles..\n        indices.push(vertPos, vertPos, vertPos + 1, vertPos + 2, vertPos + 3, vertPos + 3);\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        const tempPoints = graphicsData.points;\n\n        graphicsData.points = [x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height,\n            x, y];\n\n        buildLine(graphicsData, webGLData, webGLDataNativeLines);\n\n        graphicsData.points = tempPoints;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}