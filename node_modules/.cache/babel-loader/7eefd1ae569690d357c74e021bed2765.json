{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = generateFragBlurSource;\nvar GAUSSIAN_VALUES = {\n  5: [0.153388, 0.221461, 0.250301],\n  7: [0.071303, 0.131514, 0.189879, 0.214607],\n  9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n  11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n  13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n  15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448]\n};\nvar fragTemplate = ['varying vec2 vBlurTexCoords[%size%];', 'uniform sampler2D uSampler;', 'void main(void)', '{', '    gl_FragColor = vec4(0.0);', '    %blur%', '}'].join('\\n');\n\nfunction generateFragBlurSource(kernelSize) {\n  var kernel = GAUSSIAN_VALUES[kernelSize];\n  var halfLength = kernel.length;\n  var fragSource = fragTemplate;\n  var blurLoop = '';\n  var template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n  var value = void 0;\n\n  for (var i = 0; i < kernelSize; i++) {\n    var blur = template.replace('%index%', i);\n    value = i;\n\n    if (i >= halfLength) {\n      value = kernelSize - i - 1;\n    }\n\n    blur = blur.replace('%value%', kernel[value]);\n    blurLoop += blur;\n    blurLoop += '\\n';\n  }\n\n  fragSource = fragSource.replace('%blur%', blurLoop);\n  fragSource = fragSource.replace('%size%', kernelSize);\n  return fragSource;\n}","map":{"version":3,"sources":["../../../src/filters/blur/generateBlurFragSource.js"],"names":["GAUSSIAN_VALUES","fragTemplate","generateFragBlurSource","kernel","halfLength","fragSource","blurLoop","template","value","i","blur","kernelSize"],"mappings":";;;kBAqBwBE,sB;AArBxB,IAAMF,eAAAA,GAAkB;AACpB,KAAG,CAAA,QAAA,EAAA,QAAA,EADiB,QACjB,CADiB;AAEpB,KAAG,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAFiB,QAEjB,CAFiB;AAGpB,KAAG,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAHiB,OAGjB,CAHiB;AAIpB,MAAI,CAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAJgB,QAIhB,CAJgB;AAKpB,MAAI,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EALgB,QAKhB,CALgB;AAMpB,MAAI,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA;AANgB,CAAxB;AASA,IAAMC,YAAAA,GAAe,CAAA,sCAAA,EAAA,6BAAA,EAAA,iBAAA,EAAA,GAAA,EAAA,+BAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,CAArB,IAAqB,CAArB;;AAYe,SAAA,sBAAA,CAAA,UAAA,EACf;AACI,MAAME,MAAAA,GAASH,eAAAA,CAAf,UAAeA,CAAf;AACA,MAAMI,UAAAA,GAAaD,MAAAA,CAAnB,MAAA;AAEA,MAAIE,UAAAA,GAAJ,YAAA;AAEA,MAAIC,QAAAA,GAAJ,EAAA;AACA,MAAMC,QAAAA,GAAN,yEAAA;AACA,MAAIC,KAAAA,GAAAA,KAAJ,CAAA;;AAEA,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,UAAA,EAAgCA,CAAhC,EAAA,EACA;AACI,QAAIC,IAAAA,GAAOH,QAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAX,CAAWA,CAAX;AAEAC,IAAAA,KAAAA,GAAAA,CAAAA;;AAEA,QAAIC,CAAAA,IAAJ,UAAA,EACA;AACID,MAAAA,KAAAA,GAAQG,UAAAA,GAAAA,CAAAA,GAARH,CAAAA;AACH;;AAEDE,IAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAwBP,MAAAA,CAA/BO,KAA+BP,CAAxBO,CAAPA;AAEAJ,IAAAA,QAAAA,IAAAA,IAAAA;AACAA,IAAAA,QAAAA,IAAAA,IAAAA;AACH;;AAEDD,EAAAA,UAAAA,GAAaA,UAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAbA,QAAaA,CAAbA;AACAA,EAAAA,UAAAA,GAAaA,UAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAbA,UAAaA,CAAbA;AAEA,SAAA,UAAA;AACH","sourcesContent":["const GAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport default function generateFragBlurSource(kernelSize)\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value]);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize);\n\n    return fragSource;\n}\n"]},"metadata":{},"sourceType":"script"}