{"ast":null,"code":"/**\n * @class\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.\n * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations\n * @return {WebGLProgram} the shader program\n */\nvar compileProgram = function (gl, vertexSrc, fragmentSrc, attributeLocations) {\n  var glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);\n  var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);\n  var program = gl.createProgram();\n  gl.attachShader(program, glVertShader);\n  gl.attachShader(program, glFragShader); // optionally, set the attributes manually for the program rather than letting WebGL decide..\n\n  if (attributeLocations) {\n    for (var i in attributeLocations) {\n      gl.bindAttribLocation(program, attributeLocations[i], i);\n    }\n  }\n\n  gl.linkProgram(program); // if linking fails, then log and cleanup\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.error('Pixi.js Error: Could not initialize shader.');\n    console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n    console.error('gl.getError()', gl.getError()); // if there is a program info log, log it\n\n    if (gl.getProgramInfoLog(program) !== '') {\n      console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n    }\n\n    gl.deleteProgram(program);\n    program = null;\n  } // clean up some shaders\n\n\n  gl.deleteShader(glVertShader);\n  gl.deleteShader(glFragShader);\n  return program;\n};\n/**\n * @private\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @return {WebGLShader} the shader\n */\n\n\nvar compileShader = function (gl, type, src) {\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, src);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.log(gl.getShaderInfoLog(shader));\n    return null;\n  }\n\n  return shader;\n};\n\nmodule.exports = compileProgram;","map":{"version":3,"sources":["/Users/mohamedelhedihaddar/weather-app/node_modules/pixi-gl-core/src/shader/compileProgram.js"],"names":["compileProgram","gl","vertexSrc","fragmentSrc","attributeLocations","glVertShader","compileShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","program","createProgram","attachShader","i","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","console","error","VALIDATE_STATUS","getError","getProgramInfoLog","warn","deleteProgram","deleteShader","type","src","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,cAAc,GAAG,UAASC,EAAT,EAAaC,SAAb,EAAwBC,WAAxB,EAAqCC,kBAArC,EACrB;AACI,MAAIC,YAAY,GAAGC,aAAa,CAACL,EAAD,EAAKA,EAAE,CAACM,aAAR,EAAuBL,SAAvB,CAAhC;AACA,MAAIM,YAAY,GAAGF,aAAa,CAACL,EAAD,EAAKA,EAAE,CAACQ,eAAR,EAAyBN,WAAzB,CAAhC;AAEA,MAAIO,OAAO,GAAGT,EAAE,CAACU,aAAH,EAAd;AAEAV,EAAAA,EAAE,CAACW,YAAH,CAAgBF,OAAhB,EAAyBL,YAAzB;AACAJ,EAAAA,EAAE,CAACW,YAAH,CAAgBF,OAAhB,EAAyBF,YAAzB,EAPJ,CASI;;AACA,MAAGJ,kBAAH,EACA;AACI,SAAI,IAAIS,CAAR,IAAaT,kBAAb,EACA;AACIH,MAAAA,EAAE,CAACa,kBAAH,CAAsBJ,OAAtB,EAA+BN,kBAAkB,CAACS,CAAD,CAAjD,EAAsDA,CAAtD;AACH;AACJ;;AAGDZ,EAAAA,EAAE,CAACc,WAAH,CAAeL,OAAf,EAnBJ,CAqBI;;AACA,MAAI,CAACT,EAAE,CAACe,mBAAH,CAAuBN,OAAvB,EAAgCT,EAAE,CAACgB,WAAnC,CAAL,EACA;AACIC,IAAAA,OAAO,CAACC,KAAR,CAAc,6CAAd;AACAD,IAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoClB,EAAE,CAACe,mBAAH,CAAuBN,OAAvB,EAAgCT,EAAE,CAACmB,eAAnC,CAApC;AACAF,IAAAA,OAAO,CAACC,KAAR,CAAc,eAAd,EAA+BlB,EAAE,CAACoB,QAAH,EAA/B,EAHJ,CAKI;;AACA,QAAIpB,EAAE,CAACqB,iBAAH,CAAqBZ,OAArB,MAAkC,EAAtC,EACA;AACIQ,MAAAA,OAAO,CAACK,IAAR,CAAa,yCAAb,EAAwDtB,EAAE,CAACqB,iBAAH,CAAqBZ,OAArB,CAAxD;AACH;;AAEDT,IAAAA,EAAE,CAACuB,aAAH,CAAiBd,OAAjB;AACAA,IAAAA,OAAO,GAAG,IAAV;AACH,GApCL,CAsCI;;;AACAT,EAAAA,EAAE,CAACwB,YAAH,CAAgBpB,YAAhB;AACAJ,EAAAA,EAAE,CAACwB,YAAH,CAAgBjB,YAAhB;AAEA,SAAOE,OAAP;AACH,CA5CD;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIJ,aAAa,GAAG,UAAUL,EAAV,EAAcyB,IAAd,EAAoBC,GAApB,EACpB;AACI,MAAIC,MAAM,GAAG3B,EAAE,CAAC4B,YAAH,CAAgBH,IAAhB,CAAb;AAEAzB,EAAAA,EAAE,CAAC6B,YAAH,CAAgBF,MAAhB,EAAwBD,GAAxB;AACA1B,EAAAA,EAAE,CAACK,aAAH,CAAiBsB,MAAjB;;AAEA,MAAI,CAAC3B,EAAE,CAAC8B,kBAAH,CAAsBH,MAAtB,EAA8B3B,EAAE,CAAC+B,cAAjC,CAAL,EACA;AACId,IAAAA,OAAO,CAACe,GAAR,CAAYhC,EAAE,CAACiC,gBAAH,CAAoBN,MAApB,CAAZ;AACA,WAAO,IAAP;AACH;;AAED,SAAOA,MAAP;AACH,CAdD;;AAgBAO,MAAM,CAACC,OAAP,GAAiBpC,cAAjB","sourcesContent":["\n/**\n * @class\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.\n * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations\n * @return {WebGLProgram} the shader program\n */\nvar compileProgram = function(gl, vertexSrc, fragmentSrc, attributeLocations)\n{\n    var glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);\n    var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);\n\n    var program = gl.createProgram();\n\n    gl.attachShader(program, glVertShader);\n    gl.attachShader(program, glFragShader);\n\n    // optionally, set the attributes manually for the program rather than letting WebGL decide..\n    if(attributeLocations)\n    {\n        for(var i in attributeLocations)\n        {\n            gl.bindAttribLocation(program, attributeLocations[i], i);\n        }\n    }\n\n\n    gl.linkProgram(program);\n\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        console.error('Pixi.js Error: Could not initialize shader.');\n        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n        console.error('gl.getError()', gl.getError());\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n\n        gl.deleteProgram(program);\n        program = null;\n    }\n\n    // clean up some shaders\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    return program;\n};\n\n/**\n * @private\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @return {WebGLShader} the shader\n */\nvar compileShader = function (gl, type, src)\n{\n    var shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    {\n        console.log(gl.getShaderInfoLog(shader));\n        return null;\n    }\n\n    return shader;\n};\n\nmodule.exports = compileProgram;\n"]},"metadata":{},"sourceType":"script"}