{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../../utils');\n\nvar _const = require('../../const');\n\nvar _ObjectRenderer2 = require('../../renderers/webgl/utils/ObjectRenderer');\n\nvar _ObjectRenderer3 = _interopRequireDefault(_ObjectRenderer2);\n\nvar _WebGLRenderer = require('../../renderers/webgl/WebGLRenderer');\n\nvar _WebGLRenderer2 = _interopRequireDefault(_WebGLRenderer);\n\nvar _WebGLGraphicsData = require('./WebGLGraphicsData');\n\nvar _WebGLGraphicsData2 = _interopRequireDefault(_WebGLGraphicsData);\n\nvar _PrimitiveShader = require('./shaders/PrimitiveShader');\n\nvar _PrimitiveShader2 = _interopRequireDefault(_PrimitiveShader);\n\nvar _buildPoly = require('./utils/buildPoly');\n\nvar _buildPoly2 = _interopRequireDefault(_buildPoly);\n\nvar _buildRectangle = require('./utils/buildRectangle');\n\nvar _buildRectangle2 = _interopRequireDefault(_buildRectangle);\n\nvar _buildRoundedRectangle = require('./utils/buildRoundedRectangle');\n\nvar _buildRoundedRectangle2 = _interopRequireDefault(_buildRoundedRectangle);\n\nvar _buildCircle = require('./utils/buildCircle');\n\nvar _buildCircle2 = _interopRequireDefault(_buildCircle);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Renders the graphics object.\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\n\n\nvar GraphicsRenderer = function (_ObjectRenderer) {\n  _inherits(GraphicsRenderer, _ObjectRenderer);\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - The renderer this object renderer works for.\n   */\n\n\n  function GraphicsRenderer(renderer) {\n    _classCallCheck(this, GraphicsRenderer);\n\n    var _this = _possibleConstructorReturn(this, _ObjectRenderer.call(this, renderer));\n\n    _this.graphicsDataPool = [];\n    _this.primitiveShader = null;\n    _this.gl = renderer.gl; // easy access!\n\n    _this.CONTEXT_UID = 0;\n    return _this;\n  }\n  /**\n   * Called when there is a WebGL context change\n   *\n   * @private\n   *\n   */\n\n\n  GraphicsRenderer.prototype.onContextChange = function onContextChange() {\n    this.gl = this.renderer.gl;\n    this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    this.primitiveShader = new _PrimitiveShader2.default(this.gl);\n  };\n  /**\n   * Destroys this renderer.\n   *\n   */\n\n\n  GraphicsRenderer.prototype.destroy = function destroy() {\n    _ObjectRenderer3.default.prototype.destroy.call(this);\n\n    for (var i = 0; i < this.graphicsDataPool.length; ++i) {\n      this.graphicsDataPool[i].destroy();\n    }\n\n    this.graphicsDataPool = null;\n  };\n  /**\n   * Renders a graphics object.\n   *\n   * @param {PIXI.Graphics} graphics - The graphics object to render.\n   */\n\n\n  GraphicsRenderer.prototype.render = function render(graphics) {\n    var renderer = this.renderer;\n    var gl = renderer.gl;\n    var webGLData = void 0;\n    var webGL = graphics._webGL[this.CONTEXT_UID];\n\n    if (!webGL || graphics.dirty !== webGL.dirty) {\n      this.updateGraphics(graphics);\n      webGL = graphics._webGL[this.CONTEXT_UID];\n    } // This  could be speeded up for sure!\n\n\n    var shader = this.primitiveShader;\n    renderer.bindShader(shader);\n    renderer.state.setBlendMode(graphics.blendMode);\n\n    for (var i = 0, n = webGL.data.length; i < n; i++) {\n      webGLData = webGL.data[i];\n      var shaderTemp = webGLData.shader;\n      renderer.bindShader(shaderTemp);\n      shaderTemp.uniforms.translationMatrix = graphics.transform.worldTransform.toArray(true);\n      shaderTemp.uniforms.tint = (0, _utils.hex2rgb)(graphics.tint);\n      shaderTemp.uniforms.alpha = graphics.worldAlpha;\n      renderer.bindVao(webGLData.vao);\n\n      if (webGLData.nativeLines) {\n        gl.drawArrays(gl.LINES, 0, webGLData.points.length / 6);\n      } else {\n        webGLData.vao.draw(gl.TRIANGLE_STRIP, webGLData.indices.length);\n      }\n    }\n  };\n  /**\n   * Updates the graphics object\n   *\n   * @private\n   * @param {PIXI.Graphics} graphics - The graphics object to update\n   */\n\n\n  GraphicsRenderer.prototype.updateGraphics = function updateGraphics(graphics) {\n    var gl = this.renderer.gl; // get the contexts graphics object\n\n    var webGL = graphics._webGL[this.CONTEXT_UID]; // if the graphics object does not exist in the webGL context time to create it!\n\n    if (!webGL) {\n      webGL = graphics._webGL[this.CONTEXT_UID] = {\n        lastIndex: 0,\n        data: [],\n        gl: gl,\n        clearDirty: -1,\n        dirty: -1\n      };\n    } // flag the graphics as not dirty as we are about to update it...\n\n\n    webGL.dirty = graphics.dirty; // if the user cleared the graphics object we will need to clear every object\n\n    if (graphics.clearDirty !== webGL.clearDirty) {\n      webGL.clearDirty = graphics.clearDirty; // loop through and return all the webGLDatas to the object pool so than can be reused later on\n\n      for (var i = 0; i < webGL.data.length; i++) {\n        this.graphicsDataPool.push(webGL.data[i]);\n      } // clear the array and reset the index..\n\n\n      webGL.data.length = 0;\n      webGL.lastIndex = 0;\n    }\n\n    var webGLData = void 0;\n    var webGLDataNativeLines = void 0; // loop through the graphics datas and construct each one..\n    // if the object is a complex fill then the new stencil buffer technique will be used\n    // other wise graphics objects will be pushed into a batch..\n\n    for (var _i = webGL.lastIndex; _i < graphics.graphicsData.length; _i++) {\n      var data = graphics.graphicsData[_i]; // TODO - this can be simplified\n\n      webGLData = this.getWebGLData(webGL, 0);\n\n      if (data.nativeLines && data.lineWidth) {\n        webGLDataNativeLines = this.getWebGLData(webGL, 0, true);\n        webGL.lastIndex++;\n      }\n\n      if (data.type === _const.SHAPES.POLY) {\n        (0, _buildPoly2.default)(data, webGLData, webGLDataNativeLines);\n      }\n\n      if (data.type === _const.SHAPES.RECT) {\n        (0, _buildRectangle2.default)(data, webGLData, webGLDataNativeLines);\n      } else if (data.type === _const.SHAPES.CIRC || data.type === _const.SHAPES.ELIP) {\n        (0, _buildCircle2.default)(data, webGLData, webGLDataNativeLines);\n      } else if (data.type === _const.SHAPES.RREC) {\n        (0, _buildRoundedRectangle2.default)(data, webGLData, webGLDataNativeLines);\n      }\n\n      webGL.lastIndex++;\n    }\n\n    this.renderer.bindVao(null); // upload all the dirty data...\n\n    for (var _i2 = 0; _i2 < webGL.data.length; _i2++) {\n      webGLData = webGL.data[_i2];\n\n      if (webGLData.dirty) {\n        webGLData.upload();\n      }\n    }\n  };\n  /**\n   *\n   * @private\n   * @param {WebGLRenderingContext} gl - the current WebGL drawing context\n   * @param {number} type - TODO @Alvin\n   * @param {number} nativeLines - indicate whether the webGLData use for nativeLines.\n   * @return {*} TODO\n   */\n\n\n  GraphicsRenderer.prototype.getWebGLData = function getWebGLData(gl, type, nativeLines) {\n    var webGLData = gl.data[gl.data.length - 1];\n\n    if (!webGLData || webGLData.nativeLines !== nativeLines || webGLData.points.length > 320000) {\n      webGLData = this.graphicsDataPool.pop() || new _WebGLGraphicsData2.default(this.renderer.gl, this.primitiveShader, this.renderer.state.attribsState);\n      webGLData.nativeLines = nativeLines;\n      webGLData.reset(type);\n      gl.data.push(webGLData);\n    }\n\n    webGLData.dirty = true;\n    return webGLData;\n  };\n\n  return GraphicsRenderer;\n}(_ObjectRenderer3.default);\n\nexports.default = GraphicsRenderer;\n\n_WebGLRenderer2.default.registerPlugin('graphics', GraphicsRenderer);","map":{"version":3,"sources":["../../../../src/core/graphics/webgl/GraphicsRenderer.js"],"names":["GraphicsRenderer","renderer","onContextChange","destroy","i","render","graphics","gl","webGLData","webGL","shader","n","shaderTemp","updateGraphics","lastIndex","data","clearDirty","dirty","webGLDataNativeLines","getWebGLData","type","nativeLines"],"mappings":"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","sourcesContent":["import { hex2rgb } from '../../utils';\nimport { SHAPES } from '../../const';\nimport ObjectRenderer from '../../renderers/webgl/utils/ObjectRenderer';\nimport WebGLRenderer from '../../renderers/webgl/WebGLRenderer';\nimport WebGLGraphicsData from './WebGLGraphicsData';\nimport PrimitiveShader from './shaders/PrimitiveShader';\n\nimport buildPoly from './utils/buildPoly';\nimport buildRectangle from './utils/buildRectangle';\nimport buildRoundedRectangle from './utils/buildRoundedRectangle';\nimport buildCircle from './utils/buildCircle';\n\n/**\n * Renders the graphics object.\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport default class GraphicsRenderer extends ObjectRenderer\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this object renderer works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.graphicsDataPool = [];\n\n        this.primitiveShader = null;\n\n        this.gl = renderer.gl;\n\n        // easy access!\n        this.CONTEXT_UID = 0;\n    }\n\n    /**\n     * Called when there is a WebGL context change\n     *\n     * @private\n     *\n     */\n    onContextChange()\n    {\n        this.gl = this.renderer.gl;\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.primitiveShader = new PrimitiveShader(this.gl);\n    }\n\n    /**\n     * Destroys this renderer.\n     *\n     */\n    destroy()\n    {\n        ObjectRenderer.prototype.destroy.call(this);\n\n        for (let i = 0; i < this.graphicsDataPool.length; ++i)\n        {\n            this.graphicsDataPool[i].destroy();\n        }\n\n        this.graphicsDataPool = null;\n    }\n\n    /**\n     * Renders a graphics object.\n     *\n     * @param {PIXI.Graphics} graphics - The graphics object to render.\n     */\n    render(graphics)\n    {\n        const renderer = this.renderer;\n        const gl = renderer.gl;\n\n        let webGLData;\n        let webGL = graphics._webGL[this.CONTEXT_UID];\n\n        if (!webGL || graphics.dirty !== webGL.dirty)\n        {\n            this.updateGraphics(graphics);\n\n            webGL = graphics._webGL[this.CONTEXT_UID];\n        }\n\n        // This  could be speeded up for sure!\n        const shader = this.primitiveShader;\n\n        renderer.bindShader(shader);\n        renderer.state.setBlendMode(graphics.blendMode);\n\n        for (let i = 0, n = webGL.data.length; i < n; i++)\n        {\n            webGLData = webGL.data[i];\n            const shaderTemp = webGLData.shader;\n\n            renderer.bindShader(shaderTemp);\n            shaderTemp.uniforms.translationMatrix = graphics.transform.worldTransform.toArray(true);\n            shaderTemp.uniforms.tint = hex2rgb(graphics.tint);\n            shaderTemp.uniforms.alpha = graphics.worldAlpha;\n\n            renderer.bindVao(webGLData.vao);\n\n            if (webGLData.nativeLines)\n            {\n                gl.drawArrays(gl.LINES, 0, webGLData.points.length / 6);\n            }\n            else\n            {\n                webGLData.vao.draw(gl.TRIANGLE_STRIP, webGLData.indices.length);\n            }\n        }\n    }\n\n    /**\n     * Updates the graphics object\n     *\n     * @private\n     * @param {PIXI.Graphics} graphics - The graphics object to update\n     */\n    updateGraphics(graphics)\n    {\n        const gl = this.renderer.gl;\n\n         // get the contexts graphics object\n        let webGL = graphics._webGL[this.CONTEXT_UID];\n\n        // if the graphics object does not exist in the webGL context time to create it!\n        if (!webGL)\n        {\n            webGL = graphics._webGL[this.CONTEXT_UID] = { lastIndex: 0, data: [], gl, clearDirty: -1, dirty: -1 };\n        }\n\n        // flag the graphics as not dirty as we are about to update it...\n        webGL.dirty = graphics.dirty;\n\n        // if the user cleared the graphics object we will need to clear every object\n        if (graphics.clearDirty !== webGL.clearDirty)\n        {\n            webGL.clearDirty = graphics.clearDirty;\n\n            // loop through and return all the webGLDatas to the object pool so than can be reused later on\n            for (let i = 0; i < webGL.data.length; i++)\n            {\n                this.graphicsDataPool.push(webGL.data[i]);\n            }\n\n            // clear the array and reset the index..\n            webGL.data.length = 0;\n            webGL.lastIndex = 0;\n        }\n\n        let webGLData;\n        let webGLDataNativeLines;\n\n        // loop through the graphics datas and construct each one..\n        // if the object is a complex fill then the new stencil buffer technique will be used\n        // other wise graphics objects will be pushed into a batch..\n        for (let i = webGL.lastIndex; i < graphics.graphicsData.length; i++)\n        {\n            const data = graphics.graphicsData[i];\n\n            // TODO - this can be simplified\n            webGLData = this.getWebGLData(webGL, 0);\n\n            if (data.nativeLines && data.lineWidth)\n            {\n                webGLDataNativeLines = this.getWebGLData(webGL, 0, true);\n                webGL.lastIndex++;\n            }\n\n            if (data.type === SHAPES.POLY)\n            {\n                buildPoly(data, webGLData, webGLDataNativeLines);\n            }\n            if (data.type === SHAPES.RECT)\n            {\n                buildRectangle(data, webGLData, webGLDataNativeLines);\n            }\n            else if (data.type === SHAPES.CIRC || data.type === SHAPES.ELIP)\n            {\n                buildCircle(data, webGLData, webGLDataNativeLines);\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                buildRoundedRectangle(data, webGLData, webGLDataNativeLines);\n            }\n\n            webGL.lastIndex++;\n        }\n\n        this.renderer.bindVao(null);\n\n        // upload all the dirty data...\n        for (let i = 0; i < webGL.data.length; i++)\n        {\n            webGLData = webGL.data[i];\n\n            if (webGLData.dirty)\n            {\n                webGLData.upload();\n            }\n        }\n    }\n\n    /**\n     *\n     * @private\n     * @param {WebGLRenderingContext} gl - the current WebGL drawing context\n     * @param {number} type - TODO @Alvin\n     * @param {number} nativeLines - indicate whether the webGLData use for nativeLines.\n     * @return {*} TODO\n     */\n    getWebGLData(gl, type, nativeLines)\n    {\n        let webGLData = gl.data[gl.data.length - 1];\n\n        if (!webGLData || webGLData.nativeLines !== nativeLines || webGLData.points.length > 320000)\n        {\n            webGLData = this.graphicsDataPool.pop()\n                || new WebGLGraphicsData(this.renderer.gl, this.primitiveShader, this.renderer.state.attribsState);\n            webGLData.nativeLines = nativeLines;\n            webGLData.reset(type);\n            gl.data.push(webGLData);\n        }\n\n        webGLData.dirty = true;\n\n        return webGLData;\n    }\n}\n\nWebGLRenderer.registerPlugin('graphics', GraphicsRenderer);\n"]},"metadata":{},"sourceType":"script"}