{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\n\nvar _createIndicesForQuads = require('../../core/utils/createIndicesForQuads');\n\nvar _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\n\n\nvar ParticleBuffer = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The rendering context.\n   * @param {object} properties - The properties to upload.\n   * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n   * @param {number} size - The size of the batch.\n   */\n  function ParticleBuffer(gl, properties, dynamicPropertyFlags, size) {\n    _classCallCheck(this, ParticleBuffer);\n    /**\n     * The current WebGL drawing context.\n     *\n     * @member {WebGLRenderingContext}\n     */\n\n\n    this.gl = gl;\n    /**\n     * The number of particles the buffer can hold\n     *\n     * @member {number}\n     */\n\n    this.size = size;\n    /**\n     * A list of the properties that are dynamic.\n     *\n     * @member {object[]}\n     */\n\n    this.dynamicProperties = [];\n    /**\n     * A list of the properties that are static.\n     *\n     * @member {object[]}\n     */\n\n    this.staticProperties = [];\n\n    for (var i = 0; i < properties.length; ++i) {\n      var property = properties[i]; // Make copy of properties object so that when we edit the offset it doesn't\n      // change all other instances of the object literal\n\n      property = {\n        attribute: property.attribute,\n        size: property.size,\n        uploadFunction: property.uploadFunction,\n        unsignedByte: property.unsignedByte,\n        offset: property.offset\n      };\n\n      if (dynamicPropertyFlags[i]) {\n        this.dynamicProperties.push(property);\n      } else {\n        this.staticProperties.push(property);\n      }\n    }\n\n    this.staticStride = 0;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this._updateID = 0;\n    this.initBuffers();\n  }\n  /**\n   * Sets up the renderer context and necessary buffers.\n   *\n   * @private\n   */\n\n\n  ParticleBuffer.prototype.initBuffers = function initBuffers() {\n    var gl = this.gl;\n    var dynamicOffset = 0;\n    /**\n     * Holds the indices of the geometry (quads) to draw\n     *\n     * @member {Uint16Array}\n     */\n\n    this.indices = (0, _createIndicesForQuads2.default)(this.size);\n    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n    this.dynamicStride = 0;\n\n    for (var i = 0; i < this.dynamicProperties.length; ++i) {\n      var property = this.dynamicProperties[i];\n      property.offset = dynamicOffset;\n      dynamicOffset += property.size;\n      this.dynamicStride += property.size;\n    }\n\n    var dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n    this.dynamicData = new Float32Array(dynBuffer);\n    this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n    this.dynamicBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, dynBuffer, gl.STREAM_DRAW); // static //\n\n    var staticOffset = 0;\n    this.staticStride = 0;\n\n    for (var _i = 0; _i < this.staticProperties.length; ++_i) {\n      var _property = this.staticProperties[_i];\n      _property.offset = staticOffset;\n      staticOffset += _property.size;\n      this.staticStride += _property.size;\n    }\n\n    var statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n    this.staticData = new Float32Array(statBuffer);\n    this.staticDataUint32 = new Uint32Array(statBuffer);\n    this.staticBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, statBuffer, gl.STATIC_DRAW);\n    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl).addIndex(this.indexBuffer);\n\n    for (var _i2 = 0; _i2 < this.dynamicProperties.length; ++_i2) {\n      var _property2 = this.dynamicProperties[_i2];\n\n      if (_property2.unsignedByte) {\n        this.vao.addAttribute(this.dynamicBuffer, _property2.attribute, gl.UNSIGNED_BYTE, true, this.dynamicStride * 4, _property2.offset * 4);\n      } else {\n        this.vao.addAttribute(this.dynamicBuffer, _property2.attribute, gl.FLOAT, false, this.dynamicStride * 4, _property2.offset * 4);\n      }\n    }\n\n    for (var _i3 = 0; _i3 < this.staticProperties.length; ++_i3) {\n      var _property3 = this.staticProperties[_i3];\n\n      if (_property3.unsignedByte) {\n        this.vao.addAttribute(this.staticBuffer, _property3.attribute, gl.UNSIGNED_BYTE, true, this.staticStride * 4, _property3.offset * 4);\n      } else {\n        this.vao.addAttribute(this.staticBuffer, _property3.attribute, gl.FLOAT, false, this.staticStride * 4, _property3.offset * 4);\n      }\n    }\n  };\n  /**\n   * Uploads the dynamic properties.\n   *\n   * @param {PIXI.DisplayObject[]} children - The children to upload.\n   * @param {number} startIndex - The index to start at.\n   * @param {number} amount - The number to upload.\n   */\n\n\n  ParticleBuffer.prototype.uploadDynamic = function uploadDynamic(children, startIndex, amount) {\n    for (var i = 0; i < this.dynamicProperties.length; i++) {\n      var property = this.dynamicProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.unsignedByte ? this.dynamicDataUint32 : this.dynamicData, this.dynamicStride, property.offset);\n    }\n\n    this.dynamicBuffer.upload();\n  };\n  /**\n   * Uploads the static properties.\n   *\n   * @param {PIXI.DisplayObject[]} children - The children to upload.\n   * @param {number} startIndex - The index to start at.\n   * @param {number} amount - The number to upload.\n   */\n\n\n  ParticleBuffer.prototype.uploadStatic = function uploadStatic(children, startIndex, amount) {\n    for (var i = 0; i < this.staticProperties.length; i++) {\n      var property = this.staticProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.unsignedByte ? this.staticDataUint32 : this.staticData, this.staticStride, property.offset);\n    }\n\n    this.staticBuffer.upload();\n  };\n  /**\n   * Destroys the ParticleBuffer.\n   *\n   */\n\n\n  ParticleBuffer.prototype.destroy = function destroy() {\n    this.dynamicProperties = null;\n    this.dynamicBuffer.destroy();\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this.staticProperties = null;\n    this.staticBuffer.destroy();\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n  };\n\n  return ParticleBuffer;\n}();\n\nexports.default = ParticleBuffer;","map":{"version":3,"sources":["../../../src/particles/webgl/ParticleBuffer.js"],"names":["ParticleBuffer","i","properties","property","attribute","size","uploadFunction","unsignedByte","offset","dynamicPropertyFlags","initBuffers","gl","dynamicOffset","dynBuffer","staticOffset","statBuffer","uploadDynamic","children","startIndex","amount","uploadStatic","destroy"],"mappings":"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","sourcesContent":["import glCore from 'pixi-gl-core';\nimport createIndicesForQuads from '../../core/utils/createIndicesForQuads';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class ParticleBuffer\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The rendering context.\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(gl, properties, dynamicPropertyFlags, size)\n    {\n        /**\n         * The current WebGL drawing context.\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @member {number}\n         */\n        this.size = size;\n\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n\n        /**\n         * A list of the properties that are static.\n         *\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attribute: property.attribute,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                unsignedByte: property.unsignedByte,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    initBuffers()\n    {\n        const gl = this.gl;\n        let dynamicOffset = 0;\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(this.size);\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = glCore.GLBuffer.createVertexBuffer(gl, dynBuffer, gl.STREAM_DRAW);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = glCore.GLBuffer.createVertexBuffer(gl, statBuffer, gl.STATIC_DRAW);\n\n        this.vao = new glCore.VertexArrayObject(gl)\n        .addIndex(this.indexBuffer);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            if (property.unsignedByte)\n            {\n                this.vao.addAttribute(\n                    this.dynamicBuffer,\n                    property.attribute,\n                    gl.UNSIGNED_BYTE,\n                    true,\n                    this.dynamicStride * 4,\n                    property.offset * 4\n                );\n            }\n            else\n            {\n                this.vao.addAttribute(\n                    this.dynamicBuffer,\n                    property.attribute,\n                    gl.FLOAT,\n                    false,\n                    this.dynamicStride * 4,\n                    property.offset * 4\n                );\n            }\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            if (property.unsignedByte)\n            {\n                this.vao.addAttribute(\n                    this.staticBuffer,\n                    property.attribute,\n                    gl.UNSIGNED_BYTE,\n                    true,\n                    this.staticStride * 4,\n                    property.offset * 4\n                );\n            }\n            else\n            {\n                this.vao.addAttribute(\n                    this.staticBuffer,\n                    property.attribute,\n                    gl.FLOAT,\n                    false,\n                    this.staticStride * 4,\n                    property.offset * 4\n                );\n            }\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadDynamic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.unsignedByte ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer.upload();\n    }\n\n    /**\n     * Uploads the static properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadStatic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.unsignedByte ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer.upload();\n    }\n\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     */\n    destroy()\n    {\n        this.dynamicProperties = null;\n        this.dynamicBuffer.destroy();\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer.destroy();\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n    }\n\n}\n"]},"metadata":{},"sourceType":"script"}