{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = extractUniformsFromSrc;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultValue = _pixiGlCore2.default.shader.defaultValue;\n\nfunction extractUniformsFromSrc(vertexSrc, fragmentSrc, mask) {\n  var vertUniforms = extractUniformsFromString(vertexSrc, mask);\n  var fragUniforms = extractUniformsFromString(fragmentSrc, mask);\n  return Object.assign(vertUniforms, fragUniforms);\n}\n\nfunction extractUniformsFromString(string) {\n  var maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea|filterClamp)$');\n  var uniforms = {};\n  var nameSplit = void 0; // clean the lines a little - remove extra spaces / tabs etc\n  // then split along ';'\n\n  var lines = string.replace(/\\s+/g, ' ').split(/\\s*;\\s*/); // loop through..\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trim();\n\n    if (line.indexOf('uniform') > -1) {\n      var splitLine = line.split(' ');\n      var type = splitLine[1];\n      var name = splitLine[2];\n      var size = 1;\n\n      if (name.indexOf('[') > -1) {\n        // array!\n        nameSplit = name.split(/\\[|]/);\n        name = nameSplit[0];\n        size *= Number(nameSplit[1]);\n      }\n\n      if (!name.match(maskRegex)) {\n        uniforms[name] = {\n          value: defaultValue(type, size),\n          name: name,\n          type: type\n        };\n      }\n    }\n  }\n\n  return uniforms;\n}","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/filters/extractUniformsFromSrc.js"],"names":["defaultValue","extractUniformsFromSrc","vertUniforms","extractUniformsFromString","fragUniforms","Object","maskRegex","uniforms","nameSplit","lines","string","i","line","splitLine","type","name","size","Number","value"],"mappings":";;;kBAIwBC,sB;;AAJxB,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;AAEA,IAAMD,YAAAA,GAAe,YAAA,CAAA,OAAA,CAAA,MAAA,CAArB,YAAA;;AAEe,SAAA,sBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,IAAA,EACf;AACI,MAAME,YAAAA,GAAeC,yBAAAA,CAAAA,SAAAA,EAArB,IAAqBA,CAArB;AACA,MAAMC,YAAAA,GAAeD,yBAAAA,CAAAA,WAAAA,EAArB,IAAqBA,CAArB;AAEA,SAAOE,MAAAA,CAAAA,MAAAA,CAAAA,YAAAA,EAAP,YAAOA,CAAP;AACH;;AAED,SAAA,yBAAA,CAAA,MAAA,EACA;AACI,MAAMC,SAAAA,GAAY,IAAA,MAAA,CAAlB,sDAAkB,CAAlB;AAEA,MAAMC,QAAAA,GAAN,EAAA;AACA,MAAIC,SAAAA,GAAAA,KAAJ,CAAA,CAJJ,CAMI;AACA;;AACA,MAAMC,KAAAA,GAAQC,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAd,SAAcA,CAAd,CARJ,CAWI;;AACA,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIF,KAAAA,CAApB,MAAA,EAAkCE,CAAlC,EAAA,EACA;AACI,QAAMC,IAAAA,GAAOH,KAAAA,CAAAA,CAAAA,CAAAA,CAAb,IAAaA,EAAb;;AAEA,QAAIG,IAAAA,CAAAA,OAAAA,CAAAA,SAAAA,IAA0B,CAA9B,CAAA,EACA;AACI,UAAMC,SAAAA,GAAYD,IAAAA,CAAAA,KAAAA,CAAlB,GAAkBA,CAAlB;AACA,UAAME,IAAAA,GAAOD,SAAAA,CAAb,CAAaA,CAAb;AAEA,UAAIE,IAAAA,GAAOF,SAAAA,CAAX,CAAWA,CAAX;AACA,UAAIG,IAAAA,GAAJ,CAAA;;AAEA,UAAID,IAAAA,CAAAA,OAAAA,CAAAA,GAAAA,IAAoB,CAAxB,CAAA,EACA;AACI;AACAP,QAAAA,SAAAA,GAAYO,IAAAA,CAAAA,KAAAA,CAAZP,MAAYO,CAAZP;AACAO,QAAAA,IAAAA,GAAOP,SAAAA,CAAPO,CAAOP,CAAPO;AACAC,QAAAA,IAAAA,IAAQC,MAAAA,CAAOT,SAAAA,CAAfQ,CAAeR,CAAPS,CAARD;AACH;;AAED,UAAI,CAACD,IAAAA,CAAAA,KAAAA,CAAL,SAAKA,CAAL,EACA;AACIR,QAAAA,QAAAA,CAAAA,IAAAA,CAAAA,GAAiB;AACbW,UAAAA,KAAAA,EAAOlB,YAAAA,CAAAA,IAAAA,EADM,IACNA,CADM;AAEbe,UAAAA,IAAAA,EAFa,IAAA;AAGbD,UAAAA,IAAAA,EAAAA;AAHa,SAAjBP;AAKH;AACJ;AACJ;;AAED,SAAA,QAAA;AACH","sourcesContent":["import glCore from 'pixi-gl-core';\n\nconst defaultValue = glCore.shader.defaultValue;\n\nexport default function extractUniformsFromSrc(vertexSrc, fragmentSrc, mask)\n{\n    const vertUniforms = extractUniformsFromString(vertexSrc, mask);\n    const fragUniforms = extractUniformsFromString(fragmentSrc, mask);\n\n    return Object.assign(vertUniforms, fragUniforms);\n}\n\nfunction extractUniformsFromString(string)\n{\n    const maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea|filterClamp)$');\n\n    const uniforms = {};\n    let nameSplit;\n\n    // clean the lines a little - remove extra spaces / tabs etc\n    // then split along ';'\n    const lines = string.replace(/\\s+/g, ' ')\n                .split(/\\s*;\\s*/);\n\n    // loop through..\n    for (let i = 0; i < lines.length; i++)\n    {\n        const line = lines[i].trim();\n\n        if (line.indexOf('uniform') > -1)\n        {\n            const splitLine = line.split(' ');\n            const type = splitLine[1];\n\n            let name = splitLine[2];\n            let size = 1;\n\n            if (name.indexOf('[') > -1)\n            {\n                // array!\n                nameSplit = name.split(/\\[|]/);\n                name = nameSplit[0];\n                size *= Number(nameSplit[1]);\n            }\n\n            if (!name.match(maskRegex))\n            {\n                uniforms[name] = {\n                    value: defaultValue(type, size),\n                    name,\n                    type,\n                };\n            }\n        }\n    }\n\n    return uniforms;\n}\n"]},"metadata":{},"sourceType":"script"}