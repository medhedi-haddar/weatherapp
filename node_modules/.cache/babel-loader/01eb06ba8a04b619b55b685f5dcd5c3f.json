{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n/**\n * Mixins functionality to make an object have \"plugins\".\n *\n * @example\n *      function MyObject() {}\n *\n *      pluginTarget.mixin(MyObject);\n *\n * @mixin\n * @memberof PIXI.utils\n * @param {object} obj - The object to mix into.\n */\n\nfunction pluginTarget(obj) {\n  obj.__plugins = {};\n  /**\n   * Adds a plugin to an object\n   *\n   * @param {string} pluginName - The events that should be listed.\n   * @param {Function} ctor - The constructor function for the plugin.\n   */\n\n  obj.registerPlugin = function registerPlugin(pluginName, ctor) {\n    obj.__plugins[pluginName] = ctor;\n  };\n  /**\n   * Instantiates all the plugins of this object\n   *\n   */\n\n\n  obj.prototype.initPlugins = function initPlugins() {\n    this.plugins = this.plugins || {};\n\n    for (var o in obj.__plugins) {\n      this.plugins[o] = new obj.__plugins[o](this);\n    }\n  };\n  /**\n   * Removes all the plugins of this object\n   *\n   */\n\n\n  obj.prototype.destroyPlugins = function destroyPlugins() {\n    for (var o in this.plugins) {\n      this.plugins[o].destroy();\n      this.plugins[o] = null;\n    }\n\n    this.plugins = null;\n  };\n}\n\nexports.default = {\n  /**\n   * Mixes in the properties of the pluginTarget into another object\n   *\n   * @param {object} obj - The obj to mix into\n   */\n  mixin: function mixin(obj) {\n    pluginTarget(obj);\n  }\n};","map":{"version":3,"sources":["../../../src/core/utils/pluginTarget.js"],"names":["obj","mixin","pluginTarget"],"mappings":";;;AAAA;;;;;;;;;;;;;AAYA,SAAA,YAAA,CAAA,GAAA,EACA;AACIA,EAAAA,GAAAA,CAAAA,SAAAA,GAAAA,EAAAA;AAEA;;;;;;;AAMAA,EAAAA,GAAAA,CAAAA,cAAAA,GAAqB,SAAA,cAAA,CAAA,UAAA,EAAA,IAAA,EACrB;AACIA,IAAAA,GAAAA,CAAAA,SAAAA,CAAAA,UAAAA,IAAAA,IAAAA;AAFJA,GAAAA;AAKA;;;;;;AAIAA,EAAAA,GAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAA4B,SAAA,WAAA,GAC5B;AACI,SAAA,OAAA,GAAe,KAAA,OAAA,IAAf,EAAA;;AAEA,SAAK,IAAL,CAAA,IAAgBA,GAAAA,CAAhB,SAAA,EACA;AACI,WAAA,OAAA,CAAA,CAAA,IAAkB,IAAKA,GAAAA,CAAAA,SAAAA,CAAL,CAAKA,CAAL,CAAlB,IAAkB,CAAlB;AACH;AAPLA,GAAAA;AAUA;;;;;;AAIAA,EAAAA,GAAAA,CAAAA,SAAAA,CAAAA,cAAAA,GAA+B,SAAA,cAAA,GAC/B;AACI,SAAK,IAAL,CAAA,IAAgB,KAAhB,OAAA,EACA;AACI,WAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,WAAA,OAAA,CAAA,CAAA,IAAA,IAAA;AACH;;AAED,SAAA,OAAA,GAAA,IAAA;AARJA,GAAAA;AAUH;;kBAEc;AACX;;;;;AAKAC,EAAAA,KAAAA,EAAO,SAAA,KAAA,CAAA,GAAA,EACP;AACIC,IAAAA,YAAAA,CAAAA,GAAAA,CAAAA;AACH;AATU,C","sourcesContent":["/**\n * Mixins functionality to make an object have \"plugins\".\n *\n * @example\n *      function MyObject() {}\n *\n *      pluginTarget.mixin(MyObject);\n *\n * @mixin\n * @memberof PIXI.utils\n * @param {object} obj - The object to mix into.\n */\nfunction pluginTarget(obj)\n{\n    obj.__plugins = {};\n\n    /**\n     * Adds a plugin to an object\n     *\n     * @param {string} pluginName - The events that should be listed.\n     * @param {Function} ctor - The constructor function for the plugin.\n     */\n    obj.registerPlugin = function registerPlugin(pluginName, ctor)\n    {\n        obj.__plugins[pluginName] = ctor;\n    };\n\n    /**\n     * Instantiates all the plugins of this object\n     *\n     */\n    obj.prototype.initPlugins = function initPlugins()\n    {\n        this.plugins = this.plugins || {};\n\n        for (const o in obj.__plugins)\n        {\n            this.plugins[o] = new (obj.__plugins[o])(this);\n        }\n    };\n\n    /**\n     * Removes all the plugins of this object\n     *\n     */\n    obj.prototype.destroyPlugins = function destroyPlugins()\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n\n        this.plugins = null;\n    };\n}\n\nexport default {\n    /**\n     * Mixes in the properties of the pluginTarget into another object\n     *\n     * @param {object} obj - The obj to mix into\n     */\n    mixin: function mixin(obj)\n    {\n        pluginTarget(obj);\n    },\n};\n"]},"metadata":{},"sourceType":"script"}