{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = checkMaxIfStatmentsInShader;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar fragTemplate = ['precision mediump float;', 'void main(void){', 'float test = 0.1;', '%forloop%', 'gl_FragColor = vec4(0.0);', '}'].join('\\n');\n\nfunction checkMaxIfStatmentsInShader(maxIfs, gl) {\n  var createTempContext = !gl; // @if DEBUG\n\n  if (maxIfs === 0) {\n    throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n  } // @endif\n\n\n  if (createTempContext) {\n    var tinyCanvas = document.createElement('canvas');\n    tinyCanvas.width = 1;\n    tinyCanvas.height = 1;\n    gl = _pixiGlCore2.default.createContext(tinyCanvas);\n  }\n\n  var shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n  while (true) // eslint-disable-line no-constant-condition\n  {\n    var fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n    gl.shaderSource(shader, fragmentSrc);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      maxIfs = maxIfs / 2 | 0;\n    } else {\n      // valid!\n      break;\n    }\n  }\n\n  if (createTempContext) {\n    // get rid of context\n    if (gl.getExtension('WEBGL_lose_context')) {\n      gl.getExtension('WEBGL_lose_context').loseContext();\n    }\n  }\n\n  return maxIfs;\n}\n\nfunction generateIfTestSrc(maxIfs) {\n  var src = '';\n\n  for (var i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += '\\nelse ';\n    }\n\n    if (i < maxIfs - 1) {\n      src += 'if(test == ' + i + '.0){}';\n    }\n  }\n\n  return src;\n}","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/utils/checkMaxIfStatmentsInShader.js"],"names":["fragTemplate","checkMaxIfStatmentsInShader","createTempContext","maxIfs","tinyCanvas","document","gl","shader","fragmentSrc","generateIfTestSrc","src","i"],"mappings":";;;kBAWwBC,2B;;AAXxB,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;AAEA,IAAMD,YAAAA,GAAe,CAAA,0BAAA,EAAA,kBAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,2BAAA,EAAA,GAAA,EAAA,IAAA,CAArB,IAAqB,CAArB;;AASe,SAAA,2BAAA,CAAA,MAAA,EAAA,EAAA,EACf;AACI,MAAME,iBAAAA,GAAoB,CAA1B,EAAA,CADJ,CAGI;;AACA,MAAIC,MAAAA,KAAJ,CAAA,EACA;AACI,UAAM,IAAA,KAAA,CAAN,+DAAM,CAAN;AACH,GAPL,CAQI;;;AAEA,MAAA,iBAAA,EACA;AACI,QAAMC,UAAAA,GAAaC,QAAAA,CAAAA,aAAAA,CAAnB,QAAmBA,CAAnB;AAEAD,IAAAA,UAAAA,CAAAA,KAAAA,GAAAA,CAAAA;AACAA,IAAAA,UAAAA,CAAAA,MAAAA,GAAAA,CAAAA;AAEAE,IAAAA,EAAAA,GAAK,YAAA,CAAA,OAAA,CAAA,aAAA,CAALA,UAAK,CAALA;AACH;;AAED,MAAMC,MAAAA,GAASD,EAAAA,CAAAA,YAAAA,CAAgBA,EAAAA,CAA/B,eAAeA,CAAf;;AAEA,SAAA,IAAA,EAAa;AACb;AACI,QAAME,WAAAA,GAAcR,YAAAA,CAAAA,OAAAA,CAAAA,aAAAA,EAAoCS,iBAAAA,CAAxD,MAAwDA,CAApCT,CAApB;AAEAM,IAAAA,EAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,WAAAA;AACAA,IAAAA,EAAAA,CAAAA,aAAAA,CAAAA,MAAAA;;AAEA,QAAI,CAACA,EAAAA,CAAAA,kBAAAA,CAAAA,MAAAA,EAA8BA,EAAAA,CAAnC,cAAKA,CAAL,EACA;AACIH,MAAAA,MAAAA,GAAUA,MAAAA,GAAD,CAACA,GAAVA,CAAAA;AAFJ,KAAA,MAKA;AACI;AACA;AACH;AACJ;;AAED,MAAA,iBAAA,EACA;AACI;AACA,QAAIG,EAAAA,CAAAA,YAAAA,CAAJ,oBAAIA,CAAJ,EACA;AACIA,MAAAA,EAAAA,CAAAA,YAAAA,CAAAA,oBAAAA,EAAAA,WAAAA;AACH;AACJ;;AAED,SAAA,MAAA;AACH;;AAED,SAAA,iBAAA,CAAA,MAAA,EACA;AACI,MAAII,GAAAA,GAAJ,EAAA;;AAEA,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EACA;AACI,QAAIA,CAAAA,GAAJ,CAAA,EACA;AACID,MAAAA,GAAAA,IAAAA,SAAAA;AACH;;AAED,QAAIC,CAAAA,GAAIR,MAAAA,GAAR,CAAA,EACA;AACIO,MAAAA,GAAAA,IAAAA,gBAAAA,CAAAA,GAAAA,OAAAA;AACH;AACJ;;AAED,SAAA,GAAA;AACH","sourcesContent":["import glCore from 'pixi-gl-core';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nexport default function checkMaxIfStatmentsInShader(maxIfs, gl)\n{\n    const createTempContext = !gl;\n\n    // @if DEBUG\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n    // @endif\n\n    if (createTempContext)\n    {\n        const tinyCanvas = document.createElement('canvas');\n\n        tinyCanvas.width = 1;\n        tinyCanvas.height = 1;\n\n        gl = glCore.createContext(tinyCanvas);\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    if (createTempContext)\n    {\n        // get rid of context\n        if (gl.getExtension('WEBGL_lose_context'))\n        {\n            gl.getExtension('WEBGL_lose_context').loseContext();\n        }\n    }\n\n    return maxIfs;\n}\n\nfunction generateIfTestSrc(maxIfs)\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n"]},"metadata":{},"sourceType":"script"}