{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _math = require('../math');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * 'Builder' pattern for bounds rectangles\n * Axis-Aligned Bounding Box\n * It is not a shape! Its mutable thing, no 'EMPTY' or that kind of problems\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar Bounds = function () {\n  /**\n   *\n   */\n  function Bounds() {\n    _classCallCheck(this, Bounds);\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n\n    this.minX = Infinity;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.minY = Infinity;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.maxX = -Infinity;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.maxY = -Infinity;\n    this.rect = null;\n  }\n  /**\n   * Checks if bounds are empty.\n   *\n   * @return {boolean} True if empty.\n   */\n\n\n  Bounds.prototype.isEmpty = function isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  };\n  /**\n   * Clears the bounds and resets.\n   *\n   */\n\n\n  Bounds.prototype.clear = function clear() {\n    this.updateID++;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n  };\n  /**\n   * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n   * It is not guaranteed that it will return tempRect\n   *\n   * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n   * @returns {PIXI.Rectangle} A rectangle of the bounds\n   */\n\n\n  Bounds.prototype.getRectangle = function getRectangle(rect) {\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      return _math.Rectangle.EMPTY;\n    }\n\n    rect = rect || new _math.Rectangle(0, 0, 1, 1);\n    rect.x = this.minX;\n    rect.y = this.minY;\n    rect.width = this.maxX - this.minX;\n    rect.height = this.maxY - this.minY;\n    return rect;\n  };\n  /**\n   * This function should be inlined when its possible.\n   *\n   * @param {PIXI.Point} point - The point to add.\n   */\n\n\n  Bounds.prototype.addPoint = function addPoint(point) {\n    this.minX = Math.min(this.minX, point.x);\n    this.maxX = Math.max(this.maxX, point.x);\n    this.minY = Math.min(this.minY, point.y);\n    this.maxY = Math.max(this.maxY, point.y);\n  };\n  /**\n   * Adds a quad, not transformed\n   *\n   * @param {Float32Array} vertices - The verts to add.\n   */\n\n\n  Bounds.prototype.addQuad = function addQuad(vertices) {\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n    var x = vertices[0];\n    var y = vertices[1];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = vertices[2];\n    y = vertices[3];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = vertices[4];\n    y = vertices[5];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = vertices[6];\n    y = vertices[7];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  };\n  /**\n   * Adds sprite frame, transformed.\n   *\n   * @param {PIXI.TransformBase} transform - TODO\n   * @param {number} x0 - TODO\n   * @param {number} y0 - TODO\n   * @param {number} x1 - TODO\n   * @param {number} y1 - TODO\n   */\n\n\n  Bounds.prototype.addFrame = function addFrame(transform, x0, y0, x1, y1) {\n    var matrix = transform.worldTransform;\n    var a = matrix.a;\n    var b = matrix.b;\n    var c = matrix.c;\n    var d = matrix.d;\n    var tx = matrix.tx;\n    var ty = matrix.ty;\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n    var x = a * x0 + c * y0 + tx;\n    var y = b * x0 + d * y0 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  };\n  /**\n   * Add an array of vertices\n   *\n   * @param {PIXI.TransformBase} transform - TODO\n   * @param {Float32Array} vertices - TODO\n   * @param {number} beginOffset - TODO\n   * @param {number} endOffset - TODO\n   */\n\n\n  Bounds.prototype.addVertices = function addVertices(transform, vertices, beginOffset, endOffset) {\n    var matrix = transform.worldTransform;\n    var a = matrix.a;\n    var b = matrix.b;\n    var c = matrix.c;\n    var d = matrix.d;\n    var tx = matrix.tx;\n    var ty = matrix.ty;\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n\n    for (var i = beginOffset; i < endOffset; i += 2) {\n      var rawX = vertices[i];\n      var rawY = vertices[i + 1];\n      var x = a * rawX + c * rawY + tx;\n      var y = d * rawY + b * rawX + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  };\n  /**\n   * Adds other Bounds\n   *\n   * @param {PIXI.Bounds} bounds - TODO\n   */\n\n\n  Bounds.prototype.addBounds = function addBounds(bounds) {\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n    this.minX = bounds.minX < minX ? bounds.minX : minX;\n    this.minY = bounds.minY < minY ? bounds.minY : minY;\n    this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n    this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n  };\n  /**\n   * Adds other Bounds, masked with Bounds\n   *\n   * @param {PIXI.Bounds} bounds - TODO\n   * @param {PIXI.Bounds} mask - TODO\n   */\n\n\n  Bounds.prototype.addBoundsMask = function addBoundsMask(bounds, mask) {\n    var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n\n    var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n\n    var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n\n    var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n    if (_minX <= _maxX && _minY <= _maxY) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX;\n      this.minY = _minY < minY ? _minY : minY;\n      this.maxX = _maxX > maxX ? _maxX : maxX;\n      this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  };\n  /**\n   * Adds other Bounds, masked with Rectangle\n   *\n   * @param {PIXI.Bounds} bounds - TODO\n   * @param {PIXI.Rectangle} area - TODO\n   */\n\n\n  Bounds.prototype.addBoundsArea = function addBoundsArea(bounds, area) {\n    var _minX = bounds.minX > area.x ? bounds.minX : area.x;\n\n    var _minY = bounds.minY > area.y ? bounds.minY : area.y;\n\n    var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;\n\n    var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;\n\n    if (_minX <= _maxX && _minY <= _maxY) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX;\n      this.minY = _minY < minY ? _minY : minY;\n      this.maxX = _maxX > maxX ? _maxX : maxX;\n      this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  };\n\n  return Bounds;\n}();\n\nexports.default = Bounds;","map":{"version":3,"sources":["../../../src/core/display/Bounds.js"],"names":["Bounds","isEmpty","clear","getRectangle","rect","addPoint","point","Math","addQuad","vertices","minX","minY","maxX","maxY","x","y","addFrame","transform","x0","y0","x1","y1","matrix","a","b","c","d","tx","ty","addVertices","beginOffset","endOffset","i","rawX","rawY","addBounds","bounds","addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsArea","area"],"mappings":"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","sourcesContent":["import { Rectangle } from '../math';\n\n/**\n * 'Builder' pattern for bounds rectangles\n * Axis-Aligned Bounding Box\n * It is not a shape! Its mutable thing, no 'EMPTY' or that kind of problems\n *\n * @class\n * @memberof PIXI\n */\nexport default class Bounds\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minX = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minY = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxX = -Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxY = -Infinity;\n\n        this.rect = null;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     *\n     * @return {boolean} True if empty.\n     */\n    isEmpty()\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /**\n     * Clears the bounds and resets.\n     *\n     */\n    clear()\n    {\n        this.updateID++;\n\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    }\n\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     *\n     * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n     * @returns {PIXI.Rectangle} A rectangle of the bounds\n     */\n    getRectangle(rect)\n    {\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            return Rectangle.EMPTY;\n        }\n\n        rect = rect || new Rectangle(0, 0, 1, 1);\n\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n\n        return rect;\n    }\n\n    /**\n     * This function should be inlined when its possible.\n     *\n     * @param {PIXI.Point} point - The point to add.\n     */\n    addPoint(point)\n    {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    }\n\n    /**\n     * Adds a quad, not transformed\n     *\n     * @param {Float32Array} vertices - The verts to add.\n     */\n    addQuad(vertices)\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = vertices[0];\n        let y = vertices[1];\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds sprite frame, transformed.\n     *\n     * @param {PIXI.TransformBase} transform - TODO\n     * @param {number} x0 - TODO\n     * @param {number} y0 - TODO\n     * @param {number} x1 - TODO\n     * @param {number} y1 - TODO\n     */\n    addFrame(transform, x0, y0, x1, y1)\n    {\n        const matrix = transform.worldTransform;\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Add an array of vertices\n     *\n     * @param {PIXI.TransformBase} transform - TODO\n     * @param {Float32Array} vertices - TODO\n     * @param {number} beginOffset - TODO\n     * @param {number} endOffset - TODO\n     */\n    addVertices(transform, vertices, beginOffset, endOffset)\n    {\n        const matrix = transform.worldTransform;\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const rawX = vertices[i];\n            const rawY = vertices[i + 1];\n            const x = (a * rawX) + (c * rawY) + tx;\n            const y = (d * rawY) + (b * rawX) + ty;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds other Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     */\n    addBounds(bounds)\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Bounds} mask - TODO\n     */\n    addBoundsMask(bounds, mask)\n    {\n        const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Adds other Bounds, masked with Rectangle\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Rectangle} area - TODO\n     */\n    addBoundsArea(bounds, area)\n    {\n        const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        const _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        const _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}