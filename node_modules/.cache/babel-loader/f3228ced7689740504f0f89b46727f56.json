{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _settings = require('./settings');\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction checkPrecision(src, def) {\n  if (src instanceof Array) {\n    if (src[0].substring(0, 9) !== 'precision') {\n      var copy = src.slice(0);\n      copy.unshift('precision ' + def + ' float;');\n      return copy;\n    }\n  } else if (src.trim().substring(0, 9) !== 'precision') {\n    return 'precision ' + def + ' float;\\n' + src;\n  }\n\n  return src;\n}\n/**\n * Wrapper class, webGL Shader for Pixi.\n * Adds precision string if vertexSrc or fragmentSrc have no mention of it.\n *\n * @class\n * @extends GLShader\n * @memberof PIXI\n */\n\n\nvar Shader = function (_GLShader) {\n  _inherits(Shader, _GLShader);\n  /**\n   *\n   * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n   * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.\n   * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.\n   * @param {object} [attributeLocations] - A key value pair showing which location eact attribute should sit.\n                     e.g. {position:0, uvs:1}.\n   * @param {string} [precision] - The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n   */\n\n\n  function Shader(gl, vertexSrc, fragmentSrc, attributeLocations, precision) {\n    _classCallCheck(this, Shader);\n\n    return _possibleConstructorReturn(this, _GLShader.call(this, gl, checkPrecision(vertexSrc, precision || _settings2.default.PRECISION_VERTEX), checkPrecision(fragmentSrc, precision || _settings2.default.PRECISION_FRAGMENT), undefined, attributeLocations));\n  }\n\n  return Shader;\n}(_pixiGlCore.GLShader);\n\nexports.default = Shader;","map":{"version":3,"sources":["../../src/core/Shader.js"],"names":["src","copy","Shader","checkPrecision","precision"],"mappings":";;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,cAAA,CAAA,GAAA,EAAA,GAAA,EACA;AACI,MAAIA,GAAAA,YAAJ,KAAA,EACA;AACI,QAAIA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,WAAA,EACA;AACI,UAAMC,IAAAA,GAAOD,GAAAA,CAAAA,KAAAA,CAAb,CAAaA,CAAb;AAEAC,MAAAA,IAAAA,CAAAA,OAAAA,CAAAA,eAAAA,GAAAA,GAAAA,SAAAA;AAEA,aAAA,IAAA;AACH;AATL,GAAA,MAWK,IAAID,GAAAA,CAAAA,IAAAA,GAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,WAAA,EACL;AACI,WAAA,eAAA,GAAA,GAAA,WAAA,GAAA,GAAA;AACH;;AAED,SAAA,GAAA;AACH;AAED;;;;;;;;;;IAQqBE,M;;AAEjB;;;;;;;;;;;AASA,WAAA,MAAA,CAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,SAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAAA,WAAA,0BAAA,CAAA,IAAA,EACI,SAAA,CAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAUC,cAAAA,CAAAA,SAAAA,EAA0BC,SAAAA,IAAa,UAAA,CAAA,OAAA,CAAjD,gBAAUD,CAAV,EACIA,cAAAA,CAAAA,WAAAA,EAA4BC,SAAAA,IAAa,UAAA,CAAA,OAAA,CAD7C,kBACID,CADJ,EAAA,SAAA,EADJ,kBACI,CADJ,CAAA;AAGC;;;;;kBAfgBD,M","sourcesContent":["import { GLShader } from 'pixi-gl-core';\nimport settings from './settings';\n\nfunction checkPrecision(src, def)\n{\n    if (src instanceof Array)\n    {\n        if (src[0].substring(0, 9) !== 'precision')\n        {\n            const copy = src.slice(0);\n\n            copy.unshift(`precision ${def} float;`);\n\n            return copy;\n        }\n    }\n    else if (src.trim().substring(0, 9) !== 'precision')\n    {\n        return `precision ${def} float;\\n${src}`;\n    }\n\n    return src;\n}\n\n/**\n * Wrapper class, webGL Shader for Pixi.\n * Adds precision string if vertexSrc or fragmentSrc have no mention of it.\n *\n * @class\n * @extends GLShader\n * @memberof PIXI\n */\nexport default class Shader extends GLShader\n{\n    /**\n     *\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.\n     * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.\n     * @param {object} [attributeLocations] - A key value pair showing which location eact attribute should sit.\n                       e.g. {position:0, uvs:1}.\n     * @param {string} [precision] - The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n     */\n    constructor(gl, vertexSrc, fragmentSrc, attributeLocations, precision)\n    {\n        super(gl, checkPrecision(vertexSrc, precision || settings.PRECISION_VERTEX),\n            checkPrecision(fragmentSrc, precision || settings.PRECISION_FRAGMENT), undefined, attributeLocations);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}