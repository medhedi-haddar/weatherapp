{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.parse = parse;\n\nexports.default = function () {\n  return function bitmapFontParser(resource, next) {\n    // skip if no data or not xml data\n    if (!resource.data || resource.type !== _resourceLoader.Resource.TYPE.XML) {\n      next();\n      return;\n    } // skip if not bitmap font data, using some silly duck-typing\n\n\n    if (resource.data.getElementsByTagName('page').length === 0 || resource.data.getElementsByTagName('info').length === 0 || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null) {\n      next();\n      return;\n    }\n\n    var xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n    if (resource.isDataUrl) {\n      if (xmlUrl === '.') {\n        xmlUrl = '';\n      }\n\n      if (this.baseUrl && xmlUrl) {\n        // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n        if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/') {\n          xmlUrl += '/';\n        }\n      }\n    } // remove baseUrl from xmlUrl\n\n\n    xmlUrl = xmlUrl.replace(this.baseUrl, ''); // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n\n    if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/') {\n      xmlUrl += '/';\n    }\n\n    var pages = resource.data.getElementsByTagName('page');\n    var textures = {}; // Handle completed, when the number of textures\n    // load is the same number as references in the fnt file\n\n    var completed = function completed(page) {\n      textures[page.metadata.pageFile] = page.texture;\n\n      if (Object.keys(textures).length === pages.length) {\n        parse(resource, textures);\n        next();\n      }\n    };\n\n    for (var i = 0; i < pages.length; ++i) {\n      var pageFile = pages[i].getAttribute('file');\n      var url = xmlUrl + pageFile;\n      var exists = false; // incase the image is loaded outside\n      // using the same loader, resource will be available\n\n      for (var name in this.resources) {\n        var bitmapResource = this.resources[name];\n\n        if (bitmapResource.url === url) {\n          bitmapResource.metadata.pageFile = pageFile;\n\n          if (bitmapResource.texture) {\n            completed(bitmapResource);\n          } else {\n            bitmapResource.onAfterMiddleware.add(completed);\n          }\n\n          exists = true;\n          break;\n        }\n      } // texture is not loaded, we'll attempt to add\n      // it to the load and add the texture to the list\n\n\n      if (!exists) {\n        // Standard loading options for images\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: _resourceLoader.Resource.LOAD_TYPE.IMAGE,\n          metadata: Object.assign({\n            pageFile: pageFile\n          }, resource.metadata.imageMetadata),\n          parentResource: resource\n        };\n        this.add(url, options, completed);\n      }\n    }\n  };\n};\n\nvar _path = require('path');\n\nvar path = _interopRequireWildcard(_path);\n\nvar _resourceLoader = require('resource-loader');\n\nvar _extras = require('../extras');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n */\n\n\nfunction parse(resource, textures) {\n  resource.bitmapFont = _extras.BitmapText.registerFont(resource.data, textures);\n}","map":{"version":3,"sources":["../../src/loaders/bitmapFontParser.js"],"names":["path","parse","resource","next","xmlUrl","pages","textures","completed","page","Object","i","pageFile","url","exists","bitmapResource","options","crossOrigin","loadType","metadata","parentResource"],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { Resource } from 'resource-loader';\nimport { BitmapText } from '../extras';\n\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n */\nexport function parse(resource, textures)\n{\n    resource.bitmapFont = BitmapText.registerFont(resource.data, textures);\n}\n\nexport default function ()\n{\n    return function bitmapFontParser(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== Resource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from xmlUrl\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const pages = resource.data.getElementsByTagName('page');\n        const textures = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page) =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === pages.length)\n            {\n                parse(resource, textures);\n                next();\n            }\n        };\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].getAttribute('file');\n            const url = xmlUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: Resource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"script"}