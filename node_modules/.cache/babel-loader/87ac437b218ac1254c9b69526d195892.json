{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = canUseNewCanvasBlendModes;\n/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\n\nfunction createColoredCanvas(color) {\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.fillStyle = color;\n  context.fillRect(0, 0, 6, 1);\n  return canvas;\n}\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @return {boolean} whether they are supported\n */\n\n\nfunction canUseNewCanvasBlendModes() {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n\n  var magenta = createColoredCanvas('#ff00ff');\n  var yellow = createColoredCanvas('#ffff00');\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.globalCompositeOperation = 'multiply';\n  context.drawImage(magenta, 0, 0);\n  context.drawImage(yellow, 2, 0);\n  var imageData = context.getImageData(2, 0, 1, 1);\n\n  if (!imageData) {\n    return false;\n  }\n\n  var data = imageData.data;\n  return data[0] === 255 && data[1] === 0 && data[2] === 0;\n}","map":{"version":3,"sources":["../../../../../src/core/renderers/canvas/utils/canUseNewCanvasBlendModes.js"],"names":["canvas","document","context","canUseNewCanvasBlendModes","magenta","createColoredCanvas","yellow","imageData","data"],"mappings":";;;kBA2BwBG,yB;AA3BxB;;;;;;;;AAOA,SAAA,mBAAA,CAAA,KAAA,EACA;AACI,MAAMH,MAAAA,GAASC,QAAAA,CAAAA,aAAAA,CAAf,QAAeA,CAAf;AAEAD,EAAAA,MAAAA,CAAAA,KAAAA,GAAAA,CAAAA;AACAA,EAAAA,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA;AAEA,MAAME,OAAAA,GAAUF,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,CAAhB;AAEAE,EAAAA,OAAAA,CAAAA,SAAAA,GAAAA,KAAAA;AACAA,EAAAA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAEA,SAAA,MAAA;AACH;AAED;;;;;;;AAKe,SAAA,yBAAA,GACf;AACI,MAAI,OAAA,QAAA,KAAJ,WAAA,EACA;AACI,WAAA,KAAA;AACH;;AAED,MAAME,OAAAA,GAAUC,mBAAAA,CAAhB,SAAgBA,CAAhB;AACA,MAAMC,MAAAA,GAASD,mBAAAA,CAAf,SAAeA,CAAf;AAEA,MAAML,MAAAA,GAASC,QAAAA,CAAAA,aAAAA,CAAf,QAAeA,CAAf;AAEAD,EAAAA,MAAAA,CAAAA,KAAAA,GAAAA,CAAAA;AACAA,EAAAA,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA;AAEA,MAAME,OAAAA,GAAUF,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,CAAhB;AAEAE,EAAAA,OAAAA,CAAAA,wBAAAA,GAAAA,UAAAA;AACAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AACAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAEA,MAAMK,SAAAA,GAAYL,OAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAlB,CAAkBA,CAAlB;;AAEA,MAAI,CAAJ,SAAA,EACA;AACI,WAAA,KAAA;AACH;;AAED,MAAMM,IAAAA,GAAOD,SAAAA,CAAb,IAAA;AAEA,SAAQC,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAAA,IAAmBA,IAAAA,CAAAA,CAAAA,CAAAA,KAAnBA,CAAAA,IAAoCA,IAAAA,CAAAA,CAAAA,CAAAA,KAA5C,CAAA;AACH","sourcesContent":["/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color)\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @return {boolean} whether they are supported\n */\nexport default function canUseNewCanvasBlendModes()\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n"]},"metadata":{},"sourceType":"script"}