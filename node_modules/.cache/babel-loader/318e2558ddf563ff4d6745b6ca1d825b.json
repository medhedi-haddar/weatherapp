{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\n\nvar _createIndicesForQuads = require('../../../utils/createIndicesForQuads');\n\nvar _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar Quad = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The gl context for this quad to use.\n   * @param {object} state - TODO: Description\n   */\n  function Quad(gl, state) {\n    _classCallCheck(this, Quad);\n    /**\n     * the current WebGL drawing context\n     *\n     * @member {WebGLRenderingContext}\n     */\n\n\n    this.gl = gl;\n    /**\n     * An array of vertices\n     *\n     * @member {Float32Array}\n     */\n\n    this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);\n    /**\n     * The Uvs of the quad\n     *\n     * @member {Float32Array}\n     */\n\n    this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    this.interleaved = new Float32Array(8 * 2);\n\n    for (var i = 0; i < 4; i++) {\n      this.interleaved[i * 4] = this.vertices[i * 2];\n      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];\n      this.interleaved[i * 4 + 2] = this.uvs[i * 2];\n      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];\n    }\n    /**\n     * An array containing the indices of the vertices\n     *\n     * @member {Uint16Array}\n     */\n\n\n    this.indices = (0, _createIndicesForQuads2.default)(1);\n    /**\n     * The vertex buffer\n     *\n     * @member {glCore.GLBuffer}\n     */\n\n    this.vertexBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);\n    /**\n     * The index buffer\n     *\n     * @member {glCore.GLBuffer}\n     */\n\n    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n    /**\n     * The vertex array object\n     *\n     * @member {glCore.VertexArrayObject}\n     */\n\n    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl, state);\n  }\n  /**\n   * Initialises the vaos and uses the shader.\n   *\n   * @param {PIXI.Shader} shader - the shader to use\n   */\n\n\n  Quad.prototype.initVao = function initVao(shader) {\n    this.vao.clear().addIndex(this.indexBuffer).addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0).addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);\n  };\n  /**\n   * Maps two Rectangle to the quad.\n   *\n   * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n   * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n   * @return {PIXI.Quad} Returns itself.\n   */\n\n\n  Quad.prototype.map = function map(targetTextureFrame, destinationFrame) {\n    var x = 0; // destinationFrame.x / targetTextureFrame.width;\n\n    var y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n    this.uvs[0] = x;\n    this.uvs[1] = y;\n    this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[3] = y;\n    this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;\n    this.uvs[6] = x;\n    this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;\n    x = destinationFrame.x;\n    y = destinationFrame.y;\n    this.vertices[0] = x;\n    this.vertices[1] = y;\n    this.vertices[2] = x + destinationFrame.width;\n    this.vertices[3] = y;\n    this.vertices[4] = x + destinationFrame.width;\n    this.vertices[5] = y + destinationFrame.height;\n    this.vertices[6] = x;\n    this.vertices[7] = y + destinationFrame.height;\n    return this;\n  };\n  /**\n   * Binds the buffer and uploads the data\n   *\n   * @return {PIXI.Quad} Returns itself.\n   */\n\n\n  Quad.prototype.upload = function upload() {\n    for (var i = 0; i < 4; i++) {\n      this.interleaved[i * 4] = this.vertices[i * 2];\n      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];\n      this.interleaved[i * 4 + 2] = this.uvs[i * 2];\n      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];\n    }\n\n    this.vertexBuffer.upload(this.interleaved);\n    return this;\n  };\n  /**\n   * Removes this quad from WebGL\n   */\n\n\n  Quad.prototype.destroy = function destroy() {\n    var gl = this.gl;\n    gl.deleteBuffer(this.vertexBuffer);\n    gl.deleteBuffer(this.indexBuffer);\n  };\n\n  return Quad;\n}();\n\nexports.default = Quad;","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/utils/Quad.js"],"names":["Quad","i","gl","initVao","shader","map","targetTextureFrame","destinationFrame","x","y","upload","destroy"],"mappings":"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","sourcesContent":["import glCore from 'pixi-gl-core';\nimport createIndicesForQuads from '../../../utils/createIndicesForQuads';\n\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\nexport default class Quad\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The gl context for this quad to use.\n     * @param {object} state - TODO: Description\n     */\n    constructor(gl, state)\n    {\n        /**\n         * the current WebGL drawing context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        /**\n         * An array of vertices\n         *\n         * @member {Float32Array}\n         */\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        /**\n         * The Uvs of the quad\n         *\n         * @member {Float32Array}\n         */\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.interleaved = new Float32Array(8 * 2);\n\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        /**\n         * An array containing the indices of the vertices\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(1);\n\n        /**\n         * The vertex buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n        this.vertexBuffer = glCore.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);\n\n        /**\n         * The index buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        /**\n         * The vertex array object\n         *\n         * @member {glCore.VertexArrayObject}\n         */\n        this.vao = new glCore.VertexArrayObject(gl, state);\n    }\n\n    /**\n     * Initialises the vaos and uses the shader.\n     *\n     * @param {PIXI.Shader} shader - the shader to use\n     */\n    initVao(shader)\n    {\n        this.vao.clear()\n        .addIndex(this.indexBuffer)\n        .addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0)\n        .addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     *\n     * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n     * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n     * @return {PIXI.Quad} Returns itself.\n     */\n    map(targetTextureFrame, destinationFrame)\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        return this;\n    }\n\n    /**\n     * Binds the buffer and uploads the data\n     *\n     * @return {PIXI.Quad} Returns itself.\n     */\n    upload()\n    {\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        this.vertexBuffer.upload(this.interleaved);\n\n        return this;\n    }\n\n    /**\n     * Removes this quad from WebGL\n     */\n    destroy()\n    {\n        const gl = this.gl;\n\n        gl.deleteBuffer(this.vertexBuffer);\n        gl.deleteBuffer(this.indexBuffer);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}