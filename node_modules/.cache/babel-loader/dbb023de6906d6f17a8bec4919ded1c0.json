{"ast":null,"code":"'use strict';\n\nvar _core = require('../core');\n\nvar core = _interopRequireWildcard(_core);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * The instance name of the object.\n *\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\n\n\ncore.DisplayObject.prototype.name = null;\n/**\n * Returns the display object in the container\n *\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - instance name\n * @return {PIXI.DisplayObject} The child with the specified name.\n */\n\ncore.Container.prototype.getChildByName = function getChildByName(name) {\n  for (var i = 0; i < this.children.length; i++) {\n    if (this.children[i].name === name) {\n      return this.children[i];\n    }\n  }\n\n  return null;\n};","map":{"version":3,"sources":["../../src/extras/getChildByName.js"],"names":["core","i"],"mappings":";;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;IAAYA,I;;;;;;;;;;;;;;;;;;AAEZ;;;;;;;;AAMAA,IAAAA,CAAAA,aAAAA,CAAAA,SAAAA,CAAAA,IAAAA,GAAAA,IAAAA;AAEA;;;;;;;;;AAQAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,cAAAA,GAA0C,SAAA,cAAA,CAAA,IAAA,EAC1C;AACI,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAI,KAAA,QAAA,CAApB,MAAA,EAA0CA,CAA1C,EAAA,EACA;AACI,QAAI,KAAA,QAAA,CAAA,CAAA,EAAA,IAAA,KAAJ,IAAA,EACA;AACI,aAAO,KAAA,QAAA,CAAP,CAAO,CAAP;AACH;AACJ;;AAED,SAAA,IAAA;AAVJD,CAAAA","sourcesContent":["import * as core from '../core';\n\n/**\n * The instance name of the object.\n *\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\ncore.DisplayObject.prototype.name = null;\n\n/**\n * Returns the display object in the container\n *\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - instance name\n * @return {PIXI.DisplayObject} The child with the specified name.\n */\ncore.Container.prototype.getChildByName = function getChildByName(name)\n{\n    for (let i = 0; i < this.children.length; i++)\n    {\n        if (this.children[i].name === name)\n        {\n            return this.children[i];\n        }\n    }\n\n    return null;\n};\n"]},"metadata":{},"sourceType":"script"}