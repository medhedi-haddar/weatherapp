{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _path = require('path');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object. You can\n * use this filter to apply all manor of crazy warping effects. Currently the r\n * property of the texture is used to offset the x and the g property of the texture\n * is used to offset the y.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\n\n\nvar DisplacementFilter = function (_core$Filter) {\n  _inherits(DisplacementFilter, _core$Filter);\n  /**\n   * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n   * @param {number} scale - The scale of the displacement\n   */\n\n\n  function DisplacementFilter(sprite, scale) {\n    _classCallCheck(this, DisplacementFilter);\n\n    var maskMatrix = new core.Matrix();\n    sprite.renderable = false;\n\n    var _this = _possibleConstructorReturn(this, _core$Filter.call(this, // vertex shader\n    'attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nvoid main(void)\\n{\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n   vTextureCoord = aTextureCoord;\\n}', // fragment shader\n    'varying vec2 vFilterCoord;\\nvarying vec2 vTextureCoord;\\n\\nuniform vec2 scale;\\n\\nuniform sampler2D uSampler;\\nuniform sampler2D mapSampler;\\n\\nuniform vec4 filterArea;\\nuniform vec4 filterClamp;\\n\\nvoid main(void)\\n{\\n  vec4 map =  texture2D(mapSampler, vFilterCoord);\\n\\n  map -= 0.5;\\n  map.xy *= scale / filterArea.xy;\\n\\n  gl_FragColor = texture2D(uSampler, clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), filterClamp.xy, filterClamp.zw));\\n}\\n'));\n\n    _this.maskSprite = sprite;\n    _this.maskMatrix = maskMatrix;\n    _this.uniforms.mapSampler = sprite._texture;\n    _this.uniforms.filterMatrix = maskMatrix;\n    _this.uniforms.scale = {\n      x: 1,\n      y: 1\n    };\n\n    if (scale === null || scale === undefined) {\n      scale = 20;\n    }\n\n    _this.scale = new core.Point(scale, scale);\n    return _this;\n  }\n  /**\n   * Applies the filter.\n   *\n   * @param {PIXI.FilterManager} filterManager - The manager.\n   * @param {PIXI.RenderTarget} input - The input target.\n   * @param {PIXI.RenderTarget} output - The output target.\n   */\n\n\n  DisplacementFilter.prototype.apply = function apply(filterManager, input, output) {\n    this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n    this.uniforms.scale.x = this.scale.x;\n    this.uniforms.scale.y = this.scale.y; // draw the filter...\n\n    filterManager.applyFilter(this, input, output);\n  };\n  /**\n   * The texture used for the displacement map. Must be power of 2 sized texture.\n   *\n   * @member {PIXI.Texture}\n   */\n\n\n  _createClass(DisplacementFilter, [{\n    key: 'map',\n    get: function get() {\n      return this.uniforms.mapSampler;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.uniforms.mapSampler = value;\n    }\n  }]);\n\n  return DisplacementFilter;\n}(core.Filter);\n\nexports.default = DisplacementFilter;","map":{"version":3,"sources":["../../../src/filters/displacement/DisplacementFilter.js"],"names":["core","DisplacementFilter","Filter","maskMatrix","sprite","x","y","scale","apply","filterManager","input","output","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;IAAYA,I;;AAEZ,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;IAWqBC,kB;;AAEjB;;;;;;AAIA,WAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;;AACI,QAAME,UAAAA,GAAa,IAAIH,IAAAA,CAAvB,MAAmB,EAAnB;AAEAI,IAAAA,MAAAA,CAAAA,UAAAA,GAAAA,KAAAA;;AAHJ,QAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAKI,YAAA,CAAA,IAAA,CAAA,IAAA,EACI;AADJ,oZAAA,EAGI;AARR,qdAKI,CALJ,CAAA;;AAYI,IAAA,KAAA,CAAA,UAAA,GAAA,MAAA;AACA,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;AAEA,IAAA,KAAA,CAAA,QAAA,CAAA,UAAA,GAA2BA,MAAAA,CAA3B,QAAA;AACA,IAAA,KAAA,CAAA,QAAA,CAAA,YAAA,GAAA,UAAA;AACA,IAAA,KAAA,CAAA,QAAA,CAAA,KAAA,GAAsB;AAAEC,MAAAA,CAAAA,EAAF,CAAA;AAAQC,MAAAA,CAAAA,EAA9B;AAAsB,KAAtB;;AAEA,QAAIC,KAAAA,KAAAA,IAAAA,IAAkBA,KAAAA,KAAtB,SAAA,EACA;AACIA,MAAAA,KAAAA,GAAAA,EAAAA;AACH;;AAED,IAAA,KAAA,CAAA,KAAA,GAAa,IAAIP,IAAAA,CAAJ,KAAA,CAAA,KAAA,EAAb,KAAa,CAAb;AAxBJ,WAAA,KAAA;AAyBC;AAED;;;;;;;;;+BAOAQ,K,kBAAMC,a,EAAeC,K,EAAOC,M,EAC5B;AACI,SAAA,QAAA,CAAA,YAAA,GAA6BF,aAAAA,CAAAA,qBAAAA,CAAoC,KAApCA,UAAAA,EAAqD,KAAlF,UAA6BA,CAA7B;AACA,SAAA,QAAA,CAAA,KAAA,CAAA,CAAA,GAAwB,KAAA,KAAA,CAAxB,CAAA;AACA,SAAA,QAAA,CAAA,KAAA,CAAA,CAAA,GAAwB,KAAA,KAAA,CAAxB,CAAA,CAHJ,CAKK;;AACDA,IAAAA,aAAAA,CAAAA,WAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAAA,MAAAA;;AAGJ;;;;;;;;;wBAMA;AACI,aAAO,KAAA,QAAA,CAAP,UAAA;;sBAGIG,K,EAAO;AACf;AACI,WAAA,QAAA,CAAA,UAAA,GAAA,KAAA;AACH;;;;EAhE2CZ,IAAAA,CAAKE,M;;kBAAhCD,kB","sourcesContent":["import * as core from '../../core';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object. You can\n * use this filter to apply all manor of crazy warping effects. Currently the r\n * property of the texture is used to offset the x and the g property of the texture\n * is used to offset the y.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class DisplacementFilter extends core.Filter\n{\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param {number} scale - The scale of the displacement\n     */\n    constructor(sprite, scale)\n    {\n        const maskMatrix = new core.Matrix();\n\n        sprite.renderable = false;\n\n        super(\n            // vertex shader\n            readFileSync(join(__dirname, '../fragments/default-filter-matrix.vert'), 'utf8'),\n            // fragment shader\n            readFileSync(join(__dirname, './displacement.frag'), 'utf8')\n        );\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n\n        this.uniforms.mapSampler = sprite._texture;\n        this.uniforms.filterMatrix = maskMatrix;\n        this.uniforms.scale = { x: 1, y: 1 };\n\n        if (scale === null || scale === undefined)\n        {\n            scale = 20;\n        }\n\n        this.scale = new core.Point(scale, scale);\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output)\n    {\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n\n         // draw the filter...\n        filterManager.applyFilter(this, input, output);\n    }\n\n    /**\n     * The texture used for the displacement map. Must be power of 2 sized texture.\n     *\n     * @member {PIXI.Texture}\n     */\n    get map()\n    {\n        return this.uniforms.mapSampler;\n    }\n\n    set map(value) // eslint-disable-line require-jsdoc\n    {\n        this.uniforms.mapSampler = value;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}