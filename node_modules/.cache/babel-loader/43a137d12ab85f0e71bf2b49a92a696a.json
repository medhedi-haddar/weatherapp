{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Plane2 = require('./Plane');\n\nvar _Plane3 = _interopRequireDefault(_Plane2);\n\nvar _CanvasTinter = require('../core/sprites/canvas/CanvasTinter');\n\nvar _CanvasTinter2 = _interopRequireDefault(_CanvasTinter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.fromImage('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.mesh.Plane\n * @memberof PIXI.mesh\n *\n */\n\nvar NineSlicePlane = function (_Plane) {\n  _inherits(NineSlicePlane, _Plane);\n  /**\n   * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n   * @param {int} [leftWidth=10] size of the left vertical bar (A)\n   * @param {int} [topHeight=10] size of the top horizontal bar (C)\n   * @param {int} [rightWidth=10] size of the right vertical bar (B)\n   * @param {int} [bottomHeight=10] size of the bottom horizontal bar (D)\n   */\n\n\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    _classCallCheck(this, NineSlicePlane);\n\n    var _this = _possibleConstructorReturn(this, _Plane.call(this, texture, 4, 4));\n\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._width = _this._origWidth;\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._height = _this._origHeight;\n    /**\n     * The width of the left column (a)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The width of the right column (b)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the top row (c)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the bottom row (d)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     *\n     * @member {number}\n     * @protected\n     */\n\n    _this._cachedTint = 0xFFFFFF;\n    /**\n     * Cached tinted texture.\n     *\n     * @member {HTMLCanvasElement}\n     * @protected\n     */\n\n    _this._tintedTexture = null;\n    /**\n     * Temporary storage for canvas source coords\n     *\n     * @member {number[]}\n     * @private\n     */\n\n    _this._canvasUvs = null;\n\n    _this.refresh(true);\n\n    return _this;\n  }\n  /**\n   * Updates the horizontal vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateHorizontalVertices = function updateHorizontalVertices() {\n    var vertices = this.vertices;\n    var h = this._topHeight + this._bottomHeight;\n    var scale = this._height > h ? 1.0 : this._height / h;\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /**\n   * Updates the vertical vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateVerticalVertices = function updateVerticalVertices() {\n    var vertices = this.vertices;\n    var w = this._leftWidth + this._rightWidth;\n    var scale = this._width > w ? 1.0 : this._width / w;\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Renders the object using the Canvas renderer\n   *\n   * @private\n   * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n   */\n\n\n  NineSlicePlane.prototype._renderCanvas = function _renderCanvas(renderer) {\n    var context = renderer.context;\n    var transform = this.worldTransform;\n    var res = renderer.resolution;\n    var isTinted = this.tint !== 0xFFFFFF;\n    var texture = this._texture; // Work out tinting\n\n    if (isTinted) {\n      if (this._cachedTint !== this.tint) {\n        // Tint has changed, need to update the tinted texture and use that instead\n        this._cachedTint = this.tint;\n        this._tintedTexture = _CanvasTinter2.default.getTintedTexture(this, this.tint);\n      }\n    }\n\n    var textureSource = !isTinted ? texture.baseTexture.source : this._tintedTexture;\n\n    if (!this._canvasUvs) {\n      this._canvasUvs = [0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    var vertices = this.vertices;\n    var uvs = this._canvasUvs;\n    var u0 = isTinted ? 0 : texture.frame.x;\n    var v0 = isTinted ? 0 : texture.frame.y;\n    var u1 = u0 + texture.frame.width;\n    var v1 = v0 + texture.frame.height;\n    uvs[0] = u0;\n    uvs[1] = u0 + this._leftWidth;\n    uvs[2] = u1 - this._rightWidth;\n    uvs[3] = u1;\n    uvs[4] = v0;\n    uvs[5] = v0 + this._topHeight;\n    uvs[6] = v1 - this._bottomHeight;\n    uvs[7] = v1;\n\n    for (var i = 0; i < 8; i++) {\n      uvs[i] *= texture.baseTexture.resolution;\n    }\n\n    context.globalAlpha = this.worldAlpha;\n    renderer.setBlendMode(this.blendMode);\n\n    if (renderer.roundPixels) {\n      context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res | 0, transform.ty * res | 0);\n    } else {\n      context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res, transform.ty * res);\n    }\n\n    for (var row = 0; row < 3; row++) {\n      for (var col = 0; col < 3; col++) {\n        var ind = col * 2 + row * 8;\n        var sw = Math.max(1, uvs[col + 1] - uvs[col]);\n        var sh = Math.max(1, uvs[row + 5] - uvs[row + 4]);\n        var dw = Math.max(1, vertices[ind + 10] - vertices[ind]);\n        var dh = Math.max(1, vertices[ind + 11] - vertices[ind + 1]);\n        context.drawImage(textureSource, uvs[col], uvs[row + 4], sw, sh, vertices[ind], vertices[ind + 1], dw, dh);\n      }\n    }\n  };\n  /**\n   * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n   *\n   * @member {number}\n   */\n\n  /**\n   * Refreshes NineSlicePlane coords. All of them.\n   */\n\n\n  NineSlicePlane.prototype._refresh = function _refresh() {\n    _Plane.prototype._refresh.call(this);\n\n    var uvs = this.uvs;\n    var texture = this._texture;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n\n    var _uvw = 1.0 / this._origWidth;\n\n    var _uvh = 1.0 / this._origHeight;\n\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.dirty++;\n    this.multiplyUvs();\n  };\n\n  _createClass(NineSlicePlane, [{\n    key: 'width',\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._width = value;\n\n      this._refresh();\n    }\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'height',\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._height = value;\n\n      this._refresh();\n    }\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'leftWidth',\n    get: function get() {\n      return this._leftWidth;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._leftWidth = value;\n\n      this._refresh();\n    }\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'rightWidth',\n    get: function get() {\n      return this._rightWidth;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._rightWidth = value;\n\n      this._refresh();\n    }\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'topHeight',\n    get: function get() {\n      return this._topHeight;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._topHeight = value;\n\n      this._refresh();\n    }\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'bottomHeight',\n    get: function get() {\n      return this._bottomHeight;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._bottomHeight = value;\n\n      this._refresh();\n    }\n  }]);\n\n  return NineSlicePlane;\n}(_Plane3.default);\n\nexports.default = NineSlicePlane;","map":{"version":3,"sources":["../../src/mesh/NineSlicePlane.js"],"names":["DEFAULT_BORDER_SIZE","NineSlicePlane","texture","updateHorizontalVertices","vertices","h","scale","updateVerticalVertices","w","_renderCanvas","renderer","context","transform","res","isTinted","textureSource","uvs","u0","v0","u1","v1","i","row","col","ind","sw","Math","sh","dw","dh","value","_refresh","_uvw","_uvh"],"mappings":"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","sourcesContent":["import Plane from './Plane';\nimport CanvasTinter from '../core/sprites/canvas/CanvasTinter';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.fromImage('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.mesh.Plane\n * @memberof PIXI.mesh\n *\n */\nexport default class NineSlicePlane extends Plane\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {int} [leftWidth=10] size of the left vertical bar (A)\n     * @param {int} [topHeight=10] size of the top horizontal bar (C)\n     * @param {int} [rightWidth=10] size of the right vertical bar (B)\n     * @param {int} [bottomHeight=10] size of the bottom horizontal bar (D)\n     */\n    constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight)\n    {\n        super(texture, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._width = this._origWidth;\n\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._height = this._origHeight;\n\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         *\n         * @member {number}\n         * @protected\n         */\n        this._cachedTint = 0xFFFFFF;\n\n        /**\n         * Cached tinted texture.\n         *\n         * @member {HTMLCanvasElement}\n         * @protected\n         */\n        this._tintedTexture = null;\n\n        /**\n         * Temporary storage for canvas source coords\n         *\n         * @member {number[]}\n         * @private\n         */\n        this._canvasUvs = null;\n\n        this.refresh(true);\n    }\n\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    updateHorizontalVertices()\n    {\n        const vertices = this.vertices;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scale = this._height > h ? 1.0 : this._height / h;\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    updateVerticalVertices()\n    {\n        const vertices = this.vertices;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scale = this._width > w ? 1.0 : this._width / w;\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n     */\n    _renderCanvas(renderer)\n    {\n        const context = renderer.context;\n        const transform = this.worldTransform;\n        const res = renderer.resolution;\n        const isTinted = this.tint !== 0xFFFFFF;\n        const texture = this._texture;\n\n        // Work out tinting\n        if (isTinted)\n        {\n            if (this._cachedTint !== this.tint)\n            {\n                // Tint has changed, need to update the tinted texture and use that instead\n\n                this._cachedTint = this.tint;\n\n                this._tintedTexture = CanvasTinter.getTintedTexture(this, this.tint);\n            }\n        }\n\n        const textureSource = !isTinted ? texture.baseTexture.source : this._tintedTexture;\n\n        if (!this._canvasUvs)\n        {\n            this._canvasUvs = [0, 0, 0, 0, 0, 0, 0, 0];\n        }\n\n        const vertices = this.vertices;\n        const uvs = this._canvasUvs;\n        const u0 = isTinted ? 0 : texture.frame.x;\n        const v0 = isTinted ? 0 : texture.frame.y;\n        const u1 = u0 + texture.frame.width;\n        const v1 = v0 + texture.frame.height;\n\n        uvs[0] = u0;\n        uvs[1] = u0 + this._leftWidth;\n        uvs[2] = u1 - this._rightWidth;\n        uvs[3] = u1;\n        uvs[4] = v0;\n        uvs[5] = v0 + this._topHeight;\n        uvs[6] = v1 - this._bottomHeight;\n        uvs[7] = v1;\n\n        for (let i = 0; i < 8; i++)\n        {\n            uvs[i] *= texture.baseTexture.resolution;\n        }\n\n        context.globalAlpha = this.worldAlpha;\n        renderer.setBlendMode(this.blendMode);\n\n        if (renderer.roundPixels)\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                (transform.tx * res) | 0,\n                (transform.ty * res) | 0\n            );\n        }\n        else\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                transform.tx * res,\n                transform.ty * res\n            );\n        }\n\n        for (let row = 0; row < 3; row++)\n        {\n            for (let col = 0; col < 3; col++)\n            {\n                const ind = (col * 2) + (row * 8);\n                const sw = Math.max(1, uvs[col + 1] - uvs[col]);\n                const sh = Math.max(1, uvs[row + 5] - uvs[row + 4]);\n                const dw = Math.max(1, vertices[ind + 10] - vertices[ind]);\n                const dh = Math.max(1, vertices[ind + 11] - vertices[ind + 1]);\n\n                context.drawImage(textureSource, uvs[col], uvs[row + 4], sw, sh,\n                    vertices[ind], vertices[ind + 1], dw, dh);\n            }\n        }\n    }\n\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get leftWidth()\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get rightWidth()\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get topHeight()\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get bottomHeight()\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    _refresh()\n    {\n        super._refresh();\n\n        const uvs = this.uvs;\n        const texture = this._texture;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.dirty++;\n\n        this.multiplyUvs();\n    }\n}\n"]},"metadata":{},"sourceType":"script"}