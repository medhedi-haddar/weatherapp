{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.premultiplyBlendMode = exports.BaseTextureCache = exports.TextureCache = exports.earcut = exports.mixins = exports.pluginTarget = exports.EventEmitter = exports.removeItems = exports.isMobile = undefined;\nexports.uid = uid;\nexports.hex2rgb = hex2rgb;\nexports.hex2string = hex2string;\nexports.rgb2hex = rgb2hex;\nexports.getResolutionOfUrl = getResolutionOfUrl;\nexports.decomposeDataUri = decomposeDataUri;\nexports.getUrlFileExtension = getUrlFileExtension;\nexports.getSvgSize = getSvgSize;\nexports.skipHello = skipHello;\nexports.sayHello = sayHello;\nexports.isWebGLSupported = isWebGLSupported;\nexports.sign = sign;\nexports.destroyTextureCache = destroyTextureCache;\nexports.clearTextureCache = clearTextureCache;\nexports.correctBlendMode = correctBlendMode;\nexports.premultiplyTint = premultiplyTint;\nexports.premultiplyRgba = premultiplyRgba;\nexports.premultiplyTintToRgba = premultiplyTintToRgba;\n\nvar _const = require('../const');\n\nvar _settings = require('../settings');\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _pluginTarget = require('./pluginTarget');\n\nvar _pluginTarget2 = _interopRequireDefault(_pluginTarget);\n\nvar _mixin = require('./mixin');\n\nvar mixins = _interopRequireWildcard(_mixin);\n\nvar _ismobilejs = require('ismobilejs');\n\nvar isMobile = _interopRequireWildcard(_ismobilejs);\n\nvar _removeArrayItems = require('remove-array-items');\n\nvar _removeArrayItems2 = _interopRequireDefault(_removeArrayItems);\n\nvar _mapPremultipliedBlendModes = require('./mapPremultipliedBlendModes');\n\nvar _mapPremultipliedBlendModes2 = _interopRequireDefault(_mapPremultipliedBlendModes);\n\nvar _earcut = require('earcut');\n\nvar _earcut2 = _interopRequireDefault(_earcut);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar nextUid = 0;\nvar saidHello = false;\n/**\n * Generalized convenience utilities for PIXI.\n * @example\n * // Extend PIXI's internal Event Emitter.\n * class MyEmitter extends PIXI.utils.EventEmitter {\n *   constructor() {\n *      super();\n *      console.log(\"Emitter created!\");\n *   }\n * }\n *\n * // Get info on current device\n * console.log(PIXI.utils.isMobile);\n *\n * // Convert hex color to string\n * console.log(PIXI.utils.hex2string(0xff00ff)); // returns: \"#ff00ff\"\n * @namespace PIXI.utils\n */\n\nexports.isMobile = isMobile;\nexports.removeItems = _removeArrayItems2.default;\nexports.EventEmitter = _eventemitter2.default;\nexports.pluginTarget = _pluginTarget2.default;\nexports.mixins = mixins;\nexports.earcut = _earcut2.default;\n/**\n * Gets the next unique identifier\n *\n * @memberof PIXI.utils\n * @function uid\n * @return {number} The next unique identifier to use.\n */\n\nfunction uid() {\n  return ++nextUid;\n}\n/**\n * Converts a hex color number to an [R, G, B] array\n *\n * @memberof PIXI.utils\n * @function hex2rgb\n * @param {number} hex - The number to convert\n * @param  {number[]} [out=[]] If supplied, this array will be used rather than returning a new one\n * @return {number[]} An array representing the [R, G, B] of the color.\n */\n\n\nfunction hex2rgb(hex, out) {\n  out = out || [];\n  out[0] = (hex >> 16 & 0xFF) / 255;\n  out[1] = (hex >> 8 & 0xFF) / 255;\n  out[2] = (hex & 0xFF) / 255;\n  return out;\n}\n/**\n * Converts a hex color number to a string.\n *\n * @memberof PIXI.utils\n * @function hex2string\n * @param {number} hex - Number in hex\n * @return {string} The string color.\n */\n\n\nfunction hex2string(hex) {\n  hex = hex.toString(16);\n  hex = '000000'.substr(0, 6 - hex.length) + hex;\n  return '#' + hex;\n}\n/**\n * Converts a color as an [R, G, B] array to a hex number\n *\n * @memberof PIXI.utils\n * @function rgb2hex\n * @param {number[]} rgb - rgb array\n * @return {number} The color number\n */\n\n\nfunction rgb2hex(rgb) {\n  return (rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + (rgb[2] * 255 | 0);\n}\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n *\n * @memberof PIXI.utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @return {number} resolution / device pixel ratio of an asset\n */\n\n\nfunction getResolutionOfUrl(url, defaultValue) {\n  var resolution = _settings2.default.RETINA_PREFIX.exec(url);\n\n  if (resolution) {\n    return parseFloat(resolution[1]);\n  }\n\n  return defaultValue !== undefined ? defaultValue : 1;\n}\n/**\n * Typedef for decomposeDataUri return object.\n *\n * @typedef {object} PIXI.utils~DecomposedDataUri\n * @property {mediaType} Media type, eg. `image`\n * @property {subType} Sub type, eg. `png`\n * @property {encoding} Data encoding, eg. `base64`\n * @property {data} The actual data\n */\n\n/**\n * Split a data URI into components. Returns undefined if\n * parameter `dataUri` is not a valid data URI.\n *\n * @memberof PIXI.utils\n * @function decomposeDataUri\n * @param {string} dataUri - the data URI to check\n * @return {PIXI.utils~DecomposedDataUri|undefined} The decomposed data uri or undefined\n */\n\n\nfunction decomposeDataUri(dataUri) {\n  var dataUriMatch = _const.DATA_URI.exec(dataUri);\n\n  if (dataUriMatch) {\n    return {\n      mediaType: dataUriMatch[1] ? dataUriMatch[1].toLowerCase() : undefined,\n      subType: dataUriMatch[2] ? dataUriMatch[2].toLowerCase() : undefined,\n      charset: dataUriMatch[3] ? dataUriMatch[3].toLowerCase() : undefined,\n      encoding: dataUriMatch[4] ? dataUriMatch[4].toLowerCase() : undefined,\n      data: dataUriMatch[5]\n    };\n  }\n\n  return undefined;\n}\n/**\n * Get type of the image by regexp for extension. Returns undefined for unknown extensions.\n *\n * @memberof PIXI.utils\n * @function getUrlFileExtension\n * @param {string} url - the image path\n * @return {string|undefined} image extension\n */\n\n\nfunction getUrlFileExtension(url) {\n  var extension = _const.URL_FILE_EXTENSION.exec(url);\n\n  if (extension) {\n    return extension[1].toLowerCase();\n  }\n\n  return undefined;\n}\n/**\n * Typedef for Size object.\n *\n * @typedef {object} PIXI.utils~Size\n * @property {width} Width component\n * @property {height} Height component\n */\n\n/**\n * Get size from an svg string using regexp.\n *\n * @memberof PIXI.utils\n * @function getSvgSize\n * @param {string} svgString - a serialized svg element\n * @return {PIXI.utils~Size|undefined} image extension\n */\n\n\nfunction getSvgSize(svgString) {\n  var sizeMatch = _const.SVG_SIZE.exec(svgString);\n\n  var size = {};\n\n  if (sizeMatch) {\n    size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));\n    size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));\n  }\n\n  return size;\n}\n/**\n * Skips the hello message of renderers that are created after this is run.\n *\n * @function skipHello\n * @memberof PIXI.utils\n */\n\n\nfunction skipHello() {\n  saidHello = true;\n}\n/**\n * Logs out the version and renderer information for this running instance of PIXI.\n * If you don't want to see this message you can run `PIXI.utils.skipHello()` before\n * creating your renderer. Keep in mind that doing that will forever makes you a jerk face.\n *\n * @static\n * @function sayHello\n * @memberof PIXI.utils\n * @param {string} type - The string renderer type to log.\n */\n\n\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n\n  if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n    var args = ['\\n %c %c %c PixiJS ' + _const.VERSION + ' - \\u2730 ' + type + ' \\u2730  %c  %c  http://www.pixijs.com/  %c %c \\u2665%c\\u2665%c\\u2665 \\n\\n', 'background: #ff66a5; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'color: #ff66a5; background: #030307; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'background: #ffc3dc; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;'];\n    window.console.log.apply(console, args);\n  } else if (window.console) {\n    window.console.log('PixiJS ' + _const.VERSION + ' - ' + type + ' - http://www.pixijs.com/');\n  }\n\n  saidHello = true;\n}\n/**\n * Helper for checking for webgl support\n *\n * @memberof PIXI.utils\n * @function isWebGLSupported\n * @return {boolean} is webgl supported\n */\n\n\nfunction isWebGLSupported() {\n  var contextOptions = {\n    stencil: true,\n    failIfMajorPerformanceCaveat: true\n  };\n\n  try {\n    if (!window.WebGLRenderingContext) {\n      return false;\n    }\n\n    var canvas = document.createElement('canvas');\n    var gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);\n    var success = !!(gl && gl.getContextAttributes().stencil);\n\n    if (gl) {\n      var loseContext = gl.getExtension('WEBGL_lose_context');\n\n      if (loseContext) {\n        loseContext.loseContext();\n      }\n    }\n\n    gl = null;\n    return success;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Returns sign of number\n *\n * @memberof PIXI.utils\n * @function sign\n * @param {number} n - the number to check the sign of\n * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive\n */\n\n\nfunction sign(n) {\n  if (n === 0) return 0;\n  return n < 0 ? -1 : 1;\n}\n/**\n * @todo Describe property usage\n *\n * @memberof PIXI.utils\n * @private\n */\n\n\nvar TextureCache = exports.TextureCache = Object.create(null);\n/**\n * @todo Describe property usage\n *\n * @memberof PIXI.utils\n * @private\n */\n\nvar BaseTextureCache = exports.BaseTextureCache = Object.create(null);\n/**\n * Destroys all texture in the cache\n *\n * @memberof PIXI.utils\n * @function destroyTextureCache\n */\n\nfunction destroyTextureCache() {\n  var key = void 0;\n\n  for (key in TextureCache) {\n    TextureCache[key].destroy();\n  }\n\n  for (key in BaseTextureCache) {\n    BaseTextureCache[key].destroy();\n  }\n}\n/**\n * Removes all textures from cache, but does not destroy them\n *\n * @memberof PIXI.utils\n * @function clearTextureCache\n */\n\n\nfunction clearTextureCache() {\n  var key = void 0;\n\n  for (key in TextureCache) {\n    delete TextureCache[key];\n  }\n\n  for (key in BaseTextureCache) {\n    delete BaseTextureCache[key];\n  }\n}\n/**\n * maps premultiply flag and blendMode to adjusted blendMode\n * @memberof PIXI.utils\n * @const premultiplyBlendMode\n * @type {Array<number[]>}\n */\n\n\nvar premultiplyBlendMode = exports.premultiplyBlendMode = (0, _mapPremultipliedBlendModes2.default)();\n/**\n * changes blendMode according to texture format\n *\n * @memberof PIXI.utils\n * @function correctBlendMode\n * @param {number} blendMode supposed blend mode\n * @param {boolean} premultiplied  whether source is premultiplied\n * @returns {number} true blend mode for this texture\n */\n\nfunction correctBlendMode(blendMode, premultiplied) {\n  return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\n/**\n * premultiplies tint\n *\n * @memberof PIXI.utils\n * @param {number} tint integet RGB\n * @param {number} alpha floating point alpha (0.0-1.0)\n * @returns {number} tint multiplied by alpha\n */\n\n\nfunction premultiplyTint(tint, alpha) {\n  if (alpha === 1.0) {\n    return (alpha * 255 << 24) + tint;\n  }\n\n  if (alpha === 0.0) {\n    return 0;\n  }\n\n  var R = tint >> 16 & 0xFF;\n  var G = tint >> 8 & 0xFF;\n  var B = tint & 0xFF;\n  R = R * alpha + 0.5 | 0;\n  G = G * alpha + 0.5 | 0;\n  B = B * alpha + 0.5 | 0;\n  return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;\n}\n/**\n * combines rgb and alpha to out array\n *\n * @memberof PIXI.utils\n * @param {Float32Array|number[]} rgb input rgb\n * @param {number} alpha alpha param\n * @param {Float32Array} [out] output\n * @param {boolean} [premultiply=true] do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\n\n\nfunction premultiplyRgba(rgb, alpha, out, premultiply) {\n  out = out || new Float32Array(4);\n\n  if (premultiply || premultiply === undefined) {\n    out[0] = rgb[0] * alpha;\n    out[1] = rgb[1] * alpha;\n    out[2] = rgb[2] * alpha;\n  } else {\n    out[0] = rgb[0];\n    out[1] = rgb[1];\n    out[2] = rgb[2];\n  }\n\n  out[3] = alpha;\n  return out;\n}\n/**\n * converts integer tint and float alpha to vec4 form, premultiplies by default\n *\n * @memberof PIXI.utils\n * @param {number} tint input tint\n * @param {number} alpha alpha param\n * @param {Float32Array} [out] output\n * @param {boolean} [premultiply=true] do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\n\n\nfunction premultiplyTintToRgba(tint, alpha, out, premultiply) {\n  out = out || new Float32Array(4);\n  out[0] = (tint >> 16 & 0xFF) / 255.0;\n  out[1] = (tint >> 8 & 0xFF) / 255.0;\n  out[2] = (tint & 0xFF) / 255.0;\n\n  if (premultiply || premultiply === undefined) {\n    out[0] *= alpha;\n    out[1] *= alpha;\n    out[2] *= alpha;\n  }\n\n  out[3] = alpha;\n  return out;\n}","map":{"version":3,"sources":["../../../src/core/utils/index.js"],"names":["mixins","isMobile","nextUid","saidHello","removeItems","EventEmitter","pluginTarget","earcut","uid","hex2rgb","out","hex","hex2string","rgb2hex","rgb","getResolutionOfUrl","resolution","parseFloat","defaultValue","decomposeDataUri","dataUriMatch","mediaType","subType","charset","encoding","data","getUrlFileExtension","extension","getSvgSize","sizeMatch","size","Math","skipHello","sayHello","navigator","args","window","isWebGLSupported","contextOptions","stencil","failIfMajorPerformanceCaveat","canvas","document","gl","success","loseContext","sign","n","TextureCache","Object","BaseTextureCache","destroyTextureCache","key","clearTextureCache","premultiplyBlendMode","correctBlendMode","premultiplied","premultiplyTint","alpha","R","tint","G","B","premultiplyRgba","premultiply","premultiplyTintToRgba"],"mappings":"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","sourcesContent":["import { DATA_URI, URL_FILE_EXTENSION, SVG_SIZE, VERSION } from '../const';\nimport settings from '../settings';\nimport EventEmitter from 'eventemitter3';\nimport pluginTarget from './pluginTarget';\nimport * as mixins from './mixin';\nimport * as isMobile from 'ismobilejs';\nimport removeItems from 'remove-array-items';\nimport mapPremultipliedBlendModes from './mapPremultipliedBlendModes';\nimport earcut from 'earcut';\n\nlet nextUid = 0;\nlet saidHello = false;\n\n/**\n * Generalized convenience utilities for PIXI.\n * @example\n * // Extend PIXI's internal Event Emitter.\n * class MyEmitter extends PIXI.utils.EventEmitter {\n *   constructor() {\n *      super();\n *      console.log(\"Emitter created!\");\n *   }\n * }\n *\n * // Get info on current device\n * console.log(PIXI.utils.isMobile);\n *\n * // Convert hex color to string\n * console.log(PIXI.utils.hex2string(0xff00ff)); // returns: \"#ff00ff\"\n * @namespace PIXI.utils\n */\nexport {\n    /**\n     * @see {@link https://github.com/kaimallea/isMobile}\n     *\n     * @memberof PIXI.utils\n     * @function isMobile\n     * @type {Object}\n     */\n    isMobile,\n\n    /**\n     * @see {@link https://github.com/mreinstein/remove-array-items}\n     *\n     * @memberof PIXI.utils\n     * @function removeItems\n     * @type {Object}\n     */\n    removeItems,\n    /**\n     * @see {@link https://github.com/primus/eventemitter3}\n     *\n     * @memberof PIXI.utils\n     * @class EventEmitter\n     * @type {EventEmitter}\n     */\n    EventEmitter,\n    /**\n     * @memberof PIXI.utils\n     * @function pluginTarget\n     * @type {mixin}\n     */\n    pluginTarget,\n    mixins,\n    /**\n     * @see {@link https://github.com/mapbox/earcut}\n     *\n     * @memberof PIXI.utils\n     * @function earcut\n     * @param {number[]} vertices - A flat array of vertice coordinates\n     * @param {number[]} [holes] - An array of hole indices\n     * @param {number} [dimensions=2] The number of coordinates per vertice in the input array\n     * @return {number[]} Triangulated polygon\n     */\n    earcut,\n};\n\n/**\n * Gets the next unique identifier\n *\n * @memberof PIXI.utils\n * @function uid\n * @return {number} The next unique identifier to use.\n */\nexport function uid()\n{\n    return ++nextUid;\n}\n\n/**\n * Converts a hex color number to an [R, G, B] array\n *\n * @memberof PIXI.utils\n * @function hex2rgb\n * @param {number} hex - The number to convert\n * @param  {number[]} [out=[]] If supplied, this array will be used rather than returning a new one\n * @return {number[]} An array representing the [R, G, B] of the color.\n */\nexport function hex2rgb(hex, out)\n{\n    out = out || [];\n\n    out[0] = ((hex >> 16) & 0xFF) / 255;\n    out[1] = ((hex >> 8) & 0xFF) / 255;\n    out[2] = (hex & 0xFF) / 255;\n\n    return out;\n}\n\n/**\n * Converts a hex color number to a string.\n *\n * @memberof PIXI.utils\n * @function hex2string\n * @param {number} hex - Number in hex\n * @return {string} The string color.\n */\nexport function hex2string(hex)\n{\n    hex = hex.toString(16);\n    hex = '000000'.substr(0, 6 - hex.length) + hex;\n\n    return `#${hex}`;\n}\n\n/**\n * Converts a color as an [R, G, B] array to a hex number\n *\n * @memberof PIXI.utils\n * @function rgb2hex\n * @param {number[]} rgb - rgb array\n * @return {number} The color number\n */\nexport function rgb2hex(rgb)\n{\n    return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0));\n}\n\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n *\n * @memberof PIXI.utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @return {number} resolution / device pixel ratio of an asset\n */\nexport function getResolutionOfUrl(url, defaultValue)\n{\n    const resolution = settings.RETINA_PREFIX.exec(url);\n\n    if (resolution)\n    {\n        return parseFloat(resolution[1]);\n    }\n\n    return defaultValue !== undefined ? defaultValue : 1;\n}\n\n/**\n * Typedef for decomposeDataUri return object.\n *\n * @typedef {object} PIXI.utils~DecomposedDataUri\n * @property {mediaType} Media type, eg. `image`\n * @property {subType} Sub type, eg. `png`\n * @property {encoding} Data encoding, eg. `base64`\n * @property {data} The actual data\n */\n\n/**\n * Split a data URI into components. Returns undefined if\n * parameter `dataUri` is not a valid data URI.\n *\n * @memberof PIXI.utils\n * @function decomposeDataUri\n * @param {string} dataUri - the data URI to check\n * @return {PIXI.utils~DecomposedDataUri|undefined} The decomposed data uri or undefined\n */\nexport function decomposeDataUri(dataUri)\n{\n    const dataUriMatch = DATA_URI.exec(dataUri);\n\n    if (dataUriMatch)\n    {\n        return {\n            mediaType: dataUriMatch[1] ? dataUriMatch[1].toLowerCase() : undefined,\n            subType: dataUriMatch[2] ? dataUriMatch[2].toLowerCase() : undefined,\n            charset: dataUriMatch[3] ? dataUriMatch[3].toLowerCase() : undefined,\n            encoding: dataUriMatch[4] ? dataUriMatch[4].toLowerCase() : undefined,\n            data: dataUriMatch[5],\n        };\n    }\n\n    return undefined;\n}\n\n/**\n * Get type of the image by regexp for extension. Returns undefined for unknown extensions.\n *\n * @memberof PIXI.utils\n * @function getUrlFileExtension\n * @param {string} url - the image path\n * @return {string|undefined} image extension\n */\nexport function getUrlFileExtension(url)\n{\n    const extension = URL_FILE_EXTENSION.exec(url);\n\n    if (extension)\n    {\n        return extension[1].toLowerCase();\n    }\n\n    return undefined;\n}\n\n/**\n * Typedef for Size object.\n *\n * @typedef {object} PIXI.utils~Size\n * @property {width} Width component\n * @property {height} Height component\n */\n\n/**\n * Get size from an svg string using regexp.\n *\n * @memberof PIXI.utils\n * @function getSvgSize\n * @param {string} svgString - a serialized svg element\n * @return {PIXI.utils~Size|undefined} image extension\n */\nexport function getSvgSize(svgString)\n{\n    const sizeMatch = SVG_SIZE.exec(svgString);\n    const size = {};\n\n    if (sizeMatch)\n    {\n        size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));\n        size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));\n    }\n\n    return size;\n}\n\n/**\n * Skips the hello message of renderers that are created after this is run.\n *\n * @function skipHello\n * @memberof PIXI.utils\n */\nexport function skipHello()\n{\n    saidHello = true;\n}\n\n/**\n * Logs out the version and renderer information for this running instance of PIXI.\n * If you don't want to see this message you can run `PIXI.utils.skipHello()` before\n * creating your renderer. Keep in mind that doing that will forever makes you a jerk face.\n *\n * @static\n * @function sayHello\n * @memberof PIXI.utils\n * @param {string} type - The string renderer type to log.\n */\nexport function sayHello(type)\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `\\n %c %c %c PixiJS ${VERSION} - ✰ ${type} ✰  %c  %c  http://www.pixijs.com/  %c %c ♥%c♥%c♥ \\n\\n`,\n            'background: #ff66a5; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'color: #ff66a5; background: #030307; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'background: #ffc3dc; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n        ];\n\n        window.console.log.apply(console, args);\n    }\n    else if (window.console)\n    {\n        window.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n\n/**\n * Helper for checking for webgl support\n *\n * @memberof PIXI.utils\n * @function isWebGLSupported\n * @return {boolean} is webgl supported\n */\nexport function isWebGLSupported()\n{\n    const contextOptions = { stencil: true, failIfMajorPerformanceCaveat: true };\n\n    try\n    {\n        if (!window.WebGLRenderingContext)\n        {\n            return false;\n        }\n\n        const canvas = document.createElement('canvas');\n        let gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);\n\n        const success = !!(gl && gl.getContextAttributes().stencil);\n\n        if (gl)\n        {\n            const loseContext = gl.getExtension('WEBGL_lose_context');\n\n            if (loseContext)\n            {\n                loseContext.loseContext();\n            }\n        }\n\n        gl = null;\n\n        return success;\n    }\n    catch (e)\n    {\n        return false;\n    }\n}\n\n/**\n * Returns sign of number\n *\n * @memberof PIXI.utils\n * @function sign\n * @param {number} n - the number to check the sign of\n * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive\n */\nexport function sign(n)\n{\n    if (n === 0) return 0;\n\n    return n < 0 ? -1 : 1;\n}\n\n/**\n * @todo Describe property usage\n *\n * @memberof PIXI.utils\n * @private\n */\nexport const TextureCache = Object.create(null);\n\n/**\n * @todo Describe property usage\n *\n * @memberof PIXI.utils\n * @private\n */\nexport const BaseTextureCache = Object.create(null);\n\n/**\n * Destroys all texture in the cache\n *\n * @memberof PIXI.utils\n * @function destroyTextureCache\n */\nexport function destroyTextureCache()\n{\n    let key;\n\n    for (key in TextureCache)\n    {\n        TextureCache[key].destroy();\n    }\n    for (key in BaseTextureCache)\n    {\n        BaseTextureCache[key].destroy();\n    }\n}\n\n/**\n * Removes all textures from cache, but does not destroy them\n *\n * @memberof PIXI.utils\n * @function clearTextureCache\n */\nexport function clearTextureCache()\n{\n    let key;\n\n    for (key in TextureCache)\n    {\n        delete TextureCache[key];\n    }\n    for (key in BaseTextureCache)\n    {\n        delete BaseTextureCache[key];\n    }\n}\n\n/**\n * maps premultiply flag and blendMode to adjusted blendMode\n * @memberof PIXI.utils\n * @const premultiplyBlendMode\n * @type {Array<number[]>}\n */\nexport const premultiplyBlendMode = mapPremultipliedBlendModes();\n\n/**\n * changes blendMode according to texture format\n *\n * @memberof PIXI.utils\n * @function correctBlendMode\n * @param {number} blendMode supposed blend mode\n * @param {boolean} premultiplied  whether source is premultiplied\n * @returns {number} true blend mode for this texture\n */\nexport function correctBlendMode(blendMode, premultiplied)\n{\n    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\n\n/**\n * premultiplies tint\n *\n * @memberof PIXI.utils\n * @param {number} tint integet RGB\n * @param {number} alpha floating point alpha (0.0-1.0)\n * @returns {number} tint multiplied by alpha\n */\nexport function premultiplyTint(tint, alpha)\n{\n    if (alpha === 1.0)\n    {\n        return (alpha * 255 << 24) + tint;\n    }\n    if (alpha === 0.0)\n    {\n        return 0;\n    }\n    let R = ((tint >> 16) & 0xFF);\n    let G = ((tint >> 8) & 0xFF);\n    let B = (tint & 0xFF);\n\n    R = ((R * alpha) + 0.5) | 0;\n    G = ((G * alpha) + 0.5) | 0;\n    B = ((B * alpha) + 0.5) | 0;\n\n    return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;\n}\n\n/**\n * combines rgb and alpha to out array\n *\n * @memberof PIXI.utils\n * @param {Float32Array|number[]} rgb input rgb\n * @param {number} alpha alpha param\n * @param {Float32Array} [out] output\n * @param {boolean} [premultiply=true] do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\nexport function premultiplyRgba(rgb, alpha, out, premultiply)\n{\n    out = out || new Float32Array(4);\n    if (premultiply || premultiply === undefined)\n    {\n        out[0] = rgb[0] * alpha;\n        out[1] = rgb[1] * alpha;\n        out[2] = rgb[2] * alpha;\n    }\n    else\n    {\n        out[0] = rgb[0];\n        out[1] = rgb[1];\n        out[2] = rgb[2];\n    }\n    out[3] = alpha;\n\n    return out;\n}\n\n/**\n * converts integer tint and float alpha to vec4 form, premultiplies by default\n *\n * @memberof PIXI.utils\n * @param {number} tint input tint\n * @param {number} alpha alpha param\n * @param {Float32Array} [out] output\n * @param {boolean} [premultiply=true] do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\nexport function premultiplyTintToRgba(tint, alpha, out, premultiply)\n{\n    out = out || new Float32Array(4);\n    out[0] = ((tint >> 16) & 0xFF) / 255.0;\n    out[1] = ((tint >> 8) & 0xFF) / 255.0;\n    out[2] = (tint & 0xFF) / 255.0;\n    if (premultiply || premultiply === undefined)\n    {\n        out[0] *= alpha;\n        out[1] *= alpha;\n        out[2] *= alpha;\n    }\n    out[3] = alpha;\n\n    return out;\n}\n"]},"metadata":{},"sourceType":"script"}