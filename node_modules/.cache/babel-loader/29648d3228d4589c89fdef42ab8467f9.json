{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _Rectangle = require('./Rectangle');\n\nvar _Rectangle2 = _interopRequireDefault(_Rectangle);\n\nvar _const = require('../../const');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * The Circle object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar Circle = function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this circle\n   * @param {number} [y=0] - The Y coordinate of the center of this circle\n   * @param {number} [radius=0] - The radius of the circle\n   */\n  function Circle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Circle);\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n\n    this.x = x;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.y = y;\n    /**\n     * @member {number}\n     * @default 0\n     */\n\n    this.radius = radius;\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.CIRC\n     * @see PIXI.SHAPES\n     */\n\n    this.type = _const.SHAPES.CIRC;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   *\n   * @return {PIXI.Circle} a copy of the Circle\n   */\n\n\n  Circle.prototype.clone = function clone() {\n    return new Circle(this.x, this.y, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Circle\n   */\n\n\n  Circle.prototype.contains = function contains(x, y) {\n    if (this.radius <= 0) {\n      return false;\n    }\n\n    var r2 = this.radius * this.radius;\n    var dx = this.x - x;\n    var dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  };\n  /**\n  * Returns the framing rectangle of the circle as a Rectangle object\n  *\n  * @return {PIXI.Rectangle} the framing rectangle\n  */\n\n\n  Circle.prototype.getBounds = function getBounds() {\n    return new _Rectangle2.default(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n  };\n\n  return Circle;\n}();\n\nexports.default = Circle;","map":{"version":3,"sources":["../../../../src/core/math/shapes/Circle.js"],"names":["Circle","x","y","radius","clone","contains","r2","dx","dy","getBounds"],"mappings":";;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;;;;;;;;;;AAEA;;;;;;;;IAMqBA,M;AAEjB;;;;;AAKA,WAAA,MAAA,GACA;AAAA,QADYC,CACZ,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADgB,CAChB;AAAA,QADmBC,CACnB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADuB,CACvB;AAAA,QAD0BC,MAC1B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADmC,CACnC;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AACI;;;;;;AAIA,SAAA,CAAA,GAAA,CAAA;AAEA;;;;;AAIA,SAAA,CAAA,GAAA,CAAA;AAEA;;;;;AAIA,SAAA,MAAA,GAAA,MAAA;AAEA;;;;;;;;;AAQA,SAAA,IAAA,GAAY,MAAA,CAAA,MAAA,CAAZ,IAAA;AACH;AAED;;;;;;;mBAKAC,K,oBACA;AACI,WAAO,IAAA,MAAA,CAAW,KAAX,CAAA,EAAmB,KAAnB,CAAA,EAA2B,KAAlC,MAAO,CAAP;;AAGJ;;;;;;;;;mBAOAC,Q,qBAASJ,C,EAAGC,C,EACZ;AACI,QAAI,KAAA,MAAA,IAAJ,CAAA,EACA;AACI,aAAA,KAAA;AACH;;AAED,QAAMI,EAAAA,GAAK,KAAA,MAAA,GAAc,KAAzB,MAAA;AACA,QAAIC,EAAAA,GAAM,KAAA,CAAA,GAAV,CAAA;AACA,QAAIC,EAAAA,GAAM,KAAA,CAAA,GAAV,CAAA;AAEAD,IAAAA,EAAAA,IAAAA,EAAAA;AACAC,IAAAA,EAAAA,IAAAA,EAAAA;AAEA,WAAQD,EAAAA,GAAAA,EAAAA,IAAR,EAAA;;AAGJ;;;;;;;mBAKAE,S,wBACA;AACI,WAAO,IAAA,WAAA,CAAA,OAAA,CAAc,KAAA,CAAA,GAAS,KAAvB,MAAA,EAAoC,KAAA,CAAA,GAAS,KAA7C,MAAA,EAA0D,KAAA,MAAA,GAA1D,CAAA,EAA2E,KAAA,MAAA,GAAlF,CAAO,CAAP;;;;;;kBA/EaT,M","sourcesContent":["import Rectangle from './Rectangle';\nimport { SHAPES } from '../../const';\n\n/**\n * The Circle object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n */\nexport default class Circle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this circle\n     * @param {number} [y=0] - The Y coordinate of the center of this circle\n     * @param {number} [radius=0] - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.CIRC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     *\n     * @return {PIXI.Circle} a copy of the Circle\n     */\n    clone()\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Circle\n     */\n    contains(x, y)\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n    * Returns the framing rectangle of the circle as a Rectangle object\n    *\n    * @return {PIXI.Rectangle} the framing rectangle\n    */\n    getBounds()\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}