{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nexports.default = function () {\n  return function spritesheetParser(resource, next) {\n    var imageResourceName = resource.name + '_image'; // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n\n    if (!resource.data || resource.type !== _resourceLoader.Resource.TYPE.JSON || !resource.data.frames || this.resources[imageResourceName]) {\n      next();\n      return;\n    }\n\n    var loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      metadata: resource.metadata.imageMetadata,\n      parentResource: resource\n    };\n    var resourcePath = getResourcePath(resource, this.baseUrl); // load the image for this sheet\n\n    this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {\n      if (res.error) {\n        next(res.error);\n        return;\n      }\n\n      var spritesheet = new _core.Spritesheet(res.texture.baseTexture, resource.data, resource.url);\n      spritesheet.parse(function () {\n        resource.spritesheet = spritesheet;\n        resource.textures = spritesheet.textures;\n        next();\n      });\n    });\n  };\n};\n\nexports.getResourcePath = getResourcePath;\n\nvar _resourceLoader = require('resource-loader');\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _core = require('../core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getResourcePath(resource, baseUrl) {\n  // Prepend url path unless the resource image is a data url\n  if (resource.isDataUrl) {\n    return resource.data.meta.image;\n  }\n\n  return _url2.default.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n}","map":{"version":3,"sources":["../../src/loaders/spritesheetParser.js"],"names":["imageResourceName","resource","next","loadOptions","crossOrigin","metadata","parentResource","resourcePath","getResourcePath","res","spritesheet"],"mappings":";;;;kBAIe,YACf;AACI,SAAO,SAAA,iBAAA,CAAA,QAAA,EAAA,IAAA,EACP;AACI,QAAMA,iBAAAA,GAAuBC,QAAAA,CAAvBD,IAAuBC,GAA7B,QAAA,CADJ,CAGI;;AACA,QAAI,CAACA,QAAAA,CAAD,IAAA,IACGA,QAAAA,CAAAA,IAAAA,KAAkB,eAAA,CAAA,QAAA,CAAA,IAAA,CADrB,IAAA,IAEG,CAACA,QAAAA,CAAAA,IAAAA,CAFJ,MAAA,IAGG,KAAA,SAAA,CAHP,iBAGO,CAHP,EAKA;AACIC,MAAAA,IAAAA;AAEA;AACH;;AAED,QAAMC,WAAAA,GAAc;AAChBC,MAAAA,WAAAA,EAAaH,QAAAA,CADG,WAAA;AAEhBI,MAAAA,QAAAA,EAAUJ,QAAAA,CAAAA,QAAAA,CAFM,aAAA;AAGhBK,MAAAA,cAAAA,EAAgBL;AAHA,KAApB;AAMA,QAAMM,YAAAA,GAAeC,eAAAA,CAAAA,QAAAA,EAA0B,KAA/C,OAAqBA,CAArB,CArBJ,CAuBI;;AACA,SAAA,GAAA,CAAA,iBAAA,EAAA,YAAA,EAAA,WAAA,EAAuD,SAAA,WAAA,CAAA,GAAA,EACvD;AACI,UAAIC,GAAAA,CAAJ,KAAA,EACA;AACIP,QAAAA,IAAAA,CAAKO,GAAAA,CAALP,KAAAA,CAAAA;AAEA;AACH;;AAED,UAAMQ,WAAAA,GAAc,IAAA,KAAA,CAAA,WAAA,CAChBD,GAAAA,CAAAA,OAAAA,CADgB,WAAA,EAEhBR,QAAAA,CAFgB,IAAA,EAGhBA,QAAAA,CAHJ,GAAoB,CAApB;AAMAS,MAAAA,WAAAA,CAAAA,KAAAA,CAAkB,YAClB;AACIT,QAAAA,QAAAA,CAAAA,WAAAA,GAAAA,WAAAA;AACAA,QAAAA,QAAAA,CAAAA,QAAAA,GAAoBS,WAAAA,CAApBT,QAAAA;AACAC,QAAAA,IAAAA;AAJJQ,OAAAA;AAfJ,KAAA;AAzBJ,GAAA;;;QAkDYF,e,GAAAA,e;;AAxDhB,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;;;;;AAsDO,SAAA,eAAA,CAAA,QAAA,EAAA,OAAA,EACP;AACI;AACA,MAAIP,QAAAA,CAAJ,SAAA,EACA;AACI,WAAOA,QAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAP,KAAA;AACH;;AAED,SAAO,KAAA,CAAA,OAAA,CAAA,OAAA,CAAYA,QAAAA,CAAAA,GAAAA,CAAAA,OAAAA,CAAAA,OAAAA,EAAZ,EAAYA,CAAZ,EAA+CA,QAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAtD,KAAO,CAAP;AACH","sourcesContent":["import { Resource } from 'resource-loader';\nimport url from 'url';\nimport { Spritesheet } from '../core';\n\nexport default function ()\n{\n    return function spritesheetParser(resource, next)\n    {\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== Resource.TYPE.JSON\n            || !resource.data.frames\n            || this.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = getResourcePath(resource, this.baseUrl);\n\n        // load the image for this sheet\n        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture.baseTexture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    };\n}\n\nexport function getResourcePath(resource, baseUrl)\n{\n    // Prepend url path unless the resource image is a data url\n    if (resource.isDataUrl)\n    {\n        return resource.data.meta.image;\n    }\n\n    return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n}\n"]},"metadata":{},"sourceType":"script"}