{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * A GraphicsData object.\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar GraphicsData = function () {\n  /**\n   *\n   * @param {number} lineWidth - the width of the line to draw\n   * @param {number} lineColor - the color of the line to draw\n   * @param {number} lineAlpha - the alpha of the line to draw\n   * @param {number} fillColor - the color of the fill\n   * @param {number} fillAlpha - the alpha of the fill\n   * @param {boolean} fill - whether or not the shape is filled with a colour\n   * @param {boolean} nativeLines - the method for drawing lines\n   * @param {PIXI.Circle|PIXI.Rectangle|PIXI.Ellipse|PIXI.Polygon} shape - The shape object to draw.\n   * @param {number} lineAlignment - the alignment of the line.\n   */\n  function GraphicsData(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, nativeLines, shape, lineAlignment) {\n    _classCallCheck(this, GraphicsData);\n    /**\n     * the width of the line to draw\n     * @member {number}\n     */\n\n\n    this.lineWidth = lineWidth;\n    /**\n     * The alignment of any lines drawn (0.5 = middle, 1 = outter, 0 = inner).\n     *\n     * @member {number}\n     * @default 0\n     */\n\n    this.lineAlignment = lineAlignment;\n    /**\n     * if true the liens will be draw using LINES instead of TRIANGLE_STRIP\n     * @member {boolean}\n     */\n\n    this.nativeLines = nativeLines;\n    /**\n     * the color of the line to draw\n     * @member {number}\n     */\n\n    this.lineColor = lineColor;\n    /**\n     * the alpha of the line to draw\n     * @member {number}\n     */\n\n    this.lineAlpha = lineAlpha;\n    /**\n     * cached tint of the line to draw\n     * @member {number}\n     * @private\n     */\n\n    this._lineTint = lineColor;\n    /**\n     * the color of the fill\n     * @member {number}\n     */\n\n    this.fillColor = fillColor;\n    /**\n     * the alpha of the fill\n     * @member {number}\n     */\n\n    this.fillAlpha = fillAlpha;\n    /**\n     * cached tint of the fill\n     * @member {number}\n     * @private\n     */\n\n    this._fillTint = fillColor;\n    /**\n     * whether or not the shape is filled with a colour\n     * @member {boolean}\n     */\n\n    this.fill = fill;\n    this.holes = [];\n    /**\n     * The shape object to draw.\n     * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n     */\n\n    this.shape = shape;\n    /**\n     * The type of the shape, see the Const.Shapes file for all the existing types,\n     * @member {number}\n     */\n\n    this.type = shape.type;\n  }\n  /**\n   * Creates a new GraphicsData object with the same values as this one.\n   *\n   * @return {PIXI.GraphicsData} Cloned GraphicsData object\n   */\n\n\n  GraphicsData.prototype.clone = function clone() {\n    return new GraphicsData(this.lineWidth, this.lineColor, this.lineAlpha, this.fillColor, this.fillAlpha, this.fill, this.nativeLines, this.shape, this.lineAlignment);\n  };\n  /**\n   * Adds a hole to the shape.\n   *\n   * @param {PIXI.Rectangle|PIXI.Circle} shape - The shape of the hole.\n   */\n\n\n  GraphicsData.prototype.addHole = function addHole(shape) {\n    this.holes.push(shape);\n  };\n  /**\n   * Destroys the Graphics data.\n   */\n\n\n  GraphicsData.prototype.destroy = function destroy() {\n    this.shape = null;\n    this.holes = null;\n  };\n\n  return GraphicsData;\n}();\n\nexports.default = GraphicsData;","map":{"version":3,"sources":["../../../src/core/graphics/GraphicsData.js"],"names":["GraphicsData","shape","clone","addHole","destroy"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAMqBA,Y;AAEjB;;;;;;;;;;;;AAYA,WAAA,YAAA,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,EAAA,WAAA,EAAA,KAAA,EAAA,aAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;AACI;;;;;;AAIA,SAAA,SAAA,GAAA,SAAA;AAEA;;;;;;;AAMA,SAAA,aAAA,GAAA,aAAA;AAEA;;;;;AAIA,SAAA,WAAA,GAAA,WAAA;AAEA;;;;;AAIA,SAAA,SAAA,GAAA,SAAA;AAEA;;;;;AAIA,SAAA,SAAA,GAAA,SAAA;AAEA;;;;;;AAKA,SAAA,SAAA,GAAA,SAAA;AAEA;;;;;AAIA,SAAA,SAAA,GAAA,SAAA;AAEA;;;;;AAIA,SAAA,SAAA,GAAA,SAAA;AAEA;;;;;;AAKA,SAAA,SAAA,GAAA,SAAA;AAEA;;;;;AAIA,SAAA,IAAA,GAAA,IAAA;AAEA,SAAA,KAAA,GAAA,EAAA;AAEA;;;;;AAIA,SAAA,KAAA,GAAA,KAAA;AAEA;;;;;AAIA,SAAA,IAAA,GAAYC,KAAAA,CAAZ,IAAA;AACH;AAED;;;;;;;yBAKAC,K,oBACA;AACI,WAAO,IAAA,YAAA,CACH,KADG,SAAA,EAEH,KAFG,SAAA,EAGH,KAHG,SAAA,EAIH,KAJG,SAAA,EAKH,KALG,SAAA,EAMH,KANG,IAAA,EAOH,KAPG,WAAA,EAQH,KARG,KAAA,EASH,KATJ,aAAO,CAAP;;AAaJ;;;;;;;yBAKAC,O,oBAAQF,K,EACR;AACI,SAAA,KAAA,CAAA,IAAA,CAAA,KAAA;;AAGJ;;;;;yBAGAG,O,sBACA;AACI,SAAA,KAAA,GAAA,IAAA;AACA,SAAA,KAAA,GAAA,IAAA;;;;;;kBAnIaJ,Y","sourcesContent":["/**\n * A GraphicsData object.\n *\n * @class\n * @memberof PIXI\n */\nexport default class GraphicsData\n{\n    /**\n     *\n     * @param {number} lineWidth - the width of the line to draw\n     * @param {number} lineColor - the color of the line to draw\n     * @param {number} lineAlpha - the alpha of the line to draw\n     * @param {number} fillColor - the color of the fill\n     * @param {number} fillAlpha - the alpha of the fill\n     * @param {boolean} fill - whether or not the shape is filled with a colour\n     * @param {boolean} nativeLines - the method for drawing lines\n     * @param {PIXI.Circle|PIXI.Rectangle|PIXI.Ellipse|PIXI.Polygon} shape - The shape object to draw.\n     * @param {number} lineAlignment - the alignment of the line.\n     */\n    constructor(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, nativeLines, shape, lineAlignment)\n    {\n        /**\n         * the width of the line to draw\n         * @member {number}\n         */\n        this.lineWidth = lineWidth;\n\n        /**\n         * The alignment of any lines drawn (0.5 = middle, 1 = outter, 0 = inner).\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.lineAlignment = lineAlignment;\n\n        /**\n         * if true the liens will be draw using LINES instead of TRIANGLE_STRIP\n         * @member {boolean}\n         */\n        this.nativeLines = nativeLines;\n\n        /**\n         * the color of the line to draw\n         * @member {number}\n         */\n        this.lineColor = lineColor;\n\n        /**\n         * the alpha of the line to draw\n         * @member {number}\n         */\n        this.lineAlpha = lineAlpha;\n\n        /**\n         * cached tint of the line to draw\n         * @member {number}\n         * @private\n         */\n        this._lineTint = lineColor;\n\n        /**\n         * the color of the fill\n         * @member {number}\n         */\n        this.fillColor = fillColor;\n\n        /**\n         * the alpha of the fill\n         * @member {number}\n         */\n        this.fillAlpha = fillAlpha;\n\n        /**\n         * cached tint of the fill\n         * @member {number}\n         * @private\n         */\n        this._fillTint = fillColor;\n\n        /**\n         * whether or not the shape is filled with a colour\n         * @member {boolean}\n         */\n        this.fill = fill;\n\n        this.holes = [];\n\n        /**\n         * The shape object to draw.\n         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n         */\n        this.shape = shape;\n\n        /**\n         * The type of the shape, see the Const.Shapes file for all the existing types,\n         * @member {number}\n         */\n        this.type = shape.type;\n    }\n\n    /**\n     * Creates a new GraphicsData object with the same values as this one.\n     *\n     * @return {PIXI.GraphicsData} Cloned GraphicsData object\n     */\n    clone()\n    {\n        return new GraphicsData(\n            this.lineWidth,\n            this.lineColor,\n            this.lineAlpha,\n            this.fillColor,\n            this.fillAlpha,\n            this.fill,\n            this.nativeLines,\n            this.shape,\n            this.lineAlignment\n        );\n    }\n\n    /**\n     * Adds a hole to the shape.\n     *\n     * @param {PIXI.Rectangle|PIXI.Circle} shape - The shape of the hole.\n     */\n    addHole(shape)\n    {\n        this.holes.push(shape);\n    }\n\n    /**\n     * Destroys the Graphics data.\n     */\n    destroy()\n    {\n        this.shape = null;\n        this.holes = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}