{"ast":null,"code":"/**\n * Helper class to create a WebGL Texture\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param width {number} the width of the texture\n * @param height {number} the height of the texture\n * @param format {number} the pixel format of the texture. defaults to gl.RGBA\n * @param type {number} the gl type of the texture. defaults to gl.UNSIGNED_BYTE\n */\nvar Texture = function (gl, width, height, format, type) {\n  /**\n   * The current WebGL rendering context\n   *\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl;\n  /**\n   * The WebGL texture\n   *\n   * @member {WebGLTexture}\n   */\n\n  this.texture = gl.createTexture();\n  /**\n   * If mipmapping was used for this texture, enable and disable with enableMipmap()\n   *\n   * @member {Boolean}\n   */\n  // some settings..\n\n  this.mipmap = false;\n  /**\n   * Set to true to enable pre-multiplied alpha\n   *\n   * @member {Boolean}\n   */\n\n  this.premultiplyAlpha = false;\n  /**\n   * The width of texture\n   *\n   * @member {Number}\n   */\n\n  this.width = width || -1;\n  /**\n   * The height of texture\n   *\n   * @member {Number}\n   */\n\n  this.height = height || -1;\n  /**\n   * The pixel format of the texture. defaults to gl.RGBA\n   *\n   * @member {Number}\n   */\n\n  this.format = format || gl.RGBA;\n  /**\n   * The gl type of the texture. defaults to gl.UNSIGNED_BYTE\n   *\n   * @member {Number}\n   */\n\n  this.type = type || gl.UNSIGNED_BYTE;\n};\n/**\n * Uploads this texture to the GPU\n * @param source {HTMLImageElement|ImageData|HTMLVideoElement} the source image of the texture\n */\n\n\nTexture.prototype.upload = function (source) {\n  this.bind();\n  var gl = this.gl;\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n  var newWidth = source.videoWidth || source.width;\n  var newHeight = source.videoHeight || source.height;\n\n  if (newHeight !== this.height || newWidth !== this.width) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, source);\n  } else {\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.format, this.type, source);\n  } // if the source is a video, we need to use the videoWidth / videoHeight properties as width / height will be incorrect.\n\n\n  this.width = newWidth;\n  this.height = newHeight;\n};\n\nvar FLOATING_POINT_AVAILABLE = false;\n/**\n * Use a data source and uploads this texture to the GPU\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\n\nTexture.prototype.uploadData = function (data, width, height) {\n  this.bind();\n  var gl = this.gl;\n\n  if (data instanceof Float32Array) {\n    if (!FLOATING_POINT_AVAILABLE) {\n      var ext = gl.getExtension(\"OES_texture_float\");\n\n      if (ext) {\n        FLOATING_POINT_AVAILABLE = true;\n      } else {\n        throw new Error('floating point textures not available');\n      }\n    }\n\n    this.type = gl.FLOAT;\n  } else {\n    // TODO support for other types\n    this.type = this.type || gl.UNSIGNED_BYTE;\n  } // what type of data?\n\n\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n  if (width !== this.width || height !== this.height) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, this.type, data || null);\n  } else {\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, this.format, this.type, data || null);\n  }\n\n  this.width = width;\n  this.height = height; //\ttexSubImage2D\n};\n/**\n * Binds the texture\n * @param  location\n */\n\n\nTexture.prototype.bind = function (location) {\n  var gl = this.gl;\n\n  if (location !== undefined) {\n    gl.activeTexture(gl.TEXTURE0 + location);\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, this.texture);\n};\n/**\n * Unbinds the texture\n */\n\n\nTexture.prototype.unbind = function () {\n  var gl = this.gl;\n  gl.bindTexture(gl.TEXTURE_2D, null);\n};\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\n\n\nTexture.prototype.minFilter = function (linear) {\n  var gl = this.gl;\n  this.bind();\n\n  if (this.mipmap) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n  } else {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n  }\n};\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\n\n\nTexture.prototype.magFilter = function (linear) {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n};\n/**\n * Enables mipmapping\n */\n\n\nTexture.prototype.enableMipmap = function () {\n  var gl = this.gl;\n  this.bind();\n  this.mipmap = true;\n  gl.generateMipmap(gl.TEXTURE_2D);\n};\n/**\n * Enables linear filtering\n */\n\n\nTexture.prototype.enableLinearScaling = function () {\n  this.minFilter(true);\n  this.magFilter(true);\n};\n/**\n * Enables nearest neighbour interpolation\n */\n\n\nTexture.prototype.enableNearestScaling = function () {\n  this.minFilter(false);\n  this.magFilter(false);\n};\n/**\n * Enables clamping on the texture so WebGL will not repeat it\n */\n\n\nTexture.prototype.enableWrapClamp = function () {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n};\n/**\n * Enable tiling on the texture\n */\n\n\nTexture.prototype.enableWrapRepeat = function () {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n};\n\nTexture.prototype.enableWrapMirrorRepeat = function () {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n};\n/**\n * Destroys this texture\n */\n\n\nTexture.prototype.destroy = function () {\n  var gl = this.gl; //TODO\n\n  gl.deleteTexture(this.texture);\n};\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param source {HTMLImageElement|ImageData} the source image of the texture\n * @param premultiplyAlpha {Boolean} If we want to use pre-multiplied alpha\n */\n\n\nTexture.fromSource = function (gl, source, premultiplyAlpha) {\n  var texture = new Texture(gl);\n  texture.premultiplyAlpha = premultiplyAlpha || false;\n  texture.upload(source);\n  return texture;\n};\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\n\n\nTexture.fromData = function (gl, data, width, height) {\n  //console.log(data, width, height);\n  var texture = new Texture(gl);\n  texture.uploadData(data, width, height);\n  return texture;\n};\n\nmodule.exports = Texture;","map":{"version":3,"sources":["/Users/mohamedelhedihaddar/weather-app/node_modules/pixi-gl-core/src/GLTexture.js"],"names":["Texture","gl","width","height","format","type","texture","createTexture","mipmap","premultiplyAlpha","RGBA","UNSIGNED_BYTE","prototype","upload","source","bind","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","newWidth","videoWidth","newHeight","videoHeight","texImage2D","TEXTURE_2D","texSubImage2D","FLOATING_POINT_AVAILABLE","uploadData","data","Float32Array","ext","getExtension","Error","FLOAT","location","undefined","activeTexture","TEXTURE0","bindTexture","unbind","minFilter","linear","texParameteri","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR","NEAREST","magFilter","TEXTURE_MAG_FILTER","enableMipmap","generateMipmap","enableLinearScaling","enableNearestScaling","enableWrapClamp","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enableWrapRepeat","REPEAT","enableWrapMirrorRepeat","MIRRORED_REPEAT","destroy","deleteTexture","fromSource","fromData","module","exports"],"mappings":"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","sourcesContent":["\n/**\n * Helper class to create a WebGL Texture\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param width {number} the width of the texture\n * @param height {number} the height of the texture\n * @param format {number} the pixel format of the texture. defaults to gl.RGBA\n * @param type {number} the gl type of the texture. defaults to gl.UNSIGNED_BYTE\n */\nvar Texture = function(gl, width, height, format, type)\n{\n\t/**\n\t * The current WebGL rendering context\n\t *\n\t * @member {WebGLRenderingContext}\n\t */\n\tthis.gl = gl;\n\n\n\t/**\n\t * The WebGL texture\n\t *\n\t * @member {WebGLTexture}\n\t */\n\tthis.texture = gl.createTexture();\n\n\t/**\n\t * If mipmapping was used for this texture, enable and disable with enableMipmap()\n\t *\n\t * @member {Boolean}\n\t */\n\t// some settings..\n\tthis.mipmap = false;\n\n\n\t/**\n\t * Set to true to enable pre-multiplied alpha\n\t *\n\t * @member {Boolean}\n\t */\n\tthis.premultiplyAlpha = false;\n\n\t/**\n\t * The width of texture\n\t *\n\t * @member {Number}\n\t */\n\tthis.width = width || -1;\n\t/**\n\t * The height of texture\n\t *\n\t * @member {Number}\n\t */\n\tthis.height = height || -1;\n\n\t/**\n\t * The pixel format of the texture. defaults to gl.RGBA\n\t *\n\t * @member {Number}\n\t */\n\tthis.format = format || gl.RGBA;\n\n\t/**\n\t * The gl type of the texture. defaults to gl.UNSIGNED_BYTE\n\t *\n\t * @member {Number}\n\t */\n\tthis.type = type || gl.UNSIGNED_BYTE;\n\n\n};\n\n/**\n * Uploads this texture to the GPU\n * @param source {HTMLImageElement|ImageData|HTMLVideoElement} the source image of the texture\n */\nTexture.prototype.upload = function(source)\n{\n\tthis.bind();\n\n\tvar gl = this.gl;\n\n\n\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n\tvar newWidth = source.videoWidth || source.width;\n\tvar newHeight = source.videoHeight || source.height;\n\n\tif(newHeight !== this.height || newWidth !== this.width)\n\t{\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, source);\n\t}\n\telse\n\t{\n    \tgl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.format, this.type, source);\n\t}\n\n\t// if the source is a video, we need to use the videoWidth / videoHeight properties as width / height will be incorrect.\n\tthis.width = newWidth;\n\tthis.height = newHeight;\n\n};\n\nvar FLOATING_POINT_AVAILABLE = false;\n\n/**\n * Use a data source and uploads this texture to the GPU\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.prototype.uploadData = function(data, width, height)\n{\n\tthis.bind();\n\n\tvar gl = this.gl;\n\n\n\tif(data instanceof Float32Array)\n\t{\n\t\tif(!FLOATING_POINT_AVAILABLE)\n\t\t{\n\t\t\tvar ext = gl.getExtension(\"OES_texture_float\");\n\n\t\t\tif(ext)\n\t\t\t{\n\t\t\t\tFLOATING_POINT_AVAILABLE = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Error('floating point textures not available');\n\t\t\t}\n\t\t}\n\n\t\tthis.type = gl.FLOAT;\n\t}\n\telse\n\t{\n\t\t// TODO support for other types\n\t\tthis.type = this.type || gl.UNSIGNED_BYTE;\n\t}\n\n\t// what type of data?\n\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n\n\tif(width !== this.width || height !== this.height)\n\t{\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format,  width, height, 0, this.format, this.type, data || null);\n\t}\n\telse\n\t{\n\t\tgl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, this.format, this.type, data || null);\n\t}\n\n\tthis.width = width;\n\tthis.height = height;\n\n\n//\ttexSubImage2D\n};\n\n/**\n * Binds the texture\n * @param  location\n */\nTexture.prototype.bind = function(location)\n{\n\tvar gl = this.gl;\n\n\tif(location !== undefined)\n\t{\n\t\tgl.activeTexture(gl.TEXTURE0 + location);\n\t}\n\n\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n};\n\n/**\n * Unbinds the texture\n */\nTexture.prototype.unbind = function()\n{\n\tvar gl = this.gl;\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.minFilter = function( linear )\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tif(this.mipmap)\n\t{\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n\t}\n\telse\n\t{\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n\t}\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.magFilter = function( linear )\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n};\n\n/**\n * Enables mipmapping\n */\nTexture.prototype.enableMipmap = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tthis.mipmap = true;\n\n\tgl.generateMipmap(gl.TEXTURE_2D);\n};\n\n/**\n * Enables linear filtering\n */\nTexture.prototype.enableLinearScaling = function()\n{\n\tthis.minFilter(true);\n\tthis.magFilter(true);\n};\n\n/**\n * Enables nearest neighbour interpolation\n */\nTexture.prototype.enableNearestScaling = function()\n{\n\tthis.minFilter(false);\n\tthis.magFilter(false);\n};\n\n/**\n * Enables clamping on the texture so WebGL will not repeat it\n */\nTexture.prototype.enableWrapClamp = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n};\n\n/**\n * Enable tiling on the texture\n */\nTexture.prototype.enableWrapRepeat = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n};\n\nTexture.prototype.enableWrapMirrorRepeat = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n};\n\n\n/**\n * Destroys this texture\n */\nTexture.prototype.destroy = function()\n{\n\tvar gl = this.gl;\n\t//TODO\n\tgl.deleteTexture(this.texture);\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param source {HTMLImageElement|ImageData} the source image of the texture\n * @param premultiplyAlpha {Boolean} If we want to use pre-multiplied alpha\n */\nTexture.fromSource = function(gl, source, premultiplyAlpha)\n{\n\tvar texture = new Texture(gl);\n\ttexture.premultiplyAlpha = premultiplyAlpha || false;\n\ttexture.upload(source);\n\n\treturn texture;\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.fromData = function(gl, data, width, height)\n{\n\t//console.log(data, width, height);\n\tvar texture = new Texture(gl);\n\ttexture.uploadData(data, width, height);\n\n\treturn texture;\n};\n\n\nmodule.exports = Texture;\n"]},"metadata":{},"sourceType":"script"}