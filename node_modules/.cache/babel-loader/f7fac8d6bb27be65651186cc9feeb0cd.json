{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = generateMultiTextureShader;\n\nvar _Shader = require('../../Shader');\n\nvar _Shader2 = _interopRequireDefault(_Shader);\n\nvar _path = require('path');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar fragTemplate = ['varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'varying float vTextureId;', 'uniform sampler2D uSamplers[%count%];', 'void main(void){', 'vec4 color;', '%forloop%', 'gl_FragColor = color * vColor;', '}'].join('\\n');\n\nfunction generateMultiTextureShader(gl, maxTextures) {\n  var vertexSrc = 'precision highp float;\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\nvarying float vTextureId;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vTextureId = aTextureId;\\n    vColor = aColor;\\n}\\n';\n  var fragmentSrc = fragTemplate;\n  fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n  fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n  var shader = new _Shader2.default(gl, vertexSrc, fragmentSrc);\n  var sampleValues = [];\n\n  for (var i = 0; i < maxTextures; i++) {\n    sampleValues[i] = i;\n  }\n\n  shader.bind();\n  shader.uniforms.uSamplers = sampleValues;\n  return shader;\n}\n\nfunction generateSampleSrc(maxTextures) {\n  var src = '';\n  src += '\\n';\n  src += '\\n';\n\n  for (var i = 0; i < maxTextures; i++) {\n    if (i > 0) {\n      src += '\\nelse ';\n    }\n\n    if (i < maxTextures - 1) {\n      src += 'if(vTextureId < ' + i + '.5)';\n    }\n\n    src += '\\n{';\n    src += '\\n\\tcolor = texture2D(uSamplers[' + i + '], vTextureCoord);';\n    src += '\\n}';\n  }\n\n  src += '\\n';\n  src += '\\n';\n  return src;\n}","map":{"version":3,"sources":["../../../../src/core/sprites/webgl/generateMultiTextureShader.js"],"names":["fragTemplate","generateMultiTextureShader","vertexSrc","fragmentSrc","generateSampleSrc","shader","sampleValues","i","src","maxTextures"],"mappings":";;;kBAiBwBC,0B;;AAjBxB,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;;;;;;;AAEA,IAAMD,YAAAA,GAAe,CAAA,6BAAA,EAAA,sBAAA,EAAA,2BAAA,EAAA,uCAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,WAAA,EAAA,gCAAA,EAAA,GAAA,EAAA,IAAA,CAArB,IAAqB,CAArB;;AAae,SAAA,0BAAA,CAAA,EAAA,EAAA,WAAA,EACf;AACI,MAAME,SAAAA,GAAN,ycAAA;AACA,MAAIC,WAAAA,GAAJ,YAAA;AAEAA,EAAAA,WAAAA,GAAcA,WAAAA,CAAAA,OAAAA,CAAAA,WAAAA,EAAdA,WAAcA,CAAdA;AACAA,EAAAA,WAAAA,GAAcA,WAAAA,CAAAA,OAAAA,CAAAA,aAAAA,EAAmCC,iBAAAA,CAAjDD,WAAiDC,CAAnCD,CAAdA;AAEA,MAAME,MAAAA,GAAS,IAAA,QAAA,CAAA,OAAA,CAAA,EAAA,EAAA,SAAA,EAAf,WAAe,CAAf;AAEA,MAAMC,YAAAA,GAAN,EAAA;;AAEA,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,WAAA,EAAiCA,CAAjC,EAAA,EACA;AACID,IAAAA,YAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA;AACH;;AAEDD,EAAAA,MAAAA,CAAAA,IAAAA;AACAA,EAAAA,MAAAA,CAAAA,QAAAA,CAAAA,SAAAA,GAAAA,YAAAA;AAEA,SAAA,MAAA;AACH;;AAED,SAAA,iBAAA,CAAA,WAAA,EACA;AACI,MAAIG,GAAAA,GAAJ,EAAA;AAEAA,EAAAA,GAAAA,IAAAA,IAAAA;AACAA,EAAAA,GAAAA,IAAAA,IAAAA;;AAEA,OAAK,IAAID,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,WAAA,EAAiCA,CAAjC,EAAA,EACA;AACI,QAAIA,CAAAA,GAAJ,CAAA,EACA;AACIC,MAAAA,GAAAA,IAAAA,SAAAA;AACH;;AAED,QAAID,CAAAA,GAAIE,WAAAA,GAAR,CAAA,EACA;AACID,MAAAA,GAAAA,IAAAA,qBAAAA,CAAAA,GAAAA,KAAAA;AACH;;AAEDA,IAAAA,GAAAA,IAAAA,KAAAA;AACAA,IAAAA,GAAAA,IAAAA,qCAAAA,CAAAA,GAAAA,oBAAAA;AACAA,IAAAA,GAAAA,IAAAA,KAAAA;AACH;;AAEDA,EAAAA,GAAAA,IAAAA,IAAAA;AACAA,EAAAA,GAAAA,IAAAA,IAAAA;AAEA,SAAA,GAAA;AACH","sourcesContent":["import Shader from '../../Shader';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst fragTemplate = [\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n    'varying float vTextureId;',\n    'uniform sampler2D uSamplers[%count%];',\n\n    'void main(void){',\n    'vec4 color;',\n    '%forloop%',\n    'gl_FragColor = color * vColor;',\n    '}',\n].join('\\n');\n\nexport default function generateMultiTextureShader(gl, maxTextures)\n{\n    const vertexSrc = readFileSync(join(__dirname, './texture.vert'), 'utf8');\n    let fragmentSrc = fragTemplate;\n\n    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    const shader = new Shader(gl, vertexSrc, fragmentSrc);\n\n    const sampleValues = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    shader.bind();\n    shader.uniforms.uSamplers = sampleValues;\n\n    return shader;\n}\n\nfunction generateSampleSrc(maxTextures)\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(vTextureId < ${i}.5)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n"]},"metadata":{},"sourceType":"script"}