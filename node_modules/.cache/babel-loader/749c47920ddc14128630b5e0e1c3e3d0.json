{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _BasePrepare2 = require('../BasePrepare');\n\nvar _BasePrepare3 = _interopRequireDefault(_BasePrepare2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CANVAS_START_SIZE = 16;\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\n\nvar CanvasPrepare = function (_BasePrepare) {\n  _inherits(CanvasPrepare, _BasePrepare);\n  /**\n   * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n   */\n\n\n  function CanvasPrepare(renderer) {\n    _classCallCheck(this, CanvasPrepare);\n\n    var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));\n\n    _this.uploadHookHelper = _this;\n    /**\n    * An offline canvas to render textures to\n    * @type {HTMLCanvasElement}\n    * @private\n    */\n\n    _this.canvas = document.createElement('canvas');\n    _this.canvas.width = CANVAS_START_SIZE;\n    _this.canvas.height = CANVAS_START_SIZE;\n    /**\n     * The context to the canvas\n    * @type {CanvasRenderingContext2D}\n    * @private\n    */\n\n    _this.ctx = _this.canvas.getContext('2d'); // Add textures to upload\n\n    _this.registerUploadHook(uploadBaseTextures);\n\n    return _this;\n  }\n  /**\n   * Destroys the plugin, don't use after this.\n   *\n   */\n\n\n  CanvasPrepare.prototype.destroy = function destroy() {\n    _BasePrepare.prototype.destroy.call(this);\n\n    this.ctx = null;\n    this.canvas = null;\n  };\n\n  return CanvasPrepare;\n}(_BasePrepare3.default);\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\n\nexports.default = CanvasPrepare;\n\nfunction uploadBaseTextures(prepare, item) {\n  if (item instanceof core.BaseTexture) {\n    var image = item.source; // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n    // So if the width or height is equal to zero then use the canvas size\n    // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n\n    var imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n    var imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height); // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n    // A smaller draw can be faster.\n\n    prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n    return true;\n  }\n\n  return false;\n}\n\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);","map":{"version":3,"sources":["../../../src/prepare/canvas/CanvasPrepare.js"],"names":["core","CANVAS_START_SIZE","CanvasPrepare","document","destroy","item","image","imageWidth","prepare","Math","imageHeight"],"mappings":";;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;IAAYA,I;;AACZ,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMC,iBAAAA,GAAN,EAAA;AAEA;;;;;;;;;;;;;IAYqBC,a;;AAEjB;;;;;AAGA,WAAA,aAAA,CAAA,QAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;AAAA,QAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EACI,YAAA,CAAA,IAAA,CAAA,IAAA,EADJ,QACI,CADJ,CAAA;;AAGI,IAAA,KAAA,CAAA,gBAAA,GAAA,KAAA;AAEA;;;;;;AAKA,IAAA,KAAA,CAAA,MAAA,GAAcC,QAAAA,CAAAA,aAAAA,CAAd,QAAcA,CAAd;AACA,IAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,iBAAA;AACA,IAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,iBAAA;AAEA;;;;;;AAKA,IAAA,KAAA,CAAA,GAAA,GAAW,KAAA,CAAA,MAAA,CAAA,UAAA,CAAX,IAAW,CAAX,CAnBJ,CAqBI;;AACA,IAAA,KAAA,CAAA,kBAAA,CAAA,kBAAA;;AAtBJ,WAAA,KAAA;AAuBC;AAED;;;;;;0BAIAC,O,sBACA;AACI,IAAA,YAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA;;AACA,SAAA,GAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,IAAA;;;;;AAKR;;;;;;;;;;kBA5CqBF,a;;AAoDrB,SAAA,kBAAA,CAAA,OAAA,EAAA,IAAA,EACA;AACI,MAAIG,IAAAA,YAAgBL,IAAAA,CAApB,WAAA,EACA;AACI,QAAMM,KAAAA,GAAQD,IAAAA,CAAd,MAAA,CADJ,CAGI;AACA;AACA;;AACA,QAAME,UAAAA,GAAaD,KAAAA,CAAAA,KAAAA,KAAAA,CAAAA,GAAoBE,OAAAA,CAAAA,MAAAA,CAApBF,KAAAA,GAA2CG,IAAAA,CAAAA,GAAAA,CAASD,OAAAA,CAAAA,MAAAA,CAATC,KAAAA,EAA+BH,KAAAA,CAA7F,KAA8DG,CAA9D;AACA,QAAMC,WAAAA,GAAcJ,KAAAA,CAAAA,MAAAA,KAAAA,CAAAA,GAAqBE,OAAAA,CAAAA,MAAAA,CAArBF,MAAAA,GAA6CG,IAAAA,CAAAA,GAAAA,CAASD,OAAAA,CAAAA,MAAAA,CAATC,MAAAA,EAAgCH,KAAAA,CAAjG,MAAiEG,CAAjE,CAPJ,CASI;AACA;;AACAD,IAAAA,OAAAA,CAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAkEA,OAAAA,CAAAA,MAAAA,CAAlEA,KAAAA,EAAwFA,OAAAA,CAAAA,MAAAA,CAAxFA,MAAAA;AAEA,WAAA,IAAA;AACH;;AAED,SAAA,KAAA;AACH;;AAEDR,IAAAA,CAAAA,cAAAA,CAAAA,cAAAA,CAAAA,SAAAA,EAAAA,aAAAA","sourcesContent":["import * as core from '../../core';\nimport BasePrepare from '../BasePrepare';\n\nconst CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nexport default class CanvasPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this;\n\n        /**\n        * An offline canvas to render textures to\n        * @type {HTMLCanvasElement}\n        * @private\n        */\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = CANVAS_START_SIZE;\n        this.canvas.height = CANVAS_START_SIZE;\n\n        /**\n         * The context to the canvas\n        * @type {CanvasRenderingContext2D}\n        * @private\n        */\n        this.ctx = this.canvas.getContext('2d');\n\n        // Add textures to upload\n        this.registerUploadHook(uploadBaseTextures);\n    }\n\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    destroy()\n    {\n        super.destroy();\n        this.ctx = null;\n        this.canvas = null;\n    }\n\n}\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(prepare, item)\n{\n    if (item instanceof core.BaseTexture)\n    {\n        const image = item.source;\n\n        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n        // So if the width or height is equal to zero then use the canvas size\n        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n        const imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n        const imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n        // A smaller draw can be faster.\n        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);\n"]},"metadata":{},"sourceType":"script"}