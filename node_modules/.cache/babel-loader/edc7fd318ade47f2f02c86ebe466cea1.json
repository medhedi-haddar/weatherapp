{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _core = require('../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _ismobilejs = require('ismobilejs');\n\nvar _ismobilejs2 = _interopRequireDefault(_ismobilejs);\n\nvar _accessibleTarget = require('./accessibleTarget');\n\nvar _accessibleTarget2 = _interopRequireDefault(_accessibleTarget);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // add some extra variables to the container..\n\n\ncore.utils.mixins.delayMixin(core.DisplayObject.prototype, _accessibleTarget2.default);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen\n * readers. This is very important as it can possibly help people with disabilities access pixi\n * content.\n *\n * Much like interaction any DisplayObject can be made accessible. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.accessibility\n *\n * @class\n * @memberof PIXI.accessibility\n */\n\nvar AccessibilityManager = function () {\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n   */\n  function AccessibilityManager(renderer) {\n    _classCallCheck(this, AccessibilityManager);\n\n    if ((_ismobilejs2.default.tablet || _ismobilejs2.default.phone) && !navigator.isCocoonJS) {\n      this.createTouchHook();\n    } // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n\n\n    var div = document.createElement('div');\n    div.style.width = DIV_TOUCH_SIZE + 'px';\n    div.style.height = DIV_TOUCH_SIZE + 'px';\n    div.style.position = 'absolute';\n    div.style.top = DIV_TOUCH_POS_X + 'px';\n    div.style.left = DIV_TOUCH_POS_Y + 'px';\n    div.style.zIndex = DIV_TOUCH_ZINDEX;\n    /**\n     * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n     *\n     * @type {HTMLElement}\n     * @private\n     */\n\n    this.div = div;\n    /**\n     * A simple pool for storing divs.\n     *\n     * @type {*}\n     * @private\n     */\n\n    this.pool = [];\n    /**\n     * This is a tick used to check if an object is no longer being rendered.\n     *\n     * @type {Number}\n     * @private\n     */\n\n    this.renderId = 0;\n    /**\n     * Setting this to true will visually show the divs.\n     *\n     * @type {boolean}\n     */\n\n    this.debug = false;\n    /**\n     * The renderer this accessibility manager works for.\n     *\n     * @member {PIXI.SystemRenderer}\n     */\n\n    this.renderer = renderer;\n    /**\n     * The array of currently active accessible items.\n     *\n     * @member {Array<*>}\n     * @private\n     */\n\n    this.children = [];\n    /**\n     * pre-bind the functions\n     *\n     * @private\n     */\n\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    /**\n     * stores the state of the manager. If there are no accessible objects or the mouse is moving, this will be false.\n     *\n     * @member {Array<*>}\n     * @private\n     */\n\n    this.isActive = false;\n    this.isMobileAccessabillity = false; // let listen for tab.. once pressed we can fire up and show the accessibility layer\n\n    window.addEventListener('keydown', this._onKeyDown, false);\n  }\n  /**\n   * Creates the touch hooks.\n   *\n   */\n\n\n  AccessibilityManager.prototype.createTouchHook = function createTouchHook() {\n    var _this = this;\n\n    var hookDiv = document.createElement('button');\n    hookDiv.style.width = DIV_HOOK_SIZE + 'px';\n    hookDiv.style.height = DIV_HOOK_SIZE + 'px';\n    hookDiv.style.position = 'absolute';\n    hookDiv.style.top = DIV_HOOK_POS_X + 'px';\n    hookDiv.style.left = DIV_HOOK_POS_Y + 'px';\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX;\n    hookDiv.style.backgroundColor = '#FF0000';\n    hookDiv.title = 'HOOK DIV';\n    hookDiv.addEventListener('focus', function () {\n      _this.isMobileAccessabillity = true;\n\n      _this.activate();\n\n      document.body.removeChild(hookDiv);\n    });\n    document.body.appendChild(hookDiv);\n  };\n  /**\n   * Activating will cause the Accessibility layer to be shown. This is called when a user\n   * preses the tab key.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.activate = function activate() {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n    window.document.addEventListener('mousemove', this._onMouseMove, true);\n    window.removeEventListener('keydown', this._onKeyDown, false);\n    this.renderer.on('postrender', this.update, this);\n\n    if (this.renderer.view.parentNode) {\n      this.renderer.view.parentNode.appendChild(this.div);\n    }\n  };\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden. This is called when a user moves\n   * the mouse.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.deactivate = function deactivate() {\n    if (!this.isActive || this.isMobileAccessabillity) {\n      return;\n    }\n\n    this.isActive = false;\n    window.document.removeEventListener('mousemove', this._onMouseMove, true);\n    window.addEventListener('keydown', this._onKeyDown, false);\n    this.renderer.off('postrender', this.update);\n\n    if (this.div.parentNode) {\n      this.div.parentNode.removeChild(this.div);\n    }\n  };\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   *\n   * @private\n   * @param {PIXI.Container} displayObject - The DisplayObject to check.\n   */\n\n\n  AccessibilityManager.prototype.updateAccessibleObjects = function updateAccessibleObjects(displayObject) {\n    if (!displayObject.visible) {\n      return;\n    }\n\n    if (displayObject.accessible && displayObject.interactive) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n\n      displayObject.renderId = this.renderId;\n    }\n\n    var children = displayObject.children;\n\n    for (var i = 0; i < children.length; i++) {\n      this.updateAccessibleObjects(children[i]);\n    }\n  };\n  /**\n   * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.update = function update() {\n    if (!this.renderer.renderingToScreen) {\n      return;\n    } // update children...\n\n\n    this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n    var rect = this.renderer.view.getBoundingClientRect();\n    var sx = rect.width / this.renderer.width;\n    var sy = rect.height / this.renderer.height;\n    var div = this.div;\n    div.style.left = rect.left + 'px';\n    div.style.top = rect.top + 'px';\n    div.style.width = this.renderer.width + 'px';\n    div.style.height = this.renderer.height + 'px';\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        core.utils.removeItems(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n\n        if (this.children.length === 0) {\n          this.deactivate();\n        }\n      } else {\n        // map div to display..\n        div = child._accessibleDiv;\n        var hitArea = child.hitArea;\n        var wt = child.worldTransform;\n\n        if (child.hitArea) {\n          div.style.left = (wt.tx + hitArea.x * wt.a) * sx + 'px';\n          div.style.top = (wt.ty + hitArea.y * wt.d) * sy + 'px';\n          div.style.width = hitArea.width * wt.a * sx + 'px';\n          div.style.height = hitArea.height * wt.d * sy + 'px';\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = hitArea.x * sx + 'px';\n          div.style.top = hitArea.y * sy + 'px';\n          div.style.width = hitArea.width * sx + 'px';\n          div.style.height = hitArea.height * sy + 'px'; // update button titles and hints if they exist and they've changed\n\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n\n          if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute('aria-label', child.accessibleHint);\n          }\n        }\n      }\n    } // increment the render id..\n\n\n    this.renderId++;\n  };\n  /**\n   * TODO: docs.\n   *\n   * @param {Rectangle} hitArea - TODO docs\n   */\n\n\n  AccessibilityManager.prototype.capHitArea = function capHitArea(hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n\n    if (hitArea.x + hitArea.width > this.renderer.width) {\n      hitArea.width = this.renderer.width - hitArea.x;\n    }\n\n    if (hitArea.y + hitArea.height > this.renderer.height) {\n      hitArea.height = this.renderer.height - hitArea.y;\n    }\n  };\n  /**\n   * Adds a DisplayObject to the accessibility manager\n   *\n   * @private\n   * @param {DisplayObject} displayObject - The child to make accessible.\n   */\n\n\n  AccessibilityManager.prototype.addChild = function addChild(displayObject) {\n    //    this.activate();\n    var div = this.pool.pop();\n\n    if (!div) {\n      div = document.createElement('button');\n      div.style.width = DIV_TOUCH_SIZE + 'px';\n      div.style.height = DIV_TOUCH_SIZE + 'px';\n      div.style.backgroundColor = this.debug ? 'rgba(255,0,0,0.5)' : 'transparent';\n      div.style.position = 'absolute';\n      div.style.zIndex = DIV_TOUCH_ZINDEX;\n      div.style.borderStyle = 'none'; // ARIA attributes ensure that button title and hint updates are announced properly\n\n      if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n        div.setAttribute('aria-live', 'off');\n      } else {\n        div.setAttribute('aria-live', 'polite');\n      }\n\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        // FireFox needs this to announce only the new button name\n        div.setAttribute('aria-relevant', 'additions');\n      } else {\n        // required by IE, other browsers don't much care\n        div.setAttribute('aria-relevant', 'text');\n      }\n\n      div.addEventListener('click', this._onClick.bind(this));\n      div.addEventListener('focus', this._onFocus.bind(this));\n      div.addEventListener('focusout', this._onFocusOut.bind(this));\n    }\n\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = 'displayObject ' + displayObject.tabIndex;\n    }\n\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute('aria-label', displayObject.accessibleHint);\n    } //\n\n\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  };\n  /**\n   * Maps the div button press to pixi's InteractionManager (click)\n   *\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n\n\n  AccessibilityManager.prototype._onClick = function _onClick(e) {\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseover)\n   *\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n\n\n  AccessibilityManager.prototype._onFocus = function _onFocus(e) {\n    if (!e.target.getAttribute('aria-live', 'off')) {\n      e.target.setAttribute('aria-live', 'assertive');\n    }\n\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseout)\n   *\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n\n\n  AccessibilityManager.prototype._onFocusOut = function _onFocusOut(e) {\n    if (!e.target.getAttribute('aria-live', 'off')) {\n      e.target.setAttribute('aria-live', 'polite');\n    }\n\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n  };\n  /**\n   * Is called when a key is pressed\n   *\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n\n\n  AccessibilityManager.prototype._onKeyDown = function _onKeyDown(e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n\n    this.activate();\n  };\n  /**\n   * Is called when the mouse moves across the renderer element\n   *\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n\n\n  AccessibilityManager.prototype._onMouseMove = function _onMouseMove(e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n\n    this.deactivate();\n  };\n  /**\n   * Destroys the accessibility manager\n   *\n   */\n\n\n  AccessibilityManager.prototype.destroy = function destroy() {\n    this.div = null;\n\n    for (var i = 0; i < this.children.length; i++) {\n      this.children[i].div = null;\n    }\n\n    window.document.removeEventListener('mousemove', this._onMouseMove, true);\n    window.removeEventListener('keydown', this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  };\n\n  return AccessibilityManager;\n}();\n\nexports.default = AccessibilityManager;\ncore.WebGLRenderer.registerPlugin('accessibility', AccessibilityManager);\ncore.CanvasRenderer.registerPlugin('accessibility', AccessibilityManager);","map":{"version":3,"sources":["../../src/accessibility/AccessibilityManager.js"],"names":["core","KEY_CODE_TAB","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","DIV_HOOK_ZINDEX","AccessibilityManager","navigator","div","document","window","createTouchHook","hookDiv","activate","deactivate","updateAccessibleObjects","displayObject","children","i","update","rect","sx","sy","child","hitArea","wt","capHitArea","addChild","_onClick","e","interactionManager","_onFocus","_onFocusOut","_onKeyDown","_onMouseMove","destroy"],"mappings":"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","sourcesContent":["import * as core from '../core';\nimport Device from 'ismobilejs';\nimport accessibleTarget from './accessibleTarget';\n\n// add some extra variables to the container..\ncore.utils.mixins.delayMixin(\n    core.DisplayObject.prototype,\n    accessibleTarget\n);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen\n * readers. This is very important as it can possibly help people with disabilities access pixi\n * content.\n *\n * Much like interaction any DisplayObject can be made accessible. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.accessibility\n *\n * @class\n * @memberof PIXI.accessibility\n */\nexport default class AccessibilityManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        if ((Device.tablet || Device.phone) && !navigator.isCocoonJS)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX;\n\n        /**\n         * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n         *\n         * @type {HTMLElement}\n         * @private\n         */\n        this.div = div;\n\n        /**\n         * A simple pool for storing divs.\n         *\n         * @type {*}\n         * @private\n         */\n        this.pool = [];\n\n        /**\n         * This is a tick used to check if an object is no longer being rendered.\n         *\n         * @type {Number}\n         * @private\n         */\n        this.renderId = 0;\n\n        /**\n         * Setting this to true will visually show the divs.\n         *\n         * @type {boolean}\n         */\n        this.debug = false;\n\n        /**\n         * The renderer this accessibility manager works for.\n         *\n         * @member {PIXI.SystemRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * The array of currently active accessible items.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.children = [];\n\n        /**\n         * pre-bind the functions\n         *\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        /**\n         * stores the state of the manager. If there are no accessible objects or the mouse is moving, this will be false.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.isActive = false;\n        this.isMobileAccessabillity = false;\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        window.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     */\n    createTouchHook()\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX;\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'HOOK DIV';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this.isMobileAccessabillity = true;\n            this.activate();\n            document.body.removeChild(hookDiv);\n        });\n\n        document.body.appendChild(hookDiv);\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown. This is called when a user\n     * preses the tab key.\n     *\n     * @private\n     */\n    activate()\n    {\n        if (this.isActive)\n        {\n            return;\n        }\n\n        this.isActive = true;\n\n        window.document.addEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n\n        if (this.renderer.view.parentNode)\n        {\n            this.renderer.view.parentNode.appendChild(this.div);\n        }\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden. This is called when a user moves\n     * the mouse.\n     *\n     * @private\n     */\n    deactivate()\n    {\n        if (!this.isActive || this.isMobileAccessabillity)\n        {\n            return;\n        }\n\n        this.isActive = false;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n\n        if (this.div.parentNode)\n        {\n            this.div.parentNode.removeChild(this.div);\n        }\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    updateAccessibleObjects(displayObject)\n    {\n        if (!displayObject.visible)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.updateAccessibleObjects(children[i]);\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    update()\n    {\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n\n        const rect = this.renderer.view.getBoundingClientRect();\n        const sx = rect.width / this.renderer.width;\n        const sy = rect.height / this.renderer.height;\n\n        let div = this.div;\n\n        div.style.left = `${rect.left}px`;\n        div.style.top = `${rect.top}px`;\n        div.style.width = `${this.renderer.width}px`;\n        div.style.height = `${this.renderer.height}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                core.utils.removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n\n                if (this.children.length === 0)\n                {\n                    this.deactivate();\n                }\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * TODO: docs.\n     *\n     * @param {Rectangle} hitArea - TODO docs\n     */\n    capHitArea(hitArea)\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        if (hitArea.x + hitArea.width > this.renderer.width)\n        {\n            hitArea.width = this.renderer.width - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > this.renderer.height)\n        {\n            hitArea.height = this.renderer.height - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {DisplayObject} displayObject - The child to make accessible.\n     */\n    addChild(displayObject)\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,0,0,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX;\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        //\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    _onClick(e)\n    {\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    _onFocus(e)\n    {\n        if (!e.target.getAttribute('aria-live', 'off'))\n        {\n            e.target.setAttribute('aria-live', 'assertive');\n        }\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    _onFocusOut(e)\n    {\n        if (!e.target.getAttribute('aria-live', 'off'))\n        {\n            e.target.setAttribute('aria-live', 'polite');\n        }\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    _onKeyDown(e)\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    _onMouseMove(e)\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    destroy()\n    {\n        this.div = null;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            this.children[i].div = null;\n        }\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('accessibility', AccessibilityManager);\ncore.CanvasRenderer.registerPlugin('accessibility', AccessibilityManager);\n"]},"metadata":{},"sourceType":"script"}