{"ast":null,"code":"var EMPTY_ARRAY_BUFFER = new ArrayBuffer(0);\n/**\n * Helper class to create a webGL buffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param type {gl.ARRAY_BUFFER | gl.ELEMENT_ARRAY_BUFFER} @mat\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n * @param drawType {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n */\n\nvar Buffer = function (gl, type, data, drawType) {\n  /**\n      * The current WebGL rendering context\n      *\n      * @member {WebGLRenderingContext}\n      */\n  this.gl = gl;\n  /**\n      * The WebGL buffer, created upon instantiation\n      *\n      * @member {WebGLBuffer}\n      */\n\n  this.buffer = gl.createBuffer();\n  /**\n      * The type of the buffer\n      *\n      * @member {gl.ARRAY_BUFFER|gl.ELEMENT_ARRAY_BUFFER}\n      */\n\n  this.type = type || gl.ARRAY_BUFFER;\n  /**\n      * The draw type of the buffer\n      *\n      * @member {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n      */\n\n  this.drawType = drawType || gl.STATIC_DRAW;\n  /**\n      * The data in the buffer, as a typed array\n      *\n      * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}\n      */\n\n  this.data = EMPTY_ARRAY_BUFFER;\n\n  if (data) {\n    this.upload(data);\n  }\n\n  this._updateID = 0;\n};\n/**\n * Uploads the buffer to the GPU\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data to upload\n * @param offset {Number} if only a subset of the data should be uploaded, this is the amount of data to subtract\n * @param dontBind {Boolean} whether to bind the buffer before uploading it\n */\n\n\nBuffer.prototype.upload = function (data, offset, dontBind) {\n  // todo - needed?\n  if (!dontBind) this.bind();\n  var gl = this.gl;\n  data = data || this.data;\n  offset = offset || 0;\n\n  if (this.data.byteLength >= data.byteLength) {\n    gl.bufferSubData(this.type, offset, data);\n  } else {\n    gl.bufferData(this.type, data, this.drawType);\n  }\n\n  this.data = data;\n};\n/**\n * Binds the buffer\n *\n */\n\n\nBuffer.prototype.bind = function () {\n  var gl = this.gl;\n  gl.bindBuffer(this.type, this.buffer);\n};\n\nBuffer.createVertexBuffer = function (gl, data, drawType) {\n  return new Buffer(gl, gl.ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.createIndexBuffer = function (gl, data, drawType) {\n  return new Buffer(gl, gl.ELEMENT_ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.create = function (gl, type, data, drawType) {\n  return new Buffer(gl, type, data, drawType);\n};\n/**\n * Destroys the buffer\n *\n */\n\n\nBuffer.prototype.destroy = function () {\n  this.gl.deleteBuffer(this.buffer);\n};\n\nmodule.exports = Buffer;","map":{"version":3,"sources":["/Users/mohamedelhedihaddar/weather-app/node_modules/pixi-gl-core/src/GLBuffer.js"],"names":["EMPTY_ARRAY_BUFFER","ArrayBuffer","Buffer","gl","type","data","drawType","buffer","createBuffer","ARRAY_BUFFER","STATIC_DRAW","upload","_updateID","prototype","offset","dontBind","bind","byteLength","bufferSubData","bufferData","bindBuffer","createVertexBuffer","createIndexBuffer","ELEMENT_ARRAY_BUFFER","create","destroy","deleteBuffer","module","exports"],"mappings":"AAAA,IAAIA,kBAAkB,GAAG,IAAIC,WAAJ,CAAgB,CAAhB,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAG,UAASC,EAAT,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,QAAzB,EACb;AAEC;AACD;AACA;AACA;AACA;AACC,OAAKH,EAAL,GAAUA,EAAV;AAEA;AACD;AACA;AACA;AACA;;AACC,OAAKI,MAAL,GAAcJ,EAAE,CAACK,YAAH,EAAd;AAEA;AACD;AACA;AACA;AACA;;AACC,OAAKJ,IAAL,GAAYA,IAAI,IAAID,EAAE,CAACM,YAAvB;AAEA;AACD;AACA;AACA;AACA;;AACC,OAAKH,QAAL,GAAgBA,QAAQ,IAAIH,EAAE,CAACO,WAA/B;AAEA;AACD;AACA;AACA;AACA;;AACC,OAAKL,IAAL,GAAYL,kBAAZ;;AAEA,MAAGK,IAAH,EACA;AACC,SAAKM,MAAL,CAAYN,IAAZ;AACA;;AAED,OAAKO,SAAL,GAAiB,CAAjB;AACA,CA5CD;AA8CA;AACA;AACA;AACA;AACA;AACA;;;AACAV,MAAM,CAACW,SAAP,CAAiBF,MAAjB,GAA0B,UAASN,IAAT,EAAeS,MAAf,EAAuBC,QAAvB,EAC1B;AACC;AACA,MAAG,CAACA,QAAJ,EAAc,KAAKC,IAAL;AAEd,MAAIb,EAAE,GAAG,KAAKA,EAAd;AAEAE,EAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKA,IAApB;AACAS,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;;AAEA,MAAG,KAAKT,IAAL,CAAUY,UAAV,IAAwBZ,IAAI,CAACY,UAAhC,EACA;AACCd,IAAAA,EAAE,CAACe,aAAH,CAAiB,KAAKd,IAAtB,EAA4BU,MAA5B,EAAoCT,IAApC;AACA,GAHD,MAKA;AACCF,IAAAA,EAAE,CAACgB,UAAH,CAAc,KAAKf,IAAnB,EAAyBC,IAAzB,EAA+B,KAAKC,QAApC;AACA;;AAED,OAAKD,IAAL,GAAYA,IAAZ;AACA,CApBD;AAqBA;AACA;AACA;AACA;;;AACAH,MAAM,CAACW,SAAP,CAAiBG,IAAjB,GAAwB,YACxB;AACC,MAAIb,EAAE,GAAG,KAAKA,EAAd;AACAA,EAAAA,EAAE,CAACiB,UAAH,CAAc,KAAKhB,IAAnB,EAAyB,KAAKG,MAA9B;AACA,CAJD;;AAMAL,MAAM,CAACmB,kBAAP,GAA4B,UAASlB,EAAT,EAAaE,IAAb,EAAmBC,QAAnB,EAC5B;AACC,SAAO,IAAIJ,MAAJ,CAAWC,EAAX,EAAeA,EAAE,CAACM,YAAlB,EAAgCJ,IAAhC,EAAsCC,QAAtC,CAAP;AACA,CAHD;;AAKAJ,MAAM,CAACoB,iBAAP,GAA2B,UAASnB,EAAT,EAAaE,IAAb,EAAmBC,QAAnB,EAC3B;AACC,SAAO,IAAIJ,MAAJ,CAAWC,EAAX,EAAeA,EAAE,CAACoB,oBAAlB,EAAwClB,IAAxC,EAA8CC,QAA9C,CAAP;AACA,CAHD;;AAKAJ,MAAM,CAACsB,MAAP,GAAgB,UAASrB,EAAT,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,QAAzB,EAChB;AACC,SAAO,IAAIJ,MAAJ,CAAWC,EAAX,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,QAA3B,CAAP;AACA,CAHD;AAKA;AACA;AACA;AACA;;;AACAJ,MAAM,CAACW,SAAP,CAAiBY,OAAjB,GAA2B,YAAU;AACpC,OAAKtB,EAAL,CAAQuB,YAAR,CAAqB,KAAKnB,MAA1B;AACA,CAFD;;AAIAoB,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["var EMPTY_ARRAY_BUFFER = new ArrayBuffer(0);\n\n/**\n * Helper class to create a webGL buffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param type {gl.ARRAY_BUFFER | gl.ELEMENT_ARRAY_BUFFER} @mat\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n * @param drawType {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n */\nvar Buffer = function(gl, type, data, drawType)\n{\n\n\t/**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n\tthis.gl = gl;\n\n\t/**\n     * The WebGL buffer, created upon instantiation\n     *\n     * @member {WebGLBuffer}\n     */\n\tthis.buffer = gl.createBuffer();\n\n\t/**\n     * The type of the buffer\n     *\n     * @member {gl.ARRAY_BUFFER|gl.ELEMENT_ARRAY_BUFFER}\n     */\n\tthis.type = type || gl.ARRAY_BUFFER;\n\n\t/**\n     * The draw type of the buffer\n     *\n     * @member {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n     */\n\tthis.drawType = drawType || gl.STATIC_DRAW;\n\n\t/**\n     * The data in the buffer, as a typed array\n     *\n     * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}\n     */\n\tthis.data = EMPTY_ARRAY_BUFFER;\n\n\tif(data)\n\t{\n\t\tthis.upload(data);\n\t}\n\n\tthis._updateID = 0;\n};\n\n/**\n * Uploads the buffer to the GPU\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data to upload\n * @param offset {Number} if only a subset of the data should be uploaded, this is the amount of data to subtract\n * @param dontBind {Boolean} whether to bind the buffer before uploading it\n */\nBuffer.prototype.upload = function(data, offset, dontBind)\n{\n\t// todo - needed?\n\tif(!dontBind) this.bind();\n\n\tvar gl = this.gl;\n\n\tdata = data || this.data;\n\toffset = offset || 0;\n\n\tif(this.data.byteLength >= data.byteLength)\n\t{\n\t\tgl.bufferSubData(this.type, offset, data);\n\t}\n\telse\n\t{\n\t\tgl.bufferData(this.type, data, this.drawType);\n\t}\n\n\tthis.data = data;\n};\n/**\n * Binds the buffer\n *\n */\nBuffer.prototype.bind = function()\n{\n\tvar gl = this.gl;\n\tgl.bindBuffer(this.type, this.buffer);\n};\n\nBuffer.createVertexBuffer = function(gl, data, drawType)\n{\n\treturn new Buffer(gl, gl.ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.createIndexBuffer = function(gl, data, drawType)\n{\n\treturn new Buffer(gl, gl.ELEMENT_ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.create = function(gl, type, data, drawType)\n{\n\treturn new Buffer(gl, type, data, drawType);\n};\n\n/**\n * Destroys the buffer\n *\n */\nBuffer.prototype.destroy = function(){\n\tthis.gl.deleteBuffer(this.buffer);\n};\n\nmodule.exports = Buffer;\n"]},"metadata":{},"sourceType":"script"}