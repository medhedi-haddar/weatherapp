{"ast":null,"code":"import moment from 'moment';\nimport 'moment/locale/fr';\nmoment.locale('fr');\n\nconst getDetailCurrentForecast = detailCurrentForecast => {\n  // const sunrise           = moment(detailCurrentForecast.sunrise*1000).format('HH:SS'); // 00:00\n  // const sunset            = moment(detailCurrentForecast.sunset*1000).format('HH:SS'); // 00:00\n  // const moonrise          = moment(detailCurrentForecast.moonrise*1000).format('HH:SS'); // 00:00\n  // const moonset           = moment(detailCurrentForecast.moonset*1000).format('HH:SS'); // 00:00\n  const sunrise = detailCurrentForecast.sunrise; // 00:00\n\n  const sunset = detailCurrentForecast.sunset; // 00:00\n\n  const moonrise = moment(detailCurrentForecast.moonrise * 1000).format('HH:SS'); // 00:00\n\n  const moonset = moment(detailCurrentForecast.moonset * 1000).format('HH:SS'); // 00:00\n\n  const moon_phase = detailCurrentForecast.moon_phase; // 0 <-> 1\n\n  const pressure = Math.round(detailCurrentForecast.pressure); // hPa\n\n  const humidity = detailCurrentForecast.humidity; // %\n\n  const wind_speed = Math.round(detailCurrentForecast.wind_speed * 3.6); //km/h\n\n  let wind_gust = 0;\n\n  if (detailCurrentForecast.wind_gust) {\n    wind_gust = Math.round(detailCurrentForecast.wind_gust * 3.6);\n  }\n\n  const wind_deg = detailCurrentForecast.wind_deg; // degree°\n\n  const clouds = detailCurrentForecast.clouds; // %\n\n  const temp_night = Math.round(detailCurrentForecast.temp.night); // degree°\n\n  const temp_eve = Math.round(detailCurrentForecast.temp.eve); // degree°\n\n  const temp_morn = Math.round(detailCurrentForecast.temp.morn); // degree°\n  // Ressenti\n\n  const feels_like_day = Math.round(detailCurrentForecast.feels_like.day); // degree°\n\n  const feels_like_night = Math.round(detailCurrentForecast.feels_like.night); // degree°\n\n  const feels_like_eve = Math.round(detailCurrentForecast.feels_like.eve); // degree°\n\n  const feels_like_morn = Math.round(detailCurrentForecast.feels_like.morn); // degree°\n\n  const uvi = detailCurrentForecast.uvi; // degree°\n\n  const pop = Math.round(detailCurrentForecast.pop * 100);\n  let rain = 0;\n\n  if (detailCurrentForecast.rain) {\n    rain = detailCurrentForecast.rain;\n  }\n\n  let snow = 0;\n\n  if (detailCurrentForecast.snow) {\n    snow = detailCurrentForecast.snow;\n  }\n\n  return {\n    sunrise: sunrise,\n    sunset: sunset,\n    moonrise: moonrise,\n    moonset: moonset,\n    moon_phase: moon_phase,\n    pressure: pressure,\n    humidity: humidity,\n    wind_speed: wind_speed,\n    wind_deg: wind_deg,\n    wind_gust: wind_gust,\n    clouds: clouds,\n    temp_night: temp_night,\n    temp_eve: temp_eve,\n    temp_morn: temp_morn,\n    feels_like_day: feels_like_day,\n    feels_like_night: feels_like_night,\n    feels_like_eve: feels_like_eve,\n    feels_like_morn: feels_like_morn,\n    uvi: uvi,\n    rain: rain,\n    pop: pop,\n    snow: snow\n  };\n};\n\nexport default getDetailCurrentForecast;","map":{"version":3,"sources":["/Users/mohamedelhedihaddar/weather-app/src/helpers/getDetailCurrentForecast.js"],"names":["moment","locale","getDetailCurrentForecast","detailCurrentForecast","sunrise","sunset","moonrise","format","moonset","moon_phase","pressure","Math","round","humidity","wind_speed","wind_gust","wind_deg","clouds","temp_night","temp","night","temp_eve","eve","temp_morn","morn","feels_like_day","feels_like","day","feels_like_night","feels_like_eve","feels_like_morn","uvi","pop","rain","snow"],"mappings":"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","sourcesContent":["\nimport moment from 'moment';\nimport 'moment/locale/fr'\nmoment.locale('fr');\n\nconst getDetailCurrentForecast = detailCurrentForecast => {\n\n    // const sunrise           = moment(detailCurrentForecast.sunrise*1000).format('HH:SS'); // 00:00\n    // const sunset            = moment(detailCurrentForecast.sunset*1000).format('HH:SS'); // 00:00\n    // const moonrise          = moment(detailCurrentForecast.moonrise*1000).format('HH:SS'); // 00:00\n    // const moonset           = moment(detailCurrentForecast.moonset*1000).format('HH:SS'); // 00:00\n    const sunrise           = detailCurrentForecast.sunrise; // 00:00\n    const sunset            =  detailCurrentForecast.sunset ; // 00:00\n    const moonrise          = moment(detailCurrentForecast.moonrise*1000).format('HH:SS'); // 00:00\n    const moonset           = moment(detailCurrentForecast.moonset*1000).format('HH:SS'); // 00:00\n    const moon_phase        = detailCurrentForecast.moon_phase; // 0 <-> 1\n\n    const pressure          = Math.round(detailCurrentForecast.pressure); // hPa\n    const humidity          = detailCurrentForecast.humidity; // %\n\n    const wind_speed        = Math.round(detailCurrentForecast.wind_speed * 3.6); //km/h\n\n    let wind_gust = 0;\n    if(detailCurrentForecast.wind_gust){\n        wind_gust = Math.round(detailCurrentForecast.wind_gust * 3.6);\n    }\n    const wind_deg          = detailCurrentForecast.wind_deg; // degree°\n    const clouds            = detailCurrentForecast.clouds; // %\n\n    const temp_night        = Math.round(detailCurrentForecast.temp.night); // degree°\n    const temp_eve          = Math.round(detailCurrentForecast.temp.eve); // degree°\n    const temp_morn         = Math.round(detailCurrentForecast.temp.morn); // degree°\n    // Ressenti\n    const feels_like_day    = Math.round(detailCurrentForecast.feels_like.day); // degree°\n    const feels_like_night  = Math.round(detailCurrentForecast.feels_like.night); // degree°\n    const feels_like_eve    = Math.round(detailCurrentForecast.feels_like.eve); // degree°\n    const feels_like_morn   = Math.round(detailCurrentForecast.feels_like.morn); // degree°\n    const uvi               = detailCurrentForecast.uvi; // degree°\n    const pop               = Math.round(detailCurrentForecast.pop * 100);\n    \n    let rain = 0;\n    if(detailCurrentForecast.rain){\n        rain = detailCurrentForecast.rain ; \n    }\n    let snow = 0;\n    if(detailCurrentForecast.snow){\n        snow = detailCurrentForecast.snow ; \n    }\n\n    return{ \n        sunrise :           sunrise,\n        sunset :            sunset,\n        moonrise :          moonrise,\n        moonset :           moonset,\n        moon_phase :        moon_phase,\n        pressure :          pressure,\n        humidity :          humidity,\n        wind_speed :        wind_speed,\n        wind_deg :          wind_deg,\n        wind_gust :         wind_gust,\n        clouds :            clouds,\n        temp_night :        temp_night,\n        temp_eve :          temp_eve,\n        temp_morn :         temp_morn,\n        feels_like_day :    feels_like_day,\n        feels_like_night :  feels_like_night,\n        feels_like_eve :    feels_like_eve,\n        feels_like_morn :   feels_like_morn,\n        uvi :               uvi,\n        rain :              rain,\n        pop :               pop,\n        snow :              snow,\n        \n    }\n}\nexport default getDetailCurrentForecast\n"]},"metadata":{},"sourceType":"module"}