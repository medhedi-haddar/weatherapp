{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _CanvasRenderer = require('../../renderers/canvas/CanvasRenderer');\n\nvar _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);\n\nvar _const = require('../../const');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @private\n * @memberof PIXI\n */\n\n\nvar CanvasGraphicsRenderer = function () {\n  /**\n   * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n   */\n  function CanvasGraphicsRenderer(renderer) {\n    _classCallCheck(this, CanvasGraphicsRenderer);\n\n    this.renderer = renderer;\n  }\n  /**\n   * Renders a Graphics object to a canvas.\n   *\n   * @param {PIXI.Graphics} graphics - the actual graphics object to render\n   */\n\n\n  CanvasGraphicsRenderer.prototype.render = function render(graphics) {\n    var renderer = this.renderer;\n    var context = renderer.context;\n    var worldAlpha = graphics.worldAlpha;\n    var transform = graphics.transform.worldTransform;\n    var resolution = renderer.resolution;\n    context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution); // update tint if graphics was dirty\n\n    if (graphics.canvasTintDirty !== graphics.dirty || graphics._prevTint !== graphics.tint) {\n      this.updateGraphicsTint(graphics);\n    }\n\n    renderer.setBlendMode(graphics.blendMode);\n\n    for (var i = 0; i < graphics.graphicsData.length; i++) {\n      var data = graphics.graphicsData[i];\n      var shape = data.shape;\n      var fillColor = data._fillTint;\n      var lineColor = data._lineTint;\n      context.lineWidth = data.lineWidth;\n\n      if (data.type === _const.SHAPES.POLY) {\n        context.beginPath();\n        var points = shape.points;\n        var holes = data.holes;\n        var outerArea = void 0;\n        var innerArea = void 0;\n        var px = void 0;\n        var py = void 0;\n        context.moveTo(points[0], points[1]);\n\n        for (var j = 2; j < points.length; j += 2) {\n          context.lineTo(points[j], points[j + 1]);\n        } // if the first and last point are the same close the path - much neater :)\n\n\n        if (shape.closed) {\n          context.closePath();\n        }\n\n        if (holes.length > 0) {\n          outerArea = 0;\n          px = points[0];\n          py = points[1];\n\n          for (var _j = 2; _j + 2 < points.length; _j += 2) {\n            outerArea += (points[_j] - px) * (points[_j + 3] - py) - (points[_j + 2] - px) * (points[_j + 1] - py);\n          }\n\n          for (var k = 0; k < holes.length; k++) {\n            points = holes[k].points;\n\n            if (!points) {\n              continue;\n            }\n\n            innerArea = 0;\n            px = points[0];\n            py = points[1];\n\n            for (var _j2 = 2; _j2 + 2 < points.length; _j2 += 2) {\n              innerArea += (points[_j2] - px) * (points[_j2 + 3] - py) - (points[_j2 + 2] - px) * (points[_j2 + 1] - py);\n            }\n\n            if (innerArea * outerArea < 0) {\n              context.moveTo(points[0], points[1]);\n\n              for (var _j3 = 2; _j3 < points.length; _j3 += 2) {\n                context.lineTo(points[_j3], points[_j3 + 1]);\n              }\n            } else {\n              context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n              for (var _j4 = points.length - 4; _j4 >= 0; _j4 -= 2) {\n                context.lineTo(points[_j4], points[_j4 + 1]);\n              }\n            }\n\n            if (holes[k].close) {\n              context.closePath();\n            }\n          }\n        }\n\n        if (data.fill) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      } else if (data.type === _const.SHAPES.RECT) {\n        if (data.fillColor || data.fillColor === 0) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fillRect(shape.x, shape.y, shape.width, shape.height);\n        }\n\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.strokeRect(shape.x, shape.y, shape.width, shape.height);\n        }\n      } else if (data.type === _const.SHAPES.CIRC) {\n        // TODO - need to be Undefined!\n        context.beginPath();\n        context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n        context.closePath();\n\n        if (data.fill) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      } else if (data.type === _const.SHAPES.ELIP) {\n        // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n        var w = shape.width * 2;\n        var h = shape.height * 2;\n        var x = shape.x - w / 2;\n        var y = shape.y - h / 2;\n        context.beginPath();\n        var kappa = 0.5522848;\n        var ox = w / 2 * kappa; // control point offset horizontal\n\n        var oy = h / 2 * kappa; // control point offset vertical\n\n        var xe = x + w; // x-end\n\n        var ye = y + h; // y-end\n\n        var xm = x + w / 2; // x-middle\n\n        var ym = y + h / 2; // y-middle\n\n        context.moveTo(x, ym);\n        context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n        context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n        context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n        context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n        context.closePath();\n\n        if (data.fill) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      } else if (data.type === _const.SHAPES.RREC) {\n        var rx = shape.x;\n        var ry = shape.y;\n        var width = shape.width;\n        var height = shape.height;\n        var radius = shape.radius;\n        var maxRadius = Math.min(width, height) / 2 | 0;\n        radius = radius > maxRadius ? maxRadius : radius;\n        context.beginPath();\n        context.moveTo(rx, ry + radius);\n        context.lineTo(rx, ry + height - radius);\n        context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n        context.lineTo(rx + width - radius, ry + height);\n        context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n        context.lineTo(rx + width, ry + radius);\n        context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n        context.lineTo(rx + radius, ry);\n        context.quadraticCurveTo(rx, ry, rx, ry + radius);\n        context.closePath();\n\n        if (data.fillColor || data.fillColor === 0) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      }\n    }\n  };\n  /**\n   * Updates the tint of a graphics object\n   *\n   * @private\n   * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated\n   */\n\n\n  CanvasGraphicsRenderer.prototype.updateGraphicsTint = function updateGraphicsTint(graphics) {\n    graphics._prevTint = graphics.tint;\n    graphics.canvasTintDirty = graphics.dirty;\n    var tintR = (graphics.tint >> 16 & 0xFF) / 255;\n    var tintG = (graphics.tint >> 8 & 0xFF) / 255;\n    var tintB = (graphics.tint & 0xFF) / 255;\n\n    for (var i = 0; i < graphics.graphicsData.length; ++i) {\n      var data = graphics.graphicsData[i];\n      var fillColor = data.fillColor | 0;\n      var lineColor = data.lineColor | 0; // super inline, cos optimization :)\n\n      data._fillTint = ((fillColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((fillColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (fillColor & 0xFF) / 255 * tintB * 255;\n      data._lineTint = ((lineColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((lineColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (lineColor & 0xFF) / 255 * tintB * 255;\n    }\n  };\n  /**\n   * Renders a polygon.\n   *\n   * @param {PIXI.Point[]} points - The points to render\n   * @param {boolean} close - Should the polygon be closed\n   * @param {CanvasRenderingContext2D} context - The rendering context to use\n   */\n\n\n  CanvasGraphicsRenderer.prototype.renderPolygon = function renderPolygon(points, close, context) {\n    context.moveTo(points[0], points[1]);\n\n    for (var j = 1; j < points.length / 2; ++j) {\n      context.lineTo(points[j * 2], points[j * 2 + 1]);\n    }\n\n    if (close) {\n      context.closePath();\n    }\n  };\n  /**\n   * destroy graphics object\n   *\n   */\n\n\n  CanvasGraphicsRenderer.prototype.destroy = function destroy() {\n    this.renderer = null;\n  };\n\n  return CanvasGraphicsRenderer;\n}();\n\nexports.default = CanvasGraphicsRenderer;\n\n_CanvasRenderer2.default.registerPlugin('graphics', CanvasGraphicsRenderer);","map":{"version":3,"sources":["../../../../src/core/graphics/canvas/CanvasGraphicsRenderer.js"],"names":["CanvasGraphicsRenderer","render","graphics","renderer","context","worldAlpha","transform","resolution","i","data","shape","fillColor","lineColor","points","holes","outerArea","innerArea","px","py","j","k","Math","w","h","x","y","kappa","ox","oy","xe","ye","xm","ym","rx","ry","width","height","radius","maxRadius","updateGraphicsTint","tintR","tintG","tintB","renderPolygon","close","destroy"],"mappings":"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","sourcesContent":["import CanvasRenderer from '../../renderers/canvas/CanvasRenderer';\nimport { SHAPES } from '../../const';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class CanvasGraphicsRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders a Graphics object to a canvas.\n     *\n     * @param {PIXI.Graphics} graphics - the actual graphics object to render\n     */\n    render(graphics)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n        const worldAlpha = graphics.worldAlpha;\n        const transform = graphics.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n        context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        // update tint if graphics was dirty\n        if (graphics.canvasTintDirty !== graphics.dirty\n            || graphics._prevTint !== graphics.tint)\n        {\n            this.updateGraphicsTint(graphics);\n        }\n\n        renderer.setBlendMode(graphics.blendMode);\n\n        for (let i = 0; i < graphics.graphicsData.length; i++)\n        {\n            const data = graphics.graphicsData[i];\n            const shape = data.shape;\n\n            const fillColor = data._fillTint;\n            const lineColor = data._lineTint;\n\n            context.lineWidth = data.lineWidth;\n\n            if (data.type === SHAPES.POLY)\n            {\n                context.beginPath();\n\n                let points = shape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n                let px;\n                let py;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 2; j < points.length; j += 2)\n                {\n                    context.lineTo(points[j], points[j + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (shape.closed)\n                {\n                    context.closePath();\n                }\n\n                if (holes.length > 0)\n                {\n                    outerArea = 0;\n                    px = points[0];\n                    py = points[1];\n                    for (let j = 2; j + 2 < points.length; j += 2)\n                    {\n                        outerArea += ((points[j] - px) * (points[j + 3] - py))\n                            - ((points[j + 2] - px) * (points[j + 1] - py));\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = holes[k].points;\n\n                        if (!points)\n                        {\n                            continue;\n                        }\n\n                        innerArea = 0;\n                        px = points[0];\n                        py = points[1];\n                        for (let j = 2; j + 2 < points.length; j += 2)\n                        {\n                            innerArea += ((points[j] - px) * (points[j + 3] - py))\n                                - ((points[j + 2] - px) * (points[j + 1] - py));\n                        }\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            context.moveTo(points[0], points[1]);\n\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n                            for (let j = points.length - 4; j >= 0; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if (holes[k].close)\n                        {\n                            context.closePath();\n                        }\n                    }\n                }\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fillRect(shape.x, shape.y, shape.width, shape.height);\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.strokeRect(shape.x, shape.y, shape.width, shape.height);\n                }\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.beginPath();\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                context.beginPath();\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w;           // x-end\n                const ye = y + h;           // y-end\n                const xm = x + (w / 2);       // x-middle\n                const ym = y + (h / 2);       // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.beginPath();\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the tint of a graphics object\n     *\n     * @private\n     * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated\n     */\n    updateGraphicsTint(graphics)\n    {\n        graphics._prevTint = graphics.tint;\n        graphics.canvasTintDirty = graphics.dirty;\n\n        const tintR = ((graphics.tint >> 16) & 0xFF) / 255;\n        const tintG = ((graphics.tint >> 8) & 0xFF) / 255;\n        const tintB = (graphics.tint & 0xFF) / 255;\n\n        for (let i = 0; i < graphics.graphicsData.length; ++i)\n        {\n            const data = graphics.graphicsData[i];\n\n            const fillColor = data.fillColor | 0;\n            const lineColor = data.lineColor | 0;\n\n            // super inline, cos optimization :)\n            data._fillTint = (\n                (((fillColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((fillColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((fillColor & 0xFF) / 255) * tintB * 255)\n            );\n\n            data._lineTint = (\n                (((lineColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((lineColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((lineColor & 0xFF) / 255) * tintB * 255)\n            );\n        }\n    }\n\n    /**\n     * Renders a polygon.\n     *\n     * @param {PIXI.Point[]} points - The points to render\n     * @param {boolean} close - Should the polygon be closed\n     * @param {CanvasRenderingContext2D} context - The rendering context to use\n     */\n    renderPolygon(points, close, context)\n    {\n        context.moveTo(points[0], points[1]);\n\n        for (let j = 1; j < points.length / 2; ++j)\n        {\n            context.lineTo(points[j * 2], points[(j * 2) + 1]);\n        }\n\n        if (close)\n        {\n            context.closePath();\n        }\n    }\n\n    /**\n     * destroy graphics object\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\nCanvasRenderer.registerPlugin('graphics', CanvasGraphicsRenderer);\n"]},"metadata":{},"sourceType":"script"}