{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = createIndicesForQuads;\n/**\n * Generic Mask Stack data structure\n *\n * @memberof PIXI\n * @function createIndicesForQuads\n * @private\n * @param {number} size - Number of quads\n * @return {Uint16Array} indices\n */\n\nfunction createIndicesForQuads(size) {\n  // the total number of indices in our array, there are 6 points per quad.\n  var totalIndices = size * 6;\n  var indices = new Uint16Array(totalIndices); // fill the indices with the quads to draw\n\n  for (var i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    indices[i + 0] = j + 0;\n    indices[i + 1] = j + 1;\n    indices[i + 2] = j + 2;\n    indices[i + 3] = j + 0;\n    indices[i + 4] = j + 2;\n    indices[i + 5] = j + 3;\n  }\n\n  return indices;\n}","map":{"version":3,"sources":["../../../src/core/utils/createIndicesForQuads.js"],"names":["createIndicesForQuads","totalIndices","size","indices","i","j"],"mappings":";;;kBASwBA,qB;AATxB;;;;;;;;;;AASe,SAAA,qBAAA,CAAA,IAAA,EACf;AACI;AAEA,MAAMC,YAAAA,GAAeC,IAAAA,GAArB,CAAA;AAEA,MAAMC,OAAAA,GAAU,IAAA,WAAA,CAAhB,YAAgB,CAAhB,CALJ,CAOI;;AACA,OAAK,IAAIC,CAAAA,GAAJ,CAAA,EAAWC,CAAAA,GAAhB,CAAA,EAAuBD,CAAAA,GAAvB,YAAA,EAAyCA,CAAAA,IAAAA,CAAAA,EAAQC,CAAAA,IAAjD,CAAA,EACA;AACIF,IAAAA,OAAAA,CAAQC,CAAAA,GAARD,CAAAA,CAAAA,GAAiBE,CAAAA,GAAjBF,CAAAA;AACAA,IAAAA,OAAAA,CAAQC,CAAAA,GAARD,CAAAA,CAAAA,GAAiBE,CAAAA,GAAjBF,CAAAA;AACAA,IAAAA,OAAAA,CAAQC,CAAAA,GAARD,CAAAA,CAAAA,GAAiBE,CAAAA,GAAjBF,CAAAA;AACAA,IAAAA,OAAAA,CAAQC,CAAAA,GAARD,CAAAA,CAAAA,GAAiBE,CAAAA,GAAjBF,CAAAA;AACAA,IAAAA,OAAAA,CAAQC,CAAAA,GAARD,CAAAA,CAAAA,GAAiBE,CAAAA,GAAjBF,CAAAA;AACAA,IAAAA,OAAAA,CAAQC,CAAAA,GAARD,CAAAA,CAAAA,GAAiBE,CAAAA,GAAjBF,CAAAA;AACH;;AAED,SAAA,OAAA;AACH","sourcesContent":["/**\n * Generic Mask Stack data structure\n *\n * @memberof PIXI\n * @function createIndicesForQuads\n * @private\n * @param {number} size - Number of quads\n * @return {Uint16Array} indices\n */\nexport default function createIndicesForQuads(size)\n{\n    // the total number of indices in our array, there are 6 points per quad.\n\n    const totalIndices = size * 6;\n\n    const indices = new Uint16Array(totalIndices);\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        indices[i + 0] = j + 0;\n        indices[i + 1] = j + 1;\n        indices[i + 2] = j + 2;\n        indices[i + 3] = j + 0;\n        indices[i + 4] = j + 2;\n        indices[i + 5] = j + 3;\n    }\n\n    return indices;\n}\n"]},"metadata":{},"sourceType":"script"}