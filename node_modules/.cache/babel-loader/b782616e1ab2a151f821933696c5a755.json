{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _math = require('../math');\n\nvar _utils = require('../utils');\n\nvar _const = require('../const');\n\nvar _Texture = require('../textures/Texture');\n\nvar _Texture2 = _interopRequireDefault(_Texture);\n\nvar _Container2 = require('../display/Container');\n\nvar _Container3 = _interopRequireDefault(_Container2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar tempPoint = new _math.Point();\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = new PIXI.Sprite.fromImage('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet}:\n *\n * ```js\n * PIXI.loader.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.loader.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\n\nvar Sprite = function (_Container) {\n  _inherits(Sprite, _Container);\n  /**\n   * @param {PIXI.Texture} texture - The texture for this sprite\n   */\n\n\n  function Sprite(texture) {\n    _classCallCheck(this, Sprite);\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 or taken from the {@link PIXI.Texture#defaultAnchor|Texture}\n     * passed to the constructor. A value of 0,0 means the texture's origin is the top left.\n     * Setting the anchor to 0.5,0.5 means the texture's origin is centered.\n     * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner.\n     * Note: Updating the {@link PIXI.Texture#defaultAnchor} after a Texture is\n     * created does _not_ update the Sprite's anchor values.\n     *\n     * @member {PIXI.ObservablePoint}\n     * @private\n     */\n\n\n    var _this = _possibleConstructorReturn(this, _Container.call(this));\n\n    _this._anchor = new _math.ObservablePoint(_this._onAnchorUpdate, _this, texture ? texture.defaultAnchor.x : 0, texture ? texture.defaultAnchor.y : 0);\n    /**\n     * The texture that the sprite is using\n     *\n     * @private\n     * @member {PIXI.Texture}\n     */\n\n    _this._texture = null;\n    /**\n     * The width of the sprite (this is initially set by the texture)\n     *\n     * @private\n     * @member {number}\n     */\n\n    _this._width = 0;\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     *\n     * @private\n     * @member {number}\n     */\n\n    _this._height = 0;\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @private\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n\n    _this._tint = null;\n    _this._tintRGB = null;\n    _this.tint = 0xFFFFFF;\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n\n    _this.blendMode = _const.BLEND_MODES.NORMAL;\n    /**\n     * The shader that will be used to render the sprite. Set to null to remove a current shader.\n     *\n     * @member {PIXI.Filter|PIXI.Shader}\n     */\n\n    _this.shader = null;\n    /**\n     * An internal cached value of the tint.\n     *\n     * @private\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n\n    _this.cachedTint = 0xFFFFFF; // call texture setter\n\n    _this.texture = texture || _Texture2.default.EMPTY;\n    /**\n     * this is used to store the vertex data of the sprite (basically a quad)\n     *\n     * @private\n     * @member {Float32Array}\n     */\n\n    _this.vertexData = new Float32Array(8);\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite\n     *\n     * @private\n     * @member {Float32Array}\n     */\n\n    _this.vertexTrimmedData = null;\n    _this._transformID = -1;\n    _this._textureID = -1;\n    _this._transformTrimmedID = -1;\n    _this._textureTrimmedID = -1;\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_renderWebGL' & '_renderCanvas' methods.\n     *\n     * @member {string}\n     * @default 'sprite'\n     */\n\n    _this.pluginName = 'sprite';\n    return _this;\n  }\n  /**\n   * When the texture is updated, this event will fire to update the scale and frame\n   *\n   * @private\n   */\n\n\n  Sprite.prototype._onTextureUpdate = function _onTextureUpdate() {\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this.cachedTint = 0xFFFFFF; // so if _width is 0 then width was not set..\n\n    if (this._width) {\n      this.scale.x = (0, _utils.sign)(this.scale.x) * this._width / this._texture.orig.width;\n    }\n\n    if (this._height) {\n      this.scale.y = (0, _utils.sign)(this.scale.y) * this._height / this._texture.orig.height;\n    }\n  };\n  /**\n   * Called when the anchor position updates.\n   *\n   * @private\n   */\n\n\n  Sprite.prototype._onAnchorUpdate = function _onAnchorUpdate() {\n    this._transformID = -1;\n    this._transformTrimmedID = -1;\n  };\n  /**\n   * calculates worldTransform * vertices, store it in vertexData\n   */\n\n\n  Sprite.prototype.calculateVertices = function calculateVertices() {\n    if (this._transformID === this.transform._worldID && this._textureID === this._texture._updateID) {\n      return;\n    }\n\n    this._transformID = this.transform._worldID;\n    this._textureID = this._texture._updateID; // set the vertex data\n\n    var texture = this._texture;\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var vertexData = this.vertexData;\n    var trim = texture.trim;\n    var orig = texture.orig;\n    var anchor = this._anchor;\n    var w0 = 0;\n    var w1 = 0;\n    var h0 = 0;\n    var h1 = 0;\n\n    if (trim) {\n      // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n      // space before transforming the sprite coords.\n      w1 = trim.x - anchor._x * orig.width;\n      w0 = w1 + trim.width;\n      h1 = trim.y - anchor._y * orig.height;\n      h0 = h1 + trim.height;\n    } else {\n      w1 = -anchor._x * orig.width;\n      w0 = w1 + orig.width;\n      h1 = -anchor._y * orig.height;\n      h0 = h1 + orig.height;\n    } // xy\n\n\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty; // xy\n\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty; // xy\n\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty; // xy\n\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  };\n  /**\n   * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n   * This is used to ensure that the true width and height of a trimmed texture is respected\n   */\n\n\n  Sprite.prototype.calculateTrimmedVertices = function calculateTrimmedVertices() {\n    if (!this.vertexTrimmedData) {\n      this.vertexTrimmedData = new Float32Array(8);\n    } else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) {\n      return;\n    }\n\n    this._transformTrimmedID = this.transform._worldID;\n    this._textureTrimmedID = this._texture._updateID; // lets do some special trim code!\n\n    var texture = this._texture;\n    var vertexData = this.vertexTrimmedData;\n    var orig = texture.orig;\n    var anchor = this._anchor; // lets calculate the new untrimmed bounds..\n\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var w1 = -anchor._x * orig.width;\n    var w0 = w1 + orig.width;\n    var h1 = -anchor._y * orig.height;\n    var h0 = h1 + orig.height; // xy\n\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty; // xy\n\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty; // xy\n\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty; // xy\n\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  };\n  /**\n  *\n  * Renders the object using the WebGL renderer\n  *\n  * @private\n  * @param {PIXI.WebGLRenderer} renderer - The webgl renderer to use.\n  */\n\n\n  Sprite.prototype._renderWebGL = function _renderWebGL(renderer) {\n    this.calculateVertices();\n    renderer.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  };\n  /**\n  * Renders the object using the Canvas renderer\n  *\n  * @private\n  * @param {PIXI.CanvasRenderer} renderer - The renderer\n  */\n\n\n  Sprite.prototype._renderCanvas = function _renderCanvas(renderer) {\n    renderer.plugins[this.pluginName].render(this);\n  };\n  /**\n   * Updates the bounds of the sprite.\n   *\n   * @private\n   */\n\n\n  Sprite.prototype._calculateBounds = function _calculateBounds() {\n    var trim = this._texture.trim;\n    var orig = this._texture.orig; // First lets check to see if the current texture has a trim..\n\n    if (!trim || trim.width === orig.width && trim.height === orig.height) {\n      // no trim! lets use the usual calculations..\n      this.calculateVertices();\n\n      this._bounds.addQuad(this.vertexData);\n    } else {\n      // lets calculate a special trimmed bounds...\n      this.calculateTrimmedVertices();\n\n      this._bounds.addQuad(this.vertexTrimmedData);\n    }\n  };\n  /**\n   * Gets the local bounds of the sprite object.\n   *\n   * @param {PIXI.Rectangle} rect - The output rectangle.\n   * @return {PIXI.Rectangle} The bounds.\n   */\n\n\n  Sprite.prototype.getLocalBounds = function getLocalBounds(rect) {\n    // we can do a fast local bounds if the sprite has no children!\n    if (this.children.length === 0) {\n      this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n      this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n      this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n      this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new _math.Rectangle();\n        }\n\n        rect = this._localBoundsRect;\n      }\n\n      return this._bounds.getRectangle(rect);\n    }\n\n    return _Container.prototype.getLocalBounds.call(this, rect);\n  };\n  /**\n   * Tests if a point is inside this sprite\n   *\n   * @param {PIXI.Point} point - the point to test\n   * @return {boolean} the result of the test\n   */\n\n\n  Sprite.prototype.containsPoint = function containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    var width = this._texture.orig.width;\n    var height = this._texture.orig.height;\n    var x1 = -width * this.anchor.x;\n    var y1 = 0;\n\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      y1 = -height * this.anchor.y;\n\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Destroys this sprite and optionally its texture and children\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n\n\n  Sprite.prototype.destroy = function destroy(options) {\n    _Container.prototype.destroy.call(this, options);\n\n    this._texture.off('update', this._onTextureUpdate, this);\n\n    this._anchor = null;\n    var destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n    if (destroyTexture) {\n      var destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n\n    this._texture = null;\n    this.shader = null;\n  }; // some helper functions..\n\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   *\n   * @static\n   * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from\n   * @return {PIXI.Sprite} The newly created sprite\n   */\n\n\n  Sprite.from = function from(source) {\n    return new Sprite(_Texture2.default.from(source));\n  };\n  /**\n   * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n   * The frame ids are created when a Texture packer file has been loaded\n   *\n   * @static\n   * @param {string} frameId - The frame Id of the texture in the cache\n   * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the frameId\n   */\n\n\n  Sprite.fromFrame = function fromFrame(frameId) {\n    var texture = _utils.TextureCache[frameId];\n\n    if (!texture) {\n      throw new Error('The frameId \"' + frameId + '\" does not exist in the texture cache');\n    }\n\n    return new Sprite(texture);\n  };\n  /**\n   * Helper function that creates a sprite that will contain a texture based on an image url\n   * If the image is not in the texture cache it will be loaded\n   *\n   * @static\n   * @param {string} imageId - The image url of the texture\n   * @param {boolean} [crossorigin=(auto)] - if you want to specify the cross-origin parameter\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,\n   *  see {@link PIXI.SCALE_MODES} for possible values\n   * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the image id\n   */\n\n\n  Sprite.fromImage = function fromImage(imageId, crossorigin, scaleMode) {\n    return new Sprite(_Texture2.default.fromImage(imageId, crossorigin, scaleMode));\n  };\n  /**\n   * The width of the sprite, setting this will actually modify the scale to achieve the value set\n   *\n   * @member {number}\n   */\n\n\n  _createClass(Sprite, [{\n    key: 'width',\n    get: function get() {\n      return Math.abs(this.scale.x) * this._texture.orig.width;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      var s = (0, _utils.sign)(this.scale.x) || 1;\n      this.scale.x = s * value / this._texture.orig.width;\n      this._width = value;\n    }\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'height',\n    get: function get() {\n      return Math.abs(this.scale.y) * this._texture.orig.height;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      var s = (0, _utils.sign)(this.scale.y) || 1;\n      this.scale.y = s * value / this._texture.orig.height;\n      this._height = value;\n    }\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 or taken from the {@link PIXI.Texture|Texture} passed to the constructor.\n     * Setting the texture at a later point of time does not change the anchor.\n     *\n     * 0,0 means the texture's origin is the top left, 0.5,0.5 is the center, 1,1 the bottom right corner.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n\n  }, {\n    key: 'anchor',\n    get: function get() {\n      return this._anchor;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._anchor.copy(value);\n    }\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n\n  }, {\n    key: 'tint',\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     */\n\n  }, {\n    key: 'texture',\n    get: function get() {\n      return this._texture;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      if (this._texture === value) {\n        return;\n      }\n\n      this._texture = value || _Texture2.default.EMPTY;\n      this.cachedTint = 0xFFFFFF;\n      this._textureID = -1;\n      this._textureTrimmedID = -1;\n\n      if (value) {\n        // wait for the texture to load\n        if (value.baseTexture.hasLoaded) {\n          this._onTextureUpdate();\n        } else {\n          value.once('update', this._onTextureUpdate, this);\n        }\n      }\n    }\n  }]);\n\n  return Sprite;\n}(_Container3.default);\n\nexports.default = Sprite;","map":{"version":3,"sources":["../../../src/core/sprites/Sprite.js"],"names":["tempPoint","Sprite","texture","_onTextureUpdate","_onAnchorUpdate","calculateVertices","wt","a","b","c","d","tx","ty","vertexData","trim","orig","anchor","w0","w1","h0","h1","calculateTrimmedVertices","_renderWebGL","renderer","_renderCanvas","_calculateBounds","getLocalBounds","rect","containsPoint","point","width","height","x1","y1","destroy","options","destroyTexture","destroyBaseTexture","from","source","fromFrame","frameId","fromImage","imageId","crossorigin","scaleMode","Math","value","s"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAAA,GAAY,IAAA,KAAA,CAAlB,KAAkB,EAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBqBC,M;;AAEjB;;;;;AAGA,WAAA,MAAA,CAAA,OAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AAGI;;;;;;;;;;;;;;AAHJ,QAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EACI,UAAA,CAAA,IAAA,CADJ,IACI,CADJ,CAAA;;AAeI,IAAA,KAAA,CAAA,OAAA,GAAe,IAAA,KAAA,CAAA,eAAA,CACX,KAAA,CADW,eAAA,EAAA,KAAA,EAGVC,OAAAA,GAAUA,OAAAA,CAAAA,aAAAA,CAAVA,CAAAA,GAHU,CAAA,EAIVA,OAAAA,GAAUA,OAAAA,CAAAA,aAAAA,CAAVA,CAAAA,GAJL,CAAe,CAAf;AAOA;;;;;;;AAMA,IAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AAEA;;;;;;;AAMA,IAAA,KAAA,CAAA,MAAA,GAAA,CAAA;AAEA;;;;;;;AAMA,IAAA,KAAA,CAAA,OAAA,GAAA,CAAA;AAEA;;;;;;;;AAOA,IAAA,KAAA,CAAA,KAAA,GAAA,IAAA;AACA,IAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AACA,IAAA,KAAA,CAAA,IAAA,GAAA,QAAA;AAEA;;;;;;;;AAOA,IAAA,KAAA,CAAA,SAAA,GAAiB,MAAA,CAAA,WAAA,CAAjB,MAAA;AAEA;;;;;;AAKA,IAAA,KAAA,CAAA,MAAA,GAAA,IAAA;AAEA;;;;;;;;AAOA,IAAA,KAAA,CAAA,UAAA,GAAA,QAAA,CAhFJ,CAkFI;;AACA,IAAA,KAAA,CAAA,OAAA,GAAeA,OAAAA,IAAW,SAAA,CAAA,OAAA,CAA1B,KAAA;AAEA;;;;;;;AAMA,IAAA,KAAA,CAAA,UAAA,GAAkB,IAAA,YAAA,CAAlB,CAAkB,CAAlB;AAEA;;;;;;;AAMA,IAAA,KAAA,CAAA,iBAAA,GAAA,IAAA;AAEA,IAAA,KAAA,CAAA,YAAA,GAAoB,CAApB,CAAA;AACA,IAAA,KAAA,CAAA,UAAA,GAAkB,CAAlB,CAAA;AAEA,IAAA,KAAA,CAAA,mBAAA,GAA2B,CAA3B,CAAA;AACA,IAAA,KAAA,CAAA,iBAAA,GAAyB,CAAzB,CAAA;AAEA;;;;;;;;AAOA,IAAA,KAAA,CAAA,UAAA,GAAA,QAAA;AAlHJ,WAAA,KAAA;AAmHC;AAED;;;;;;;mBAKAC,gB,+BACA;AACI,SAAA,UAAA,GAAkB,CAAlB,CAAA;AACA,SAAA,iBAAA,GAAyB,CAAzB,CAAA;AACA,SAAA,UAAA,GAAA,QAAA,CAHJ,CAKI;;AACA,QAAI,KAAJ,MAAA,EACA;AACI,WAAA,KAAA,CAAA,CAAA,GAAe,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,KAAA,KAAA,CAAL,CAAA,IAAqB,KAArB,MAAA,GAAmC,KAAA,QAAA,CAAA,IAAA,CAAlD,KAAA;AACH;;AAED,QAAI,KAAJ,OAAA,EACA;AACI,WAAA,KAAA,CAAA,CAAA,GAAe,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,KAAA,KAAA,CAAL,CAAA,IAAqB,KAArB,OAAA,GAAoC,KAAA,QAAA,CAAA,IAAA,CAAnD,MAAA;AACH;;AAGL;;;;;;;mBAKAC,e,8BACA;AACI,SAAA,YAAA,GAAoB,CAApB,CAAA;AACA,SAAA,mBAAA,GAA2B,CAA3B,CAAA;;AAGJ;;;;;mBAGAC,iB,gCACA;AACI,QAAI,KAAA,YAAA,KAAsB,KAAA,SAAA,CAAtB,QAAA,IAAiD,KAAA,UAAA,KAAoB,KAAA,QAAA,CAAzE,SAAA,EACA;AACI;AACH;;AAED,SAAA,YAAA,GAAoB,KAAA,SAAA,CAApB,QAAA;AACA,SAAA,UAAA,GAAkB,KAAA,QAAA,CAAlB,SAAA,CAPJ,CASI;;AAEA,QAAMH,OAAAA,GAAU,KAAhB,QAAA;AACA,QAAMI,EAAAA,GAAK,KAAA,SAAA,CAAX,cAAA;AACA,QAAMC,CAAAA,GAAID,EAAAA,CAAV,CAAA;AACA,QAAME,CAAAA,GAAIF,EAAAA,CAAV,CAAA;AACA,QAAMG,CAAAA,GAAIH,EAAAA,CAAV,CAAA;AACA,QAAMI,CAAAA,GAAIJ,EAAAA,CAAV,CAAA;AACA,QAAMK,EAAAA,GAAKL,EAAAA,CAAX,EAAA;AACA,QAAMM,EAAAA,GAAKN,EAAAA,CAAX,EAAA;AACA,QAAMO,UAAAA,GAAa,KAAnB,UAAA;AACA,QAAMC,IAAAA,GAAOZ,OAAAA,CAAb,IAAA;AACA,QAAMa,IAAAA,GAAOb,OAAAA,CAAb,IAAA;AACA,QAAMc,MAAAA,GAAS,KAAf,OAAA;AAEA,QAAIC,EAAAA,GAAJ,CAAA;AACA,QAAIC,EAAAA,GAAJ,CAAA;AACA,QAAIC,EAAAA,GAAJ,CAAA;AACA,QAAIC,EAAAA,GAAJ,CAAA;;AAEA,QAAA,IAAA,EACA;AACI;AACA;AACAF,MAAAA,EAAAA,GAAKJ,IAAAA,CAAAA,CAAAA,GAAUE,MAAAA,CAAAA,EAAAA,GAAYD,IAAAA,CAA3BG,KAAAA;AACAD,MAAAA,EAAAA,GAAKC,EAAAA,GAAKJ,IAAAA,CAAVG,KAAAA;AAEAG,MAAAA,EAAAA,GAAKN,IAAAA,CAAAA,CAAAA,GAAUE,MAAAA,CAAAA,EAAAA,GAAYD,IAAAA,CAA3BK,MAAAA;AACAD,MAAAA,EAAAA,GAAKC,EAAAA,GAAKN,IAAAA,CAAVK,MAAAA;AARJ,KAAA,MAWA;AACID,MAAAA,EAAAA,GAAK,CAACF,MAAAA,CAAD,EAAA,GAAaD,IAAAA,CAAlBG,KAAAA;AACAD,MAAAA,EAAAA,GAAKC,EAAAA,GAAKH,IAAAA,CAAVE,KAAAA;AAEAG,MAAAA,EAAAA,GAAK,CAACJ,MAAAA,CAAD,EAAA,GAAaD,IAAAA,CAAlBK,MAAAA;AACAD,MAAAA,EAAAA,GAAKC,EAAAA,GAAKL,IAAAA,CAAVI,MAAAA;AACH,KA9CL,CAgDI;;;AACAN,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA,CAlDJ,CAoDI;;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA,CAtDJ,CAwDK;;AACDA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA,CA1DJ,CA4DI;;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA;;AAGJ;;;;;;mBAIAQ,wB,uCACA;AACI,QAAI,CAAC,KAAL,iBAAA,EACA;AACI,WAAA,iBAAA,GAAyB,IAAA,YAAA,CAAzB,CAAyB,CAAzB;AAFJ,KAAA,MAIK,IAAI,KAAA,mBAAA,KAA6B,KAAA,SAAA,CAA7B,QAAA,IAAwD,KAAA,iBAAA,KAA2B,KAAA,QAAA,CAAvF,SAAA,EACL;AACI;AACH;;AAED,SAAA,mBAAA,GAA2B,KAAA,SAAA,CAA3B,QAAA;AACA,SAAA,iBAAA,GAAyB,KAAA,QAAA,CAAzB,SAAA,CAXJ,CAaI;;AACA,QAAMnB,OAAAA,GAAU,KAAhB,QAAA;AACA,QAAMW,UAAAA,GAAa,KAAnB,iBAAA;AACA,QAAME,IAAAA,GAAOb,OAAAA,CAAb,IAAA;AACA,QAAMc,MAAAA,GAAS,KAAf,OAAA,CAjBJ,CAmBI;;AACA,QAAMV,EAAAA,GAAK,KAAA,SAAA,CAAX,cAAA;AACA,QAAMC,CAAAA,GAAID,EAAAA,CAAV,CAAA;AACA,QAAME,CAAAA,GAAIF,EAAAA,CAAV,CAAA;AACA,QAAMG,CAAAA,GAAIH,EAAAA,CAAV,CAAA;AACA,QAAMI,CAAAA,GAAIJ,EAAAA,CAAV,CAAA;AACA,QAAMK,EAAAA,GAAKL,EAAAA,CAAX,EAAA;AACA,QAAMM,EAAAA,GAAKN,EAAAA,CAAX,EAAA;AAEA,QAAMY,EAAAA,GAAK,CAACF,MAAAA,CAAD,EAAA,GAAaD,IAAAA,CAAxB,KAAA;AACA,QAAME,EAAAA,GAAKC,EAAAA,GAAKH,IAAAA,CAAhB,KAAA;AAEA,QAAMK,EAAAA,GAAK,CAACJ,MAAAA,CAAD,EAAA,GAAaD,IAAAA,CAAxB,MAAA;AACA,QAAMI,EAAAA,GAAKC,EAAAA,GAAKL,IAAAA,CAAhB,MAAA,CAhCJ,CAkCI;;AACAF,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA,CApCJ,CAsCI;;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA,CAxCJ,CA0CI;;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA,CA5CJ,CA8CI;;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBN,CAAAA,GAAD,EAACA,GAAWE,CAAAA,GAAZ,EAACF,GAAjBM,EAAAA;AACAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,GAAiBH,CAAAA,GAAD,EAACA,GAAWF,CAAAA,GAAZ,EAACE,GAAjBG,EAAAA;;AAGJ;;;;;;;;;mBAOAS,Y,yBAAaC,Q,EACb;AACI,SAAA,iBAAA;AAEAA,IAAAA,QAAAA,CAAAA,iBAAAA,CAA2BA,QAAAA,CAAAA,OAAAA,CAAiB,KAA5CA,UAA2BA,CAA3BA;AACAA,IAAAA,QAAAA,CAAAA,OAAAA,CAAiB,KAAjBA,UAAAA,EAAAA,MAAAA,CAAAA,IAAAA;;AAGJ;;;;;;;;mBAMAC,a,0BAAcD,Q,EACd;AACIA,IAAAA,QAAAA,CAAAA,OAAAA,CAAiB,KAAjBA,UAAAA,EAAAA,MAAAA,CAAAA,IAAAA;;AAGJ;;;;;;;mBAKAE,gB,+BACA;AACI,QAAMX,IAAAA,GAAO,KAAA,QAAA,CAAb,IAAA;AACA,QAAMC,IAAAA,GAAO,KAAA,QAAA,CAAb,IAAA,CAFJ,CAII;;AACA,QAAI,CAAA,IAAA,IAAUD,IAAAA,CAAAA,KAAAA,KAAeC,IAAAA,CAAfD,KAAAA,IAA6BA,IAAAA,CAAAA,MAAAA,KAAgBC,IAAAA,CAA3D,MAAA,EACA;AACI;AACA,WAAA,iBAAA;;AACA,WAAA,OAAA,CAAA,OAAA,CAAqB,KAArB,UAAA;AAJJ,KAAA,MAOA;AACI;AACA,WAAA,wBAAA;;AACA,WAAA,OAAA,CAAA,OAAA,CAAqB,KAArB,iBAAA;AACH;;AAGL;;;;;;;;mBAMAW,c,2BAAeC,I,EACf;AACI;AACA,QAAI,KAAA,QAAA,CAAA,MAAA,KAAJ,CAAA,EACA;AACI,WAAA,OAAA,CAAA,IAAA,GAAoB,KAAA,QAAA,CAAA,IAAA,CAAA,KAAA,GAA2B,CAAC,KAAA,OAAA,CAAhD,EAAA;AACA,WAAA,OAAA,CAAA,IAAA,GAAoB,KAAA,QAAA,CAAA,IAAA,CAAA,MAAA,GAA4B,CAAC,KAAA,OAAA,CAAjD,EAAA;AACA,WAAA,OAAA,CAAA,IAAA,GAAoB,KAAA,QAAA,CAAA,IAAA,CAAA,KAAA,IAA4B,IAAI,KAAA,OAAA,CAApD,EAAoB,CAApB;AACA,WAAA,OAAA,CAAA,IAAA,GAAoB,KAAA,QAAA,CAAA,IAAA,CAAA,MAAA,IAA6B,IAAI,KAAA,OAAA,CAArD,EAAoB,CAApB;;AAEA,UAAI,CAAJ,IAAA,EACA;AACI,YAAI,CAAC,KAAL,gBAAA,EACA;AACI,eAAA,gBAAA,GAAwB,IAAA,KAAA,CAAxB,SAAwB,EAAxB;AACH;;AAEDA,QAAAA,IAAAA,GAAO,KAAPA,gBAAAA;AACH;;AAED,aAAO,KAAA,OAAA,CAAA,YAAA,CAAP,IAAO,CAAP;AACH;;AAED,WAAO,UAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,EAAP,IAAO,CAAP;;AAGJ;;;;;;;;mBAMAC,a,0BAAcC,K,EACd;AACI,SAAA,cAAA,CAAA,YAAA,CAAA,KAAA,EAAA,SAAA;AAEA,QAAMC,KAAAA,GAAQ,KAAA,QAAA,CAAA,IAAA,CAAd,KAAA;AACA,QAAMC,MAAAA,GAAS,KAAA,QAAA,CAAA,IAAA,CAAf,MAAA;AACA,QAAMC,EAAAA,GAAK,CAAA,KAAA,GAAS,KAAA,MAAA,CAApB,CAAA;AACA,QAAIC,EAAAA,GAAJ,CAAA;;AAEA,QAAIjC,SAAAA,CAAAA,CAAAA,IAAAA,EAAAA,IAAqBA,SAAAA,CAAAA,CAAAA,GAAcgC,EAAAA,GAAvC,KAAA,EACA;AACIC,MAAAA,EAAAA,GAAK,CAAA,MAAA,GAAU,KAAA,MAAA,CAAfA,CAAAA;;AAEA,UAAIjC,SAAAA,CAAAA,CAAAA,IAAAA,EAAAA,IAAqBA,SAAAA,CAAAA,CAAAA,GAAciC,EAAAA,GAAvC,MAAA,EACA;AACI,eAAA,IAAA;AACH;AACJ;;AAED,WAAA,KAAA;;AAGJ;;;;;;;;;;;;mBAUAC,O,oBAAQC,O,EACR;AACI,IAAA,UAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,OAAA;;AAEA,SAAA,QAAA,CAAA,GAAA,CAAA,QAAA,EAA4B,KAA5B,gBAAA,EAAA,IAAA;;AAEA,SAAA,OAAA,GAAA,IAAA;AAEA,QAAMC,cAAAA,GAAiB,OAAA,OAAA,KAAA,SAAA,GAAA,OAAA,GAAyCD,OAAAA,IAAWA,OAAAA,CAA3E,OAAA;;AAEA,QAAA,cAAA,EACA;AACI,UAAME,kBAAAA,GAAqB,OAAA,OAAA,KAAA,SAAA,GAAA,OAAA,GAAyCF,OAAAA,IAAWA,OAAAA,CAA/E,WAAA;;AAEA,WAAA,QAAA,CAAA,OAAA,CAAsB,CAAC,CAAvB,kBAAA;AACH;;AAED,SAAA,QAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,IAAA;KAGJ;;AAEA;;;;;;;;;;SAQOG,I,iBAAKC,M,EACZ;AACI,WAAO,IAAA,MAAA,CAAW,SAAA,CAAA,OAAA,CAAA,IAAA,CAAlB,MAAkB,CAAX,CAAP;;AAGJ;;;;;;;;;;SAQOC,S,sBAAUC,O,EACjB;AACI,QAAMvC,OAAAA,GAAU,MAAA,CAAA,YAAA,CAAhB,OAAgB,CAAhB;;AAEA,QAAI,CAAJ,OAAA,EACA;AACI,YAAM,IAAA,KAAA,CAAA,kBAAA,OAAA,GAAN,uCAAM,CAAN;AACH;;AAED,WAAO,IAAA,MAAA,CAAP,OAAO,CAAP;;AAGJ;;;;;;;;;;;;;SAWOwC,S,sBAAUC,O,EAASC,W,EAAaC,S,EACvC;AACI,WAAO,IAAA,MAAA,CAAW,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,EAAA,WAAA,EAAlB,SAAkB,CAAX,CAAP;;AAGJ;;;;;;;;;wBAMA;AACI,aAAOC,IAAAA,CAAAA,GAAAA,CAAS,KAAA,KAAA,CAATA,CAAAA,IAAyB,KAAA,QAAA,CAAA,IAAA,CAAhC,KAAA;;sBAGMC,K,EAAO;AACjB;AACI,UAAMC,CAAAA,GAAI,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,KAAA,KAAA,CAAL,CAAA,KAAV,CAAA;AAEA,WAAA,KAAA,CAAA,CAAA,GAAeA,CAAAA,GAAAA,KAAAA,GAAY,KAAA,QAAA,CAAA,IAAA,CAA3B,KAAA;AACA,WAAA,MAAA,GAAA,KAAA;AACH;AAED;;;;;;;;wBAMA;AACI,aAAOF,IAAAA,CAAAA,GAAAA,CAAS,KAAA,KAAA,CAATA,CAAAA,IAAyB,KAAA,QAAA,CAAA,IAAA,CAAhC,MAAA;;sBAGOC,K,EAAO;AAClB;AACI,UAAMC,CAAAA,GAAI,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,KAAA,KAAA,CAAL,CAAA,KAAV,CAAA;AAEA,WAAA,KAAA,CAAA,CAAA,GAAeA,CAAAA,GAAAA,KAAAA,GAAY,KAAA,QAAA,CAAA,IAAA,CAA3B,MAAA;AACA,WAAA,OAAA,GAAA,KAAA;AACH;AAED;;;;;;;;;;;;wBAUA;AACI,aAAO,KAAP,OAAA;;sBAGOD,K,EAAO;AAClB;AACI,WAAA,OAAA,CAAA,IAAA,CAAA,KAAA;AACH;AAED;;;;;;;;;;wBAQA;AACI,aAAO,KAAP,KAAA;;sBAGKA,K,EAAO;AAChB;AACI,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,QAAA,GAAgB,CAACA,KAAAA,IAAD,EAAA,KAAiBA,KAAAA,GAAjB,MAAA,KAAoC,CAACA,KAAAA,GAAD,IAAA,KAApD,EAAgB,CAAhB;AACH;AAED;;;;;;;;wBAMA;AACI,aAAO,KAAP,QAAA;;sBAGQA,K,EAAO;AACnB;AACI,UAAI,KAAA,QAAA,KAAJ,KAAA,EACA;AACI;AACH;;AAED,WAAA,QAAA,GAAgBA,KAAAA,IAAS,SAAA,CAAA,OAAA,CAAzB,KAAA;AACA,WAAA,UAAA,GAAA,QAAA;AAEA,WAAA,UAAA,GAAkB,CAAlB,CAAA;AACA,WAAA,iBAAA,GAAyB,CAAzB,CAAA;;AAEA,UAAA,KAAA,EACA;AACI;AACA,YAAIA,KAAAA,CAAAA,WAAAA,CAAJ,SAAA,EACA;AACI,eAAA,gBAAA;AAFJ,SAAA,MAKA;AACIA,UAAAA,KAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EAAqB,KAArBA,gBAAAA,EAAAA,IAAAA;AACH;AACJ;AACJ;;;;;;kBAvkBgB9C,M","sourcesContent":["import { Point, ObservablePoint, Rectangle } from '../math';\nimport { sign, TextureCache } from '../utils';\nimport { BLEND_MODES } from '../const';\nimport Texture from '../textures/Texture';\nimport Container from '../display/Container';\n\nconst tempPoint = new Point();\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = new PIXI.Sprite.fromImage('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet}:\n *\n * ```js\n * PIXI.loader.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.loader.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport default class Sprite extends Container\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture for this sprite\n     */\n    constructor(texture)\n    {\n        super();\n\n        /**\n         * The anchor sets the origin point of the texture.\n         * The default is 0,0 or taken from the {@link PIXI.Texture#defaultAnchor|Texture}\n         * passed to the constructor. A value of 0,0 means the texture's origin is the top left.\n         * Setting the anchor to 0.5,0.5 means the texture's origin is centered.\n         * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner.\n         * Note: Updating the {@link PIXI.Texture#defaultAnchor} after a Texture is\n         * created does _not_ update the Sprite's anchor values.\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        /**\n         * The texture that the sprite is using\n         *\n         * @private\n         * @member {PIXI.Texture}\n         */\n        this._texture = null;\n\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._width = 0;\n\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._height = 0;\n\n        /**\n         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._tint = null;\n        this._tintRGB = null;\n        this.tint = 0xFFFFFF;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * The shader that will be used to render the sprite. Set to null to remove a current shader.\n         *\n         * @member {PIXI.Filter|PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * An internal cached value of the tint.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this.cachedTint = 0xFFFFFF;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n\n        /**\n         * this is used to store the vertex data of the sprite (basically a quad)\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexData = new Float32Array(8);\n\n        /**\n         * This is used to calculate the bounds of the object IF it is a trimmed sprite\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_renderWebGL' & '_renderCanvas' methods.\n         *\n         * @member {string}\n         * @default 'sprite'\n         */\n        this.pluginName = 'sprite';\n    }\n\n    /**\n     * When the texture is updated, this event will fire to update the scale and frame\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this.cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /**\n     * Called when the anchor position updates.\n     *\n     * @private\n     */\n    _onAnchorUpdate()\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /**\n     * calculates worldTransform * vertices, store it in vertexData\n     */\n    calculateVertices()\n    {\n        if (this._transformID === this.transform._worldID && this._textureID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = this._texture._updateID;\n\n        // set the vertex data\n\n        const texture = this._texture;\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n         // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n     * This is used to ensure that the true width and height of a trimmed texture is respected\n     */\n    calculateTrimmedVertices()\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n    *\n    * Renders the object using the WebGL renderer\n    *\n    * @private\n    * @param {PIXI.WebGLRenderer} renderer - The webgl renderer to use.\n    */\n    _renderWebGL(renderer)\n    {\n        this.calculateVertices();\n\n        renderer.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n    * Renders the object using the Canvas renderer\n    *\n    * @private\n    * @param {PIXI.CanvasRenderer} renderer - The renderer\n    */\n    _renderCanvas(renderer)\n    {\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n     * Updates the bounds of the sprite.\n     *\n     * @private\n     */\n    _calculateBounds()\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n        this.shader = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from\n     * @return {PIXI.Sprite} The newly created sprite\n     */\n    static from(source)\n    {\n        return new Sprite(Texture.from(source));\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n     * The frame ids are created when a Texture packer file has been loaded\n     *\n     * @static\n     * @param {string} frameId - The frame Id of the texture in the cache\n     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the frameId\n     */\n    static fromFrame(frameId)\n    {\n        const texture = TextureCache[frameId];\n\n        if (!texture)\n        {\n            throw new Error(`The frameId \"${frameId}\" does not exist in the texture cache`);\n        }\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture based on an image url\n     * If the image is not in the texture cache it will be loaded\n     *\n     * @static\n     * @param {string} imageId - The image url of the texture\n     * @param {boolean} [crossorigin=(auto)] - if you want to specify the cross-origin parameter\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,\n     *  see {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the image id\n     */\n    static fromImage(imageId, crossorigin, scaleMode)\n    {\n        return new Sprite(Texture.fromImage(imageId, crossorigin, scaleMode));\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 or taken from the {@link PIXI.Texture|Texture} passed to the constructor.\n     * Setting the texture at a later point of time does not change the anchor.\n     *\n     * 0,0 means the texture's origin is the top left, 0.5,0.5 is the center, 1,1 the bottom right corner.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get anchor()\n    {\n        return this._anchor;\n    }\n\n    set anchor(value) // eslint-disable-line require-jsdoc\n    {\n        this._anchor.copy(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n\n    set tint(value) // eslint-disable-line require-jsdoc\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    set texture(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this.cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.hasLoaded)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}