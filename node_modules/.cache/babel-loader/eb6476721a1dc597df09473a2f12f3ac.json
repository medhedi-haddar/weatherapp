{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _generateBlurVertSource = require('./generateBlurVertSource');\n\nvar _generateBlurVertSource2 = _interopRequireDefault(_generateBlurVertSource);\n\nvar _generateBlurFragSource = require('./generateBlurFragSource');\n\nvar _generateBlurFragSource2 = _interopRequireDefault(_generateBlurFragSource);\n\nvar _getMaxBlurKernelSize = require('./getMaxBlurKernelSize');\n\nvar _getMaxBlurKernelSize2 = _interopRequireDefault(_getMaxBlurKernelSize);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The BlurYFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\n\n\nvar BlurYFilter = function (_core$Filter) {\n  _inherits(BlurYFilter, _core$Filter);\n  /**\n   * @param {number} strength - The strength of the blur filter.\n   * @param {number} quality - The quality of the blur filter.\n   * @param {number} resolution - The resolution of the blur filter.\n   * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n\n\n  function BlurYFilter(strength, quality, resolution, kernelSize) {\n    _classCallCheck(this, BlurYFilter);\n\n    kernelSize = kernelSize || 5;\n    var vertSrc = (0, _generateBlurVertSource2.default)(kernelSize, false);\n    var fragSrc = (0, _generateBlurFragSource2.default)(kernelSize);\n\n    var _this = _possibleConstructorReturn(this, _core$Filter.call(this, // vertex shader\n    vertSrc, // fragment shader\n    fragSrc));\n\n    _this.resolution = resolution || core.settings.RESOLUTION;\n    _this._quality = 0;\n    _this.quality = quality || 4;\n    _this.strength = strength || 8;\n    _this.firstRun = true;\n    return _this;\n  }\n  /**\n   * Applies the filter.\n   *\n   * @param {PIXI.FilterManager} filterManager - The manager.\n   * @param {PIXI.RenderTarget} input - The input target.\n   * @param {PIXI.RenderTarget} output - The output target.\n   * @param {boolean} clear - Should the output be cleared before rendering?\n   */\n\n\n  BlurYFilter.prototype.apply = function apply(filterManager, input, output, clear) {\n    if (this.firstRun) {\n      var gl = filterManager.renderer.gl;\n      var kernelSize = (0, _getMaxBlurKernelSize2.default)(gl);\n      this.vertexSrc = (0, _generateBlurVertSource2.default)(kernelSize, false);\n      this.fragmentSrc = (0, _generateBlurFragSource2.default)(kernelSize);\n      this.firstRun = false;\n    }\n\n    this.uniforms.strength = 1 / output.size.height * (output.size.height / input.size.height);\n    this.uniforms.strength *= this.strength;\n    this.uniforms.strength /= this.passes;\n\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clear);\n    } else {\n      var renderTarget = filterManager.getRenderTarget(true);\n      var flip = input;\n      var flop = renderTarget;\n\n      for (var i = 0; i < this.passes - 1; i++) {\n        filterManager.applyFilter(this, flip, flop, true);\n        var temp = flop;\n        flop = flip;\n        flip = temp;\n      }\n\n      filterManager.applyFilter(this, flip, output, clear);\n      filterManager.returnRenderTarget(renderTarget);\n    }\n  };\n  /**\n   * Sets the strength of both the blur.\n   *\n   * @member {number}\n   * @default 2\n   */\n\n\n  _createClass(BlurYFilter, [{\n    key: 'blur',\n    get: function get() {\n      return this.strength;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.padding = Math.abs(value) * 2;\n      this.strength = value;\n    }\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n\n  }, {\n    key: 'quality',\n    get: function get() {\n      return this._quality;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._quality = value;\n      this.passes = value;\n    }\n  }]);\n\n  return BlurYFilter;\n}(core.Filter);\n\nexports.default = BlurYFilter;","map":{"version":3,"sources":["../../../src/filters/blur/BlurYFilter.js"],"names":["core","BlurYFilter","Filter","kernelSize","vertSrc","fragSrc","resolution","quality","strength","apply","filterManager","input","output","clear","gl","renderTarget","flip","flop","i","temp","value","Math"],"mappings":"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","sourcesContent":["import * as core from '../../core';\nimport generateBlurVertSource from './generateBlurVertSource';\nimport generateBlurFragSource from './generateBlurFragSource';\nimport getMaxBlurKernelSize from './getMaxBlurKernelSize';\n\n/**\n * The BlurYFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class BlurYFilter extends core.Filter\n{\n    /**\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength, quality, resolution, kernelSize)\n    {\n        kernelSize = kernelSize || 5;\n        const vertSrc = generateBlurVertSource(kernelSize, false);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.resolution = resolution || core.settings.RESOLUTION;\n\n        this._quality = 0;\n\n        this.quality = quality || 4;\n        this.strength = strength || 8;\n\n        this.firstRun = true;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     * @param {boolean} clear - Should the output be cleared before rendering?\n     */\n    apply(filterManager, input, output, clear)\n    {\n        if (this.firstRun)\n        {\n            const gl = filterManager.renderer.gl;\n            const kernelSize = getMaxBlurKernelSize(gl);\n\n            this.vertexSrc = generateBlurVertSource(kernelSize, false);\n            this.fragmentSrc = generateBlurFragSource(kernelSize);\n\n            this.firstRun = false;\n        }\n\n        this.uniforms.strength = (1 / output.size.height) * (output.size.height / input.size.height);\n\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getRenderTarget(true);\n            let flip = input;\n            let flop = renderTarget;\n\n            for (let i = 0; i < this.passes - 1; i++)\n            {\n                filterManager.applyFilter(this, flip, flop, true);\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n            }\n\n            filterManager.applyFilter(this, flip, output, clear);\n\n            filterManager.returnRenderTarget(renderTarget);\n        }\n    }\n\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur()\n    {\n        return this.strength;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.padding = Math.abs(value) * 2;\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality()\n    {\n        return this._quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}