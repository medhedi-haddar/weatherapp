{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _WebGLManager2 = require('./WebGLManager');\n\nvar _WebGLManager3 = _interopRequireDefault(_WebGLManager2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\n\n\nvar StencilManager = function (_WebGLManager) {\n  _inherits(StencilManager, _WebGLManager);\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n   */\n\n\n  function StencilManager(renderer) {\n    _classCallCheck(this, StencilManager);\n\n    var _this = _possibleConstructorReturn(this, _WebGLManager.call(this, renderer));\n\n    _this.stencilMaskStack = null;\n    return _this;\n  }\n  /**\n   * Changes the mask stack that is used by this manager.\n   *\n   * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack\n   */\n\n\n  StencilManager.prototype.setMaskStack = function setMaskStack(stencilMaskStack) {\n    this.stencilMaskStack = stencilMaskStack;\n    var gl = this.renderer.gl;\n\n    if (stencilMaskStack.length === 0) {\n      gl.disable(gl.STENCIL_TEST);\n    } else {\n      gl.enable(gl.STENCIL_TEST);\n    }\n  };\n  /**\n   * Applies the Mask and adds it to the current stencil stack. @alvin\n   *\n   * @param {PIXI.Graphics} graphics - The mask\n   */\n\n\n  StencilManager.prototype.pushStencil = function pushStencil(graphics) {\n    this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n\n    this.renderer._activeRenderTarget.attachStencilBuffer();\n\n    var gl = this.renderer.gl;\n    var prevMaskCount = this.stencilMaskStack.length;\n\n    if (prevMaskCount === 0) {\n      gl.enable(gl.STENCIL_TEST);\n    }\n\n    this.stencilMaskStack.push(graphics); // Increment the reference stencil value where the new mask overlaps with the old ones.\n\n    gl.colorMask(false, false, false, false);\n    gl.stencilFunc(gl.EQUAL, prevMaskCount, this._getBitwiseMask());\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n    this.renderer.plugins.graphics.render(graphics);\n\n    this._useCurrent();\n  };\n  /**\n   * Removes the last mask from the stencil stack. @alvin\n   */\n\n\n  StencilManager.prototype.popStencil = function popStencil() {\n    this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n    var gl = this.renderer.gl;\n    var graphics = this.stencilMaskStack.pop();\n\n    if (this.stencilMaskStack.length === 0) {\n      // the stack is empty!\n      gl.disable(gl.STENCIL_TEST);\n      gl.clear(gl.STENCIL_BUFFER_BIT);\n      gl.clearStencil(0);\n    } else {\n      // Decrement the reference stencil value where the popped mask overlaps with the other ones\n      gl.colorMask(false, false, false, false);\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n      this.renderer.plugins.graphics.render(graphics);\n\n      this._useCurrent();\n    }\n  };\n  /**\n   * Setup renderer to use the current stencil data.\n   */\n\n\n  StencilManager.prototype._useCurrent = function _useCurrent() {\n    var gl = this.renderer.gl;\n    gl.colorMask(true, true, true, true);\n    gl.stencilFunc(gl.EQUAL, this.stencilMaskStack.length, this._getBitwiseMask());\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n  };\n  /**\n   * Fill 1s equal to the number of acitve stencil masks.\n   *\n   * @return {number} The bitwise mask.\n   */\n\n\n  StencilManager.prototype._getBitwiseMask = function _getBitwiseMask() {\n    return (1 << this.stencilMaskStack.length) - 1;\n  };\n  /**\n   * Destroys the mask stack.\n   *\n   */\n\n\n  StencilManager.prototype.destroy = function destroy() {\n    _WebGLManager3.default.prototype.destroy.call(this);\n\n    this.stencilMaskStack.stencilStack = null;\n  };\n\n  return StencilManager;\n}(_WebGLManager3.default);\n\nexports.default = StencilManager;","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/managers/StencilManager.js"],"names":["StencilManager","setMaskStack","stencilMaskStack","gl","pushStencil","graphics","prevMaskCount","popStencil","_useCurrent","_getBitwiseMask","destroy"],"mappings":"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","sourcesContent":["import WebGLManager from './WebGLManager';\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nexport default class StencilManager extends WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n        this.stencilMaskStack = null;\n    }\n\n    /**\n     * Changes the mask stack that is used by this manager.\n     *\n     * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack\n     */\n    setMaskStack(stencilMaskStack)\n    {\n        this.stencilMaskStack = stencilMaskStack;\n\n        const gl = this.renderer.gl;\n\n        if (stencilMaskStack.length === 0)\n        {\n            gl.disable(gl.STENCIL_TEST);\n        }\n        else\n        {\n            gl.enable(gl.STENCIL_TEST);\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack. @alvin\n     *\n     * @param {PIXI.Graphics} graphics - The mask\n     */\n    pushStencil(graphics)\n    {\n        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n\n        this.renderer._activeRenderTarget.attachStencilBuffer();\n\n        const gl = this.renderer.gl;\n        const prevMaskCount = this.stencilMaskStack.length;\n\n        if (prevMaskCount === 0)\n        {\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        this.stencilMaskStack.push(graphics);\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.colorMask(false, false, false, false);\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n        this.renderer.plugins.graphics.render(graphics);\n\n        this._useCurrent();\n    }\n\n    /**\n     * Removes the last mask from the stencil stack. @alvin\n     */\n    popStencil()\n    {\n        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n\n        const gl = this.renderer.gl;\n        const graphics = this.stencilMaskStack.pop();\n\n        if (this.stencilMaskStack.length === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.clearStencil(0);\n        }\n        else\n        {\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.colorMask(false, false, false, false);\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n            this.renderer.plugins.graphics.render(graphics);\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     */\n    _useCurrent()\n    {\n        const gl = this.renderer.gl;\n\n        gl.colorMask(true, true, true, true);\n        gl.stencilFunc(gl.EQUAL, this.stencilMaskStack.length, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n\n    /**\n     * Fill 1s equal to the number of acitve stencil masks.\n     *\n     * @return {number} The bitwise mask.\n     */\n    _getBitwiseMask()\n    {\n        return (1 << this.stencilMaskStack.length) - 1;\n    }\n\n    /**\n     * Destroys the mask stack.\n     *\n     */\n    destroy()\n    {\n        WebGLManager.prototype.destroy.call(this);\n\n        this.stencilMaskStack.stencilStack = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}