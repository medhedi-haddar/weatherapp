{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberOf PIXI\n */\n\n\nvar TextMetrics = function () {\n  /**\n   * @param {string} text - the text that was measured\n   * @param {PIXI.TextStyle} style - the style that was measured\n   * @param {number} width - the measured width of the text\n   * @param {number} height - the measured height of the text\n   * @param {array} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param {array} lineWidths - an array of the line widths for each line matched to `lines`\n   * @param {number} lineHeight - the measured line height for this style\n   * @param {number} maxLineWidth - the maximum line width for all measured lines\n   * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  function TextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    _classCallCheck(this, TextMetrics);\n\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   *\n   * @param {string} text - the text to measure.\n   * @param {PIXI.TextStyle} style - the text style to use for measuring\n   * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n   * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n   * @return {PIXI.TextMetrics} measured width and height of the text.\n   */\n\n\n  TextMetrics.measureText = function measureText(text, style, wordWrap) {\n    var canvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TextMetrics._canvas;\n    wordWrap = wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap;\n    var font = style.toFontString();\n    var fontProperties = TextMetrics.measureFont(font);\n    var context = canvas.getContext('2d');\n    context.font = font;\n    var outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n    var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    var lineWidths = new Array(lines.length);\n    var maxLineWidth = 0;\n\n    for (var i = 0; i < lines.length; i++) {\n      var lineWidth = context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n\n    var width = maxLineWidth + style.strokeThickness;\n\n    if (style.dropShadow) {\n      width += style.dropShadowDistance;\n    }\n\n    var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n    var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) + (lines.length - 1) * (lineHeight + style.leading);\n\n    if (style.dropShadow) {\n      height += style.dropShadowDistance;\n    }\n\n    return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n  };\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   *\n   * @private\n   * @param {string} text - String to apply word wrapping to\n   * @param {PIXI.TextStyle} style - the style to use when wrapping\n   * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n   * @return {string} New string with new lines applied where required\n   */\n\n\n  TextMetrics.wordWrap = function wordWrap(text, style) {\n    var canvas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TextMetrics._canvas;\n    var context = canvas.getContext('2d');\n    var width = 0;\n    var line = '';\n    var lines = '';\n    var cache = {};\n    var letterSpacing = style.letterSpacing,\n        whiteSpace = style.whiteSpace; // How to handle whitespaces\n\n    var collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n    var collapseNewlines = TextMetrics.collapseNewlines(whiteSpace); // whether or not spaces may be added to the beginning of lines\n\n    var canPrependSpaces = !collapseSpaces; // There is letterSpacing after every char except the last one\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n    // so for convenience the above needs to be compared to width + 1 extra letterSpace\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n    // ________________________________________________\n    // And then the final space is simply no appended to each line\n\n    var wordWrapWidth = style.wordWrapWidth + letterSpacing; // break text into words, spaces and newline chars\n\n    var tokens = TextMetrics.tokenize(text);\n\n    for (var i = 0; i < tokens.length; i++) {\n      // get the word, space or newlineChar\n      var token = tokens[i]; // if word is a new line\n\n      if (TextMetrics.isNewline(token)) {\n        // keep the new line\n        if (!collapseNewlines) {\n          lines += TextMetrics.addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = '';\n          width = 0;\n          continue;\n        } // if we should collapse new lines\n        // we simply convert it into a space\n\n\n        token = ' ';\n      } // if we should collapse repeated whitespaces\n\n\n      if (collapseSpaces) {\n        // check both this and the last tokens for spaces\n        var currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n        var lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      } // get word width from cache if possible\n\n\n      var tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context); // word is longer than desired bounds\n\n      if (tokenWidth > wordWrapWidth) {\n        // if we are not already at the beginning of a line\n        if (line !== '') {\n          // start newlines for overflow words\n          lines += TextMetrics.addLine(line);\n          line = '';\n          width = 0;\n        } // break large word over multiple lines\n\n\n        if (TextMetrics.canBreakWords(token, style.breakWords)) {\n          // break word into characters\n          var characters = token.split(''); // loop the characters\n\n          for (var j = 0; j < characters.length; j++) {\n            var char = characters[j];\n            var k = 1; // we are not at the end of the token\n\n            while (characters[j + k]) {\n              var nextChar = characters[j + k];\n              var lastChar = char[char.length - 1]; // should not split chars\n\n              if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                // combine chars & move forward one\n                char += nextChar;\n              } else {\n                break;\n              }\n\n              k++;\n            }\n\n            j += char.length - 1;\n            var characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n            if (characterWidth + width > wordWrapWidth) {\n              lines += TextMetrics.addLine(line);\n              canPrependSpaces = false;\n              line = '';\n              width = 0;\n            }\n\n            line += char;\n            width += characterWidth;\n          }\n        } // run word out of the bounds\n        else {\n          // if there are words in this line already\n          // finish that line and start a new one\n          if (line.length > 0) {\n            lines += TextMetrics.addLine(line);\n            line = '';\n            width = 0;\n          }\n\n          var isLastToken = i === tokens.length - 1; // give it its own line if it's not the end\n\n          lines += TextMetrics.addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = '';\n          width = 0;\n        }\n      } // word could fit\n      else {\n        // word won't fit because of existing words\n        // start a new line\n        if (tokenWidth + width > wordWrapWidth) {\n          // if its a space we don't want it\n          canPrependSpaces = false; // add a new line\n\n          lines += TextMetrics.addLine(line); // start a new line\n\n          line = '';\n          width = 0;\n        } // don't add spaces to the beginning of lines\n\n\n        if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          // add the word to the current line\n          line += token; // update width counter\n\n          width += tokenWidth;\n        }\n      }\n    }\n\n    lines += TextMetrics.addLine(line, false);\n    return lines;\n  };\n  /**\n   * Convienience function for logging each line added during the wordWrap\n   * method\n   *\n   * @private\n   * @param  {string}   line        - The line of text to add\n   * @param  {boolean}  newLine     - Add new line character to end\n   * @return {string}   A formatted line\n   */\n\n\n  TextMetrics.addLine = function addLine(line) {\n    var newLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    line = TextMetrics.trimRight(line);\n    line = newLine ? line + '\\n' : line;\n    return line;\n  };\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   *\n   * @private\n   * @param  {string}                    key            The key\n   * @param  {number}                    letterSpacing  The letter spacing\n   * @param  {object}                    cache          The cache\n   * @param  {CanvasRenderingContext2D}  context        The canvas context\n   * @return {number}                    The from cache.\n   */\n\n\n  TextMetrics.getFromCache = function getFromCache(key, letterSpacing, cache, context) {\n    var width = cache[key];\n\n    if (width === undefined) {\n      var spacing = key.length * letterSpacing;\n      width = context.measureText(key).width + spacing;\n      cache[key] = width;\n    }\n\n    return width;\n  };\n  /**\n   * Determines whether we should collapse breaking spaces\n   *\n   * @private\n   * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n   * @return {boolean}  should collapse\n   */\n\n\n  TextMetrics.collapseSpaces = function collapseSpaces(whiteSpace) {\n    return whiteSpace === 'normal' || whiteSpace === 'pre-line';\n  };\n  /**\n   * Determines whether we should collapse newLine chars\n   *\n   * @private\n   * @param  {string}   whiteSpace  The white space\n   * @return {boolean}  should collapse\n   */\n\n\n  TextMetrics.collapseNewlines = function collapseNewlines(whiteSpace) {\n    return whiteSpace === 'normal';\n  };\n  /**\n   * trims breaking whitespaces from string\n   *\n   * @private\n   * @param  {string}  text  The text\n   * @return {string}  trimmed string\n   */\n\n\n  TextMetrics.trimRight = function trimRight(text) {\n    if (typeof text !== 'string') {\n      return '';\n    }\n\n    for (var i = text.length - 1; i >= 0; i--) {\n      var char = text[i];\n\n      if (!TextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n\n      text = text.slice(0, -1);\n    }\n\n    return text;\n  };\n  /**\n   * Determines if char is a newline.\n   *\n   * @private\n   * @param  {string}  char  The character\n   * @return {boolean}  True if newline, False otherwise.\n   */\n\n\n  TextMetrics.isNewline = function isNewline(char) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n\n    return TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0;\n  };\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * @private\n   * @param  {string}  char  The character\n   * @return {boolean}  True if whitespace, False otherwise.\n   */\n\n\n  TextMetrics.isBreakingSpace = function isBreakingSpace(char) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n\n    return TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0;\n  };\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   *\n   * @private\n   * @param  {string}  text       The text\n   * @return {array}  A tokenized array\n   */\n\n\n  TextMetrics.tokenize = function tokenize(text) {\n    var tokens = [];\n    var token = '';\n\n    if (typeof text !== 'string') {\n      return tokens;\n    }\n\n    for (var i = 0; i < text.length; i++) {\n      var char = text[i];\n\n      if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char)) {\n        if (token !== '') {\n          tokens.push(token);\n          token = '';\n        }\n\n        tokens.push(char);\n        continue;\n      }\n\n      token += char;\n    }\n\n    if (token !== '') {\n      tokens.push(token);\n    }\n\n    return tokens;\n  };\n  /**\n   * This method exists to be easily overridden\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   *\n   * @private\n   * @param  {string}  token       The token\n   * @param  {boolean}  breakWords  The style attr break words\n   * @return {boolean} whether to break word or not\n   */\n\n\n  TextMetrics.canBreakWords = function canBreakWords(token, breakWords) {\n    return breakWords;\n  };\n  /**\n   * This method exists to be easily overridden\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   *\n   * @private\n   * @param  {string}  char      The character\n   * @param  {string}  nextChar  The next character\n   * @param  {string}  token     The token/word the characters are from\n   * @param  {number}  index     The index in the token of the char\n   * @param  {boolean}  breakWords  The style attr break words\n   * @return {boolean} whether to break word or not\n   */\n\n\n  TextMetrics.canBreakChars = function canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n  {\n    return true;\n  };\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   *\n   * @static\n   * @param {string} font - String representing the style of the font\n   * @return {PIXI.TextMetrics~FontMetrics} Font properties object\n   */\n\n\n  TextMetrics.measureFont = function measureFont(font) {\n    // as this method is used for preparing assets, don't recalculate things if we don't need to\n    if (TextMetrics._fonts[font]) {\n      return TextMetrics._fonts[font];\n    }\n\n    var properties = {};\n    var canvas = TextMetrics._canvas;\n    var context = TextMetrics._context;\n    context.font = font;\n    var metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n    var width = Math.ceil(context.measureText(metricsString).width);\n    var baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n    var height = 2 * baseline;\n    baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n    canvas.width = width;\n    canvas.height = height;\n    context.fillStyle = '#f00';\n    context.fillRect(0, 0, width, height);\n    context.font = font;\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = '#000';\n    context.fillText(metricsString, 0, baseline);\n    var imagedata = context.getImageData(0, 0, width, height).data;\n    var pixels = imagedata.length;\n    var line = width * 4;\n    var i = 0;\n    var idx = 0;\n    var stop = false; // ascent. scan from top to bottom until we find a non red pixel\n\n    for (i = 0; i < baseline; ++i) {\n      for (var j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n\n      if (!stop) {\n        idx += line;\n      } else {\n        break;\n      }\n    }\n\n    properties.ascent = baseline - i;\n    idx = pixels - line;\n    stop = false; // descent. scan from bottom to top until we find a non red pixel\n\n    for (i = height; i > baseline; --i) {\n      for (var _j = 0; _j < line; _j += 4) {\n        if (imagedata[idx + _j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n\n      if (!stop) {\n        idx -= line;\n      } else {\n        break;\n      }\n    }\n\n    properties.descent = i - baseline;\n    properties.fontSize = properties.ascent + properties.descent;\n    TextMetrics._fonts[font] = properties;\n    return properties;\n  };\n  /**\n   * Clear font metrics in metrics cache.\n   *\n   * @static\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n\n\n  TextMetrics.clearMetrics = function clearMetrics() {\n    var font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    if (font) {\n      delete TextMetrics._fonts[font];\n    } else {\n      TextMetrics._fonts = {};\n    }\n  };\n\n  return TextMetrics;\n}();\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @class FontMetrics\n * @memberof PIXI.TextMetrics~\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n */\n\n\nexports.default = TextMetrics;\nvar canvas = document.createElement('canvas');\ncanvas.width = canvas.height = 10;\n/**\n * Cached canvas element for measuring text\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\n\nTextMetrics._canvas = canvas;\n/**\n * Cache for context to use.\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\n\nTextMetrics._context = canvas.getContext('2d');\n/**\n * Cache of PIXI.TextMetrics~FontMetrics objects.\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\n\nTextMetrics._fonts = {};\n/**\n * String used for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |Éq\n */\n\nTextMetrics.METRICS_STRING = '|Éq';\n/**\n * Baseline symbol for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\n\nTextMetrics.BASELINE_SYMBOL = 'M';\n/**\n * Baseline multiplier for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\n\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/**\n * Cache of new line chars.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\n\nTextMetrics._newlines = [0x000A, // line feed\n0x000D];\n/**\n * Cache of breaking spaces.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\n\nTextMetrics._breakingSpaces = [0x0009, // character tabulation\n0x0020, // space\n0x2000, // en quad\n0x2001, // em quad\n0x2002, // en space\n0x2003, // em space\n0x2004, // three-per-em space\n0x2005, // four-per-em space\n0x2006, // six-per-em space\n0x2008, // punctuation space\n0x2009, // thin space\n0x200A, // hair space\n0x205F, // medium mathematical space\n0x3000];","map":{"version":3,"sources":["../../../src/core/text/TextMetrics.js"],"names":["TextMetrics","measureText","text","style","wordWrap","canvas","_canvas","font","fontProperties","context","outputText","lines","lineWidths","maxLineWidth","i","lineWidth","Math","width","lineHeight","height","line","cache","letterSpacing","whiteSpace","collapseSpaces","collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","token","currIsBreakingSpace","lastIsBreakingSpace","tokenWidth","characters","j","char","k","nextChar","lastChar","characterWidth","isLastToken","addLine","newLine","getFromCache","key","spacing","trimRight","isNewline","isBreakingSpace","tokenize","canBreakWords","breakWords","canBreakChars","index","measureFont","properties","metricsString","baseline","imagedata","pixels","idx","stop","clearMetrics","document"],"mappings":"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","sourcesContent":["/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberOf PIXI\n */\nexport default class TextMetrics\n{\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {array} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {array} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas)\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    static wordWrap(text, style, canvas = TextMetrics._canvas)\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = token.split('');\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                   // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}   A formatted line\n     */\n    static addLine(line, newLine = true)\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            The key\n     * @param  {number}                    letterSpacing  The letter spacing\n     * @param  {object}                    cache          The cache\n     * @param  {CanvasRenderingContext2D}  context        The canvas context\n     * @return {number}                    The from cache.\n     */\n    static getFromCache(key, letterSpacing, cache, context)\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    static collapseSpaces(whiteSpace)\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace  The white space\n     * @return {boolean}  should collapse\n     */\n    static collapseNewlines(whiteSpace)\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text  The text\n     * @return {string}  trimmed string\n     */\n    static trimRight(text)\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    static isNewline(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text       The text\n     * @return {array}  A tokenized array\n     */\n    static tokenize(text)\n    {\n        const tokens = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * This method exists to be easily overridden\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @private\n     * @param  {string}  token       The token\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(token, breakWords)\n    {\n        return breakWords;\n    }\n\n    /**\n     * This method exists to be easily overridden\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @private\n     * @param  {string}  char      The character\n     * @param  {string}  nextChar  The next character\n     * @param  {string}  token     The token/word the characters are from\n     * @param  {number}  index     The index in the token of the char\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.TextMetrics~FontMetrics} Font properties object\n     */\n    static measureFont(font)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties = {};\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '')\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @class FontMetrics\n * @memberof PIXI.TextMetrics~\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n */\n\nconst canvas = document.createElement('canvas');\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of PIXI.TextMetrics~FontMetrics objects.\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |Éq\n */\nTextMetrics.METRICS_STRING = '|Éq';\n\n/**\n * Baseline symbol for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n"]},"metadata":{},"sourceType":"script"}