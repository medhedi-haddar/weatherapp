{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _core = require('../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _InteractionData = require('./InteractionData');\n\nvar _InteractionData2 = _interopRequireDefault(_InteractionData);\n\nvar _InteractionEvent = require('./InteractionEvent');\n\nvar _InteractionEvent2 = _interopRequireDefault(_InteractionEvent);\n\nvar _InteractionTrackingData = require('./InteractionTrackingData');\n\nvar _InteractionTrackingData2 = _interopRequireDefault(_InteractionTrackingData);\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _interactiveTarget = require('./interactiveTarget');\n\nvar _interactiveTarget2 = _interopRequireDefault(_interactiveTarget);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Mix interactiveTarget into core.DisplayObject.prototype, after deprecation has been handled\n\n\ncore.utils.mixins.delayMixin(core.DisplayObject.prototype, _interactiveTarget2.default);\nvar MOUSE_POINTER_ID = 1; // helpers for hitTest() - only used inside hitTest()\n\nvar hitTestEvent = {\n  target: null,\n  data: {\n    global: null\n  }\n};\n/**\n * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.interaction\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI.interaction\n */\n\nvar InteractionManager = function (_EventEmitter) {\n  _inherits(InteractionManager, _EventEmitter);\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n   * @param {object} [options] - The options for the manager.\n   * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n   * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n   */\n\n\n  function InteractionManager(renderer, options) {\n    _classCallCheck(this, InteractionManager);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    options = options || {};\n    /**\n     * The renderer this interaction manager works for.\n     *\n     * @member {PIXI.SystemRenderer}\n     */\n\n    _this.renderer = renderer;\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     *\n     * @member {boolean}\n     * @default true\n     */\n\n    _this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n    /**\n     * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.\n     *\n     * @member {number}\n     * @default 10\n     */\n\n    _this.interactionFrequency = options.interactionFrequency || 10;\n    /**\n     * The mouse data\n     *\n     * @member {PIXI.interaction.InteractionData}\n     */\n\n    _this.mouse = new _InteractionData2.default();\n    _this.mouse.identifier = MOUSE_POINTER_ID; // setting the mouse to start off far off screen will mean that mouse over does\n    //  not get called before we even move the mouse.\n\n    _this.mouse.global.set(-999999);\n    /**\n     * Actively tracked InteractionData\n     *\n     * @private\n     * @member {Object.<number,PIXI.interation.InteractionData>}\n     */\n\n\n    _this.activeInteractionData = {};\n    _this.activeInteractionData[MOUSE_POINTER_ID] = _this.mouse;\n    /**\n     * Pool of unused InteractionData\n     *\n     * @private\n     * @member {PIXI.interation.InteractionData[]}\n     */\n\n    _this.interactionDataPool = [];\n    /**\n     * An event data object to handle all the event tracking/dispatching\n     *\n     * @member {object}\n     */\n\n    _this.eventData = new _InteractionEvent2.default();\n    /**\n     * The DOM element to bind to.\n     *\n     * @private\n     * @member {HTMLElement}\n     */\n\n    _this.interactionDOMElement = null;\n    /**\n     * This property determines if mousemove and touchmove events are fired only when the cursor\n     * is over the object.\n     * Setting to true will make things work more in line with how the DOM verison works.\n     * Setting to false can make things easier for things like dragging\n     * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n     * future versions of pixi.\n     *\n     * @member {boolean}\n     * @default false\n     */\n\n    _this.moveWhenInside = false;\n    /**\n     * Have events been attached to the dom element?\n     *\n     * @private\n     * @member {boolean}\n     */\n\n    _this.eventsAdded = false;\n    /**\n     * Is the mouse hovering over the renderer?\n     *\n     * @private\n     * @member {boolean}\n     */\n\n    _this.mouseOverRenderer = false;\n    /**\n     * Does the device support touch events\n     * https://www.w3.org/TR/touch-events/\n     *\n     * @readonly\n     * @member {boolean}\n     */\n\n    _this.supportsTouchEvents = 'ontouchstart' in window;\n    /**\n     * Does the device support pointer events\n     * https://www.w3.org/Submission/pointer-events/\n     *\n     * @readonly\n     * @member {boolean}\n     */\n\n    _this.supportsPointerEvents = !!window.PointerEvent; // this will make it so that you don't have to call bind all the time\n\n    /**\n     * @private\n     * @member {Function}\n     */\n\n    _this.onPointerUp = _this.onPointerUp.bind(_this);\n    _this.processPointerUp = _this.processPointerUp.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n\n    _this.onPointerCancel = _this.onPointerCancel.bind(_this);\n    _this.processPointerCancel = _this.processPointerCancel.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n\n    _this.onPointerDown = _this.onPointerDown.bind(_this);\n    _this.processPointerDown = _this.processPointerDown.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n\n    _this.onPointerMove = _this.onPointerMove.bind(_this);\n    _this.processPointerMove = _this.processPointerMove.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n\n    _this.onPointerOut = _this.onPointerOut.bind(_this);\n    _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n\n    _this.onPointerOver = _this.onPointerOver.bind(_this);\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     * @member {Object.<string, (string|Function|Object.<string, string>)>}\n     */\n\n    _this.cursorStyles = {\n      default: 'inherit',\n      pointer: 'pointer'\n    };\n    /**\n     * The mode of the cursor that is being used.\n     * The value of this is a key from the cursorStyles dictionary.\n     *\n     * @member {string}\n     */\n\n    _this.currentCursorMode = null;\n    /**\n     * Internal cached let.\n     *\n     * @private\n     * @member {string}\n     */\n\n    _this.cursor = null;\n    /**\n     * Internal cached let.\n     *\n     * @private\n     * @member {PIXI.Point}\n     */\n\n    _this._tempPoint = new core.Point();\n    /**\n     * The current resolution / device pixel ratio.\n     *\n     * @member {number}\n     * @default 1\n     */\n\n    _this.resolution = 1;\n\n    _this.setTargetElement(_this.renderer.view, _this.renderer.resolution);\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n     * object.\n     *\n     * @event PIXI.interaction.InteractionManager#mousedown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#rightdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object.\n     *\n     * @event PIXI.interaction.InteractionManager#mouseup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#rightup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#click\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#rightclick\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n     *\n     * @event PIXI.interaction.InteractionManager#mouseupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n     *\n     * @event PIXI.interaction.InteractionManager#rightupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object\n     *\n     * @event PIXI.interaction.InteractionManager#mousemove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object\n     *\n     * @event PIXI.interaction.InteractionManager#mouseover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object\n     *\n     * @event PIXI.interaction.InteractionManager#mouseout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#pointerdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * Not always fired when some buttons are held down while others are released. In those cases,\n     * use [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown} and\n     * [mouseup]{@link PIXI.interaction.InteractionManager#event:mouseup} instead.\n     *\n     * @event PIXI.interaction.InteractionManager#pointerup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a pointer event\n     *\n     * @event PIXI.interaction.InteractionManager#pointercancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#pointertap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n     *\n     * @event PIXI.interaction.InteractionManager#pointerupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved while over the display object\n     *\n     * @event PIXI.interaction.InteractionManager#pointermove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved onto the display object\n     *\n     * @event PIXI.interaction.InteractionManager#pointerover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved off the display object\n     *\n     * @event PIXI.interaction.InteractionManager#pointerout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#touchstart\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed from the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#touchend\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a touch\n     *\n     * @event PIXI.interaction.InteractionManager#touchcancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#tap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n     *\n     * @event PIXI.interaction.InteractionManager#touchendoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is moved along the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#touchmove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mousedown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#click\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightclick\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mousemove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a pointer event.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointercancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointertap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointermove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchstart\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchend\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a touch.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchcancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#tap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchendoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is moved along the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchmove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n\n    return _this;\n  }\n  /**\n   * Hit tests a point against the display tree, returning the first interactive object that is hit.\n   *\n   * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n   * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n   * to the last rendered root of the associated renderer.\n   * @return {PIXI.DisplayObject} The hit display object, if any.\n   */\n\n\n  InteractionManager.prototype.hitTest = function hitTest(globalPoint, root) {\n    // clear the target for our hit test\n    hitTestEvent.target = null; // assign the global point\n\n    hitTestEvent.data.global = globalPoint; // ensure safety of the root\n\n    if (!root) {\n      root = this.renderer._lastObjectRendered;\n    } // run the hit test\n\n\n    this.processInteractive(hitTestEvent, root, null, true); // return our found object - it'll be null if we didn't hit anything\n\n    return hitTestEvent.target;\n  };\n  /**\n   * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n   * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n   * another DOM element to receive those events.\n   *\n   * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.\n   * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n   */\n\n\n  InteractionManager.prototype.setTargetElement = function setTargetElement(element) {\n    var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.removeEvents();\n    this.interactionDOMElement = element;\n    this.resolution = resolution;\n    this.addEvents();\n  };\n  /**\n   * Registers all the DOM events\n   *\n   * @private\n   */\n\n\n  InteractionManager.prototype.addEvents = function addEvents() {\n    if (!this.interactionDOMElement) {\n      return;\n    }\n\n    core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.INTERACTION);\n\n    if (window.navigator.msPointerEnabled) {\n      this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n      this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n    } else if (this.supportsPointerEvents) {\n      this.interactionDOMElement.style['touch-action'] = 'none';\n    }\n    /**\n     * These events are added first, so that if pointer events are normalised, they are fired\n     * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd\n     */\n\n\n    if (this.supportsPointerEvents) {\n      window.document.addEventListener('pointermove', this.onPointerMove, true);\n      this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true); // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n      // we already handle those, so for the purposes of what we do in onPointerOut, we only\n      // care about the pointerleave event\n\n      this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n      this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n      window.addEventListener('pointercancel', this.onPointerCancel, true);\n      window.addEventListener('pointerup', this.onPointerUp, true);\n    } else {\n      window.document.addEventListener('mousemove', this.onPointerMove, true);\n      this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n      this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n      this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n      window.addEventListener('mouseup', this.onPointerUp, true);\n    } // always look directly for touch events so that we can provide original data\n    // In a future version we should change this to being just a fallback and rely solely on\n    // PointerEvents whenever available\n\n\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n      this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n      this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n      this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n    }\n\n    this.eventsAdded = true;\n  };\n  /**\n   * Removes all the DOM events that were previously registered\n   *\n   * @private\n   */\n\n\n  InteractionManager.prototype.removeEvents = function removeEvents() {\n    if (!this.interactionDOMElement) {\n      return;\n    }\n\n    core.ticker.shared.remove(this.update, this);\n\n    if (window.navigator.msPointerEnabled) {\n      this.interactionDOMElement.style['-ms-content-zooming'] = '';\n      this.interactionDOMElement.style['-ms-touch-action'] = '';\n    } else if (this.supportsPointerEvents) {\n      this.interactionDOMElement.style['touch-action'] = '';\n    }\n\n    if (this.supportsPointerEvents) {\n      window.document.removeEventListener('pointermove', this.onPointerMove, true);\n      this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n      this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n      window.removeEventListener('pointercancel', this.onPointerCancel, true);\n      window.removeEventListener('pointerup', this.onPointerUp, true);\n    } else {\n      window.document.removeEventListener('mousemove', this.onPointerMove, true);\n      this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n      this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n      window.removeEventListener('mouseup', this.onPointerUp, true);\n    }\n\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n      this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n      this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n    }\n\n    this.interactionDOMElement = null;\n    this.eventsAdded = false;\n  };\n  /**\n   * Updates the state of interactive objects.\n   * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.\n   *\n   * @param {number} deltaTime - time delta since last tick\n   */\n\n\n  InteractionManager.prototype.update = function update(deltaTime) {\n    this._deltaTime += deltaTime;\n\n    if (this._deltaTime < this.interactionFrequency) {\n      return;\n    }\n\n    this._deltaTime = 0;\n\n    if (!this.interactionDOMElement) {\n      return;\n    } // if the user move the mouse this check has already been done using the mouse move!\n\n\n    if (this.didMove) {\n      this.didMove = false;\n      return;\n    }\n\n    this.cursor = null; // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n    // but there was a scenario of a display object moving under a static mouse cursor.\n    // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n\n    for (var k in this.activeInteractionData) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.activeInteractionData.hasOwnProperty(k)) {\n        var interactionData = this.activeInteractionData[k];\n\n        if (interactionData.originalEvent && interactionData.pointerType !== 'touch') {\n          var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, interactionData.originalEvent, interactionData);\n          this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, true);\n        }\n      }\n    }\n\n    this.setCursorMode(this.cursor); // TODO\n  };\n  /**\n   * Sets the current cursor mode, handling any callbacks or CSS style changes.\n   *\n   * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n   */\n\n\n  InteractionManager.prototype.setCursorMode = function setCursorMode(mode) {\n    mode = mode || 'default'; // if the mode didn't actually change, bail early\n\n    if (this.currentCursorMode === mode) {\n      return;\n    }\n\n    this.currentCursorMode = mode;\n    var style = this.cursorStyles[mode]; // only do things if there is a cursor style for it\n\n    if (style) {\n      switch (typeof style === 'undefined' ? 'undefined' : _typeof(style)) {\n        case 'string':\n          // string styles are handled as cursor CSS\n          this.interactionDOMElement.style.cursor = style;\n          break;\n\n        case 'function':\n          // functions are just called, and passed the cursor mode\n          style(mode);\n          break;\n\n        case 'object':\n          // if it is an object, assume that it is a dictionary of CSS styles,\n          // apply it to the interactionDOMElement\n          Object.assign(this.interactionDOMElement.style, style);\n          break;\n      }\n    } else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n      // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n      // for the mode, then assume that the dev wants it to be CSS for the cursor.\n      this.interactionDOMElement.style.cursor = mode;\n    }\n  };\n  /**\n   * Dispatches an event on the display object that was interacted with\n   *\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question\n   * @param {string} eventString - the name of the event (e.g, mousedown)\n   * @param {object} eventData - the event data object\n   * @private\n   */\n\n\n  InteractionManager.prototype.dispatchEvent = function dispatchEvent(displayObject, eventString, eventData) {\n    if (!eventData.stopped) {\n      eventData.currentTarget = displayObject;\n      eventData.type = eventString;\n      displayObject.emit(eventString, eventData);\n\n      if (displayObject[eventString]) {\n        displayObject[eventString](eventData);\n      }\n    }\n  };\n  /**\n   * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n   * resulting value is stored in the point. This takes into account the fact that the DOM\n   * element could be scaled and positioned anywhere on the screen.\n   *\n   * @param  {PIXI.Point} point - the point that the result will be stored in\n   * @param  {number} x - the x coord of the position to map\n   * @param  {number} y - the y coord of the position to map\n   */\n\n\n  InteractionManager.prototype.mapPositionToPoint = function mapPositionToPoint(point, x, y) {\n    var rect = void 0; // IE 11 fix\n\n    if (!this.interactionDOMElement.parentElement) {\n      rect = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    } else {\n      rect = this.interactionDOMElement.getBoundingClientRect();\n    }\n\n    var resolutionMultiplier = navigator.isCocoonJS ? this.resolution : 1.0 / this.resolution;\n    point.x = (x - rect.left) * (this.interactionDOMElement.width / rect.width) * resolutionMultiplier;\n    point.y = (y - rect.top) * (this.interactionDOMElement.height / rect.height) * resolutionMultiplier;\n  };\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param {Function} [func] - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n   * @param {boolean} [interactive] - Whether the displayObject is interactive\n   * @return {boolean} returns true if the displayObject hit the point\n   */\n\n\n  InteractionManager.prototype.processInteractive = function processInteractive(interactionEvent, displayObject, func, hitTest, interactive) {\n    if (!displayObject || !displayObject.visible) {\n      return false;\n    }\n\n    var point = interactionEvent.data.global; // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^\n    //\n    // This function will now loop through all objects and then only hit test the objects it HAS\n    // to, not all of them. MUCH faster..\n    // An object will be hit test if the following is true:\n    //\n    // 1: It is interactive.\n    // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n    //\n    // As another little optimisation once an interactive object has been hit we can carry on\n    // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n    // A final optimisation is that an object is not hit test directly if a child has already been hit.\n\n    interactive = displayObject.interactive || interactive;\n    var hit = false;\n    var interactiveParent = interactive; // Flag here can set to false if the event is outside the parents hitArea or mask\n\n    var hitTestChildren = true; // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n    // There is also no longer a need to hitTest children.\n\n    if (displayObject.hitArea) {\n      if (hitTest) {\n        displayObject.worldTransform.applyInverse(point, this._tempPoint);\n\n        if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y)) {\n          hitTest = false;\n          hitTestChildren = false;\n        } else {\n          hit = true;\n        }\n      }\n\n      interactiveParent = false;\n    } // If there is a mask, no need to test against anything else if the pointer is not within the mask\n    else if (displayObject._mask) {\n      if (hitTest) {\n        if (!displayObject._mask.containsPoint(point)) {\n          hitTest = false;\n          hitTestChildren = false;\n        }\n      }\n    } // ** FREE TIP **! If an object is not interactive or has no buttons in it\n    // (such as a game scene!) set interactiveChildren to false for that displayObject.\n    // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n\n\n    if (hitTestChildren && displayObject.interactiveChildren && displayObject.children) {\n      var children = displayObject.children;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        var child = children[i]; // time to get recursive.. if this function will return if something is hit..\n\n        var childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);\n\n        if (childHit) {\n          // its a good idea to check if a child has lost its parent.\n          // this means it has been removed whilst looping so its best\n          if (!child.parent) {\n            continue;\n          } // we no longer need to hit test any more objects in this container as we we\n          // now know the parent has been hit\n\n\n          interactiveParent = false; // If the child is interactive , that means that the object hit was actually\n          // interactive and not just the child of an interactive object.\n          // This means we no longer need to hit test anything else. We still need to run\n          // through all objects, but we don't need to perform any hit tests.\n\n          if (childHit) {\n            if (interactionEvent.target) {\n              hitTest = false;\n            }\n\n            hit = true;\n          }\n        }\n      }\n    } // no point running this if the item is not interactive or does not have an interactive parent.\n\n\n    if (interactive) {\n      // if we are hit testing (as in we have no hit any objects yet)\n      // We also don't need to worry about hit testing if once of the displayObjects children\n      // has already been hit - but only if it was interactive, otherwise we need to keep\n      // looking for an interactive child, just in case we hit one\n      if (hitTest && !interactionEvent.target) {\n        // already tested against hitArea if it is defined\n        if (!displayObject.hitArea && displayObject.containsPoint) {\n          if (displayObject.containsPoint(point)) {\n            hit = true;\n          }\n        }\n      }\n\n      if (displayObject.interactive) {\n        if (hit && !interactionEvent.target) {\n          interactionEvent.target = displayObject;\n        }\n\n        if (func) {\n          func(interactionEvent, displayObject, !!hit);\n        }\n      }\n    }\n\n    return hit;\n  };\n  /**\n   * Is called when the pointer button is pressed down on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n   */\n\n\n  InteractionManager.prototype.onPointerDown = function onPointerDown(originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n    var events = this.normalizeToPointerData(originalEvent);\n    /**\n     * No need to prevent default on natural pointer events, as there are no side effects\n     * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n     * so still need to be prevented.\n     */\n    // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n    if (this.autoPreventDefault && events[0].isNormalized) {\n      originalEvent.preventDefault();\n    }\n\n    var eventLen = events.length;\n\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerDown, true);\n      this.emit('pointerdown', interactionEvent);\n\n      if (event.pointerType === 'touch') {\n        this.emit('touchstart', interactionEvent);\n      } // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n      else if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n      }\n    }\n  };\n  /**\n   * Processes the result of the pointer down check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerDown = function processPointerDown(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n\n    if (hit) {\n      if (!displayObject.trackedPointers[id]) {\n        displayObject.trackedPointers[id] = new _InteractionTrackingData2.default(id);\n      }\n\n      this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n      } else if (data.pointerType === 'mouse' || data.pointerType === 'pen') {\n        var isRightButton = data.button === 2;\n\n        if (isRightButton) {\n          displayObject.trackedPointers[id].rightDown = true;\n        } else {\n          displayObject.trackedPointers[id].leftDown = true;\n        }\n\n        this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n   * @param {boolean} cancelled - true if the pointer is cancelled\n   * @param {Function} func - Function passed to {@link processInteractive}\n   */\n\n\n  InteractionManager.prototype.onPointerComplete = function onPointerComplete(originalEvent, cancelled, func) {\n    var events = this.normalizeToPointerData(originalEvent);\n    var eventLen = events.length; // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n    // in all cases (unless it was a pointercancel)\n\n    var eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent; // perform hit testing for events targeting our canvas or cancel events\n\n      this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, func, cancelled || !eventAppend);\n      this.emit(cancelled ? 'pointercancel' : 'pointerup' + eventAppend, interactionEvent);\n\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? 'rightup' + eventAppend : 'mouseup' + eventAppend, interactionEvent);\n      } else if (event.pointerType === 'touch') {\n        this.emit(cancelled ? 'touchcancel' : 'touchend' + eventAppend, interactionEvent);\n        this.releaseInteractionDataForPointerId(event.pointerId, interactionData);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is cancelled\n   *\n   * @private\n   * @param {PointerEvent} event - The DOM event of a pointer button being released\n   */\n\n\n  InteractionManager.prototype.onPointerCancel = function onPointerCancel(event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n    this.onPointerComplete(event, true, this.processPointerCancel);\n  };\n  /**\n   * Processes the result of the pointer cancel check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   */\n\n\n  InteractionManager.prototype.processPointerCancel = function processPointerCancel(interactionEvent, displayObject) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n\n    if (displayObject.trackedPointers[id] !== undefined) {\n      delete displayObject.trackedPointers[id];\n      this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} event - The DOM event of a pointer button being released\n   */\n\n\n  InteractionManager.prototype.onPointerUp = function onPointerUp(event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n    this.onPointerComplete(event, false, this.processPointerUp);\n  };\n  /**\n   * Processes the result of the pointer up check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerUp = function processPointerUp(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var trackingData = displayObject.trackedPointers[id];\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen'; // need to track mouse down status in the mouse block so that we can emit\n    // event in a later block\n\n    var isMouseTap = false; // Mouse only\n\n    if (isMouse) {\n      var isRightButton = data.button === 2;\n      var flags = _InteractionTrackingData2.default.FLAGS;\n      var test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n      var isDown = trackingData !== undefined && trackingData.flags & test;\n\n      if (hit) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n        if (isDown) {\n          this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent); // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n\n          isMouseTap = true;\n        }\n      } else if (isDown) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n      } // update the down state of the tracking data\n\n\n      if (trackingData) {\n        if (isRightButton) {\n          trackingData.rightDown = false;\n        } else {\n          trackingData.leftDown = false;\n        }\n      }\n    } // Pointers and Touches, and Mouse\n\n\n    if (hit) {\n      this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n      if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n      if (trackingData) {\n        // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n        if (!isMouse || isMouseTap) {\n          this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n        }\n\n        if (isTouch) {\n          this.dispatchEvent(displayObject, 'tap', interactionEvent); // touches are no longer over (if they ever were) when we get the touchend\n          // so we should ensure that we don't keep pretending that they are\n\n          trackingData.over = false;\n        }\n      }\n    } else if (trackingData) {\n      this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n      if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n    } // Only remove the tracking data if there is no over/down state still associated with it\n\n\n    if (trackingData && trackingData.none) {\n      delete displayObject.trackedPointers[id];\n    }\n  };\n  /**\n   * Is called when the pointer moves across the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n   */\n\n\n  InteractionManager.prototype.onPointerMove = function onPointerMove(originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n    var events = this.normalizeToPointerData(originalEvent);\n\n    if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen') {\n      this.didMove = true;\n      this.cursor = null;\n    }\n\n    var eventLen = events.length;\n\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      var interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;\n      this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerMove, interactive);\n      this.emit('pointermove', interactionEvent);\n      if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n    }\n\n    if (events[0].pointerType === 'mouse') {\n      this.setCursorMode(this.cursor); // TODO BUG for parents interactive object (border order issue)\n    }\n  };\n  /**\n   * Processes the result of the pointer move check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerMove = function processPointerMove(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n\n    if (isMouse) {\n      this.processPointerOverOut(interactionEvent, displayObject, hit);\n    }\n\n    if (!this.moveWhenInside || hit) {\n      this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n      if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n      if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n    }\n  };\n  /**\n   * Is called when the pointer is moved out of the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n   */\n\n\n  InteractionManager.prototype.onPointerOut = function onPointerOut(originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n    var events = this.normalizeToPointerData(originalEvent); // Only mouse and pointer can call onPointerOut, so events will always be length 1\n\n    var event = events[0];\n\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = false;\n      this.setCursorMode(null);\n    }\n\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n    this.emit('pointerout', interactionEvent);\n\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseout', interactionEvent);\n    } else {\n      // we can get touchleave events after touchend, so we want to make sure we don't\n      // introduce memory leaks\n      this.releaseInteractionDataForPointerId(interactionData.identifier);\n    }\n  };\n  /**\n   * Processes the result of the pointer over/out check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerOverOut = function processPointerOverOut(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    var trackingData = displayObject.trackedPointers[id]; // if we just moused over the display object, then we need to track that state\n\n    if (hit && !trackingData) {\n      trackingData = displayObject.trackedPointers[id] = new _InteractionTrackingData2.default(id);\n    }\n\n    if (trackingData === undefined) return;\n\n    if (hit && this.mouseOverRenderer) {\n      if (!trackingData.over) {\n        trackingData.over = true;\n        this.dispatchEvent(displayObject, 'pointerover', interactionEvent);\n\n        if (isMouse) {\n          this.dispatchEvent(displayObject, 'mouseover', interactionEvent);\n        }\n      } // only change the cursor if it has not already been changed (by something deeper in the\n      // display tree)\n\n\n      if (isMouse && this.cursor === null) {\n        this.cursor = displayObject.cursor;\n      }\n    } else if (trackingData.over) {\n      trackingData.over = false;\n      this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n      } // if there is no mouse down information for the pointer, then it is safe to delete\n\n\n      if (trackingData.none) {\n        delete displayObject.trackedPointers[id];\n      }\n    }\n  };\n  /**\n   * Is called when the pointer is moved into the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n   */\n\n\n  InteractionManager.prototype.onPointerOver = function onPointerOver(originalEvent) {\n    var events = this.normalizeToPointerData(originalEvent); // Only mouse and pointer can call onPointerOver, so events will always be length 1\n\n    var event = events[0];\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = true;\n    }\n\n    this.emit('pointerover', interactionEvent);\n\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseover', interactionEvent);\n    }\n  };\n  /**\n   * Get InteractionData for a given pointerId. Store that data as well\n   *\n   * @private\n   * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n   * @return {PIXI.interaction.InteractionData} - Interaction data for the given pointer identifier\n   */\n\n\n  InteractionManager.prototype.getInteractionDataForPointerId = function getInteractionDataForPointerId(event) {\n    var pointerId = event.pointerId;\n    var interactionData = void 0;\n\n    if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse') {\n      interactionData = this.mouse;\n    } else if (this.activeInteractionData[pointerId]) {\n      interactionData = this.activeInteractionData[pointerId];\n    } else {\n      interactionData = this.interactionDataPool.pop() || new _InteractionData2.default();\n      interactionData.identifier = pointerId;\n      this.activeInteractionData[pointerId] = interactionData;\n    } // copy properties from the event, so that we can make sure that touch/pointer specific\n    // data is available\n\n\n    interactionData.copyEvent(event);\n    return interactionData;\n  };\n  /**\n   * Return unused InteractionData to the pool, for a given pointerId\n   *\n   * @private\n   * @param {number} pointerId - Identifier from a pointer event\n   */\n\n\n  InteractionManager.prototype.releaseInteractionDataForPointerId = function releaseInteractionDataForPointerId(pointerId) {\n    var interactionData = this.activeInteractionData[pointerId];\n\n    if (interactionData) {\n      delete this.activeInteractionData[pointerId];\n      interactionData.reset();\n      this.interactionDataPool.push(interactionData);\n    }\n  };\n  /**\n   * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The event to be configured\n   * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n   * @param {PIXI.interaction.InteractionData} interactionData - The InteractionData that will be paired\n   *        with the InteractionEvent\n   * @return {PIXI.interaction.InteractionEvent} the interaction event that was passed in\n   */\n\n\n  InteractionManager.prototype.configureInteractionEventForDOMEvent = function configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData) {\n    interactionEvent.data = interactionData;\n    this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY); // This is the way InteractionManager processed touch events before the refactoring, so I've kept\n    // it here. But it doesn't make that much sense to me, since mapPositionToPoint already factors\n    // in this.resolution, so this just divides by this.resolution twice for touch events...\n\n    if (navigator.isCocoonJS && pointerEvent.pointerType === 'touch') {\n      interactionData.global.x = interactionData.global.x / this.resolution;\n      interactionData.global.y = interactionData.global.y / this.resolution;\n    } // Not really sure why this is happening, but it's how a previous version handled things\n\n\n    if (pointerEvent.pointerType === 'touch') {\n      pointerEvent.globalX = interactionData.global.x;\n      pointerEvent.globalY = interactionData.global.y;\n    }\n\n    interactionData.originalEvent = pointerEvent;\n    interactionEvent.reset();\n    return interactionEvent;\n  };\n  /**\n   * Ensures that the original event object contains all data that a regular pointer event would have\n   *\n   * @private\n   * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n   * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n   *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n   */\n\n\n  InteractionManager.prototype.normalizeToPointerData = function normalizeToPointerData(event) {\n    var normalizedEvents = [];\n\n    if (this.supportsTouchEvents && event instanceof TouchEvent) {\n      for (var i = 0, li = event.changedTouches.length; i < li; i++) {\n        var touch = event.changedTouches[i];\n        if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n        if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n\n        if (typeof touch.isPrimary === 'undefined') {\n          touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n        }\n\n        if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n        if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n        if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n        if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n        if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n        if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n        if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n        if (typeof touch.twist === 'undefined') touch.twist = 0;\n        if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0; // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n        // support, and the fill ins are not quite the same\n        // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n        // left is not 0,0 on the page\n\n        if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n        if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY; // mark the touch as normalized, just so that we know we did it\n\n        touch.isNormalized = true;\n        normalizedEvents.push(touch);\n      }\n    } // apparently PointerEvent subclasses MouseEvent, so yay\n    else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent))) {\n      if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n      if (typeof event.width === 'undefined') event.width = 1;\n      if (typeof event.height === 'undefined') event.height = 1;\n      if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n      if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n      if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n      if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;\n      if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n      if (typeof event.twist === 'undefined') event.twist = 0;\n      if (typeof event.tangentialPressure === 'undefined') event.tangentialPressure = 0; // mark the mouse event as normalized, just so that we know we did it\n\n      event.isNormalized = true;\n      normalizedEvents.push(event);\n    } else {\n      normalizedEvents.push(event);\n    }\n\n    return normalizedEvents;\n  };\n  /**\n   * Destroys the interaction manager\n   *\n   */\n\n\n  InteractionManager.prototype.destroy = function destroy() {\n    this.removeEvents();\n    this.removeAllListeners();\n    this.renderer = null;\n    this.mouse = null;\n    this.eventData = null;\n    this.interactionDOMElement = null;\n    this.onPointerDown = null;\n    this.processPointerDown = null;\n    this.onPointerUp = null;\n    this.processPointerUp = null;\n    this.onPointerCancel = null;\n    this.processPointerCancel = null;\n    this.onPointerMove = null;\n    this.processPointerMove = null;\n    this.onPointerOut = null;\n    this.processPointerOverOut = null;\n    this.onPointerOver = null;\n    this._tempPoint = null;\n  };\n\n  return InteractionManager;\n}(_eventemitter2.default);\n\nexports.default = InteractionManager;\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);","map":{"version":3,"sources":["../../src/interaction/InteractionManager.js"],"names":["core","MOUSE_POINTER_ID","hitTestEvent","target","data","global","InteractionManager","options","window","default","pointer","hitTest","globalPoint","root","setTargetElement","element","resolution","addEvents","removeEvents","update","deltaTime","interactionData","interactionEvent","setCursorMode","mode","style","Object","dispatchEvent","displayObject","eventString","eventData","mapPositionToPoint","point","x","y","rect","width","height","resolutionMultiplier","navigator","processInteractive","func","interactive","hit","interactiveParent","hitTestChildren","children","i","child","childHit","onPointerDown","originalEvent","events","eventLen","event","isRightButton","processPointerDown","id","onPointerComplete","cancelled","eventAppend","onPointerCancel","processPointerCancel","onPointerUp","processPointerUp","trackingData","isTouch","isMouse","isMouseTap","flags","test","isDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","getInteractionDataForPointerId","pointerId","releaseInteractionDataForPointerId","configureInteractionEventForDOMEvent","pointerEvent","normalizeToPointerData","normalizedEvents","li","touch","destroy"],"mappings":"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","sourcesContent":["import * as core from '../core';\nimport InteractionData from './InteractionData';\nimport InteractionEvent from './InteractionEvent';\nimport InteractionTrackingData from './InteractionTrackingData';\nimport EventEmitter from 'eventemitter3';\nimport interactiveTarget from './interactiveTarget';\n\n// Mix interactiveTarget into core.DisplayObject.prototype, after deprecation has been handled\ncore.utils.mixins.delayMixin(\n    core.DisplayObject.prototype,\n    interactiveTarget\n);\n\nconst MOUSE_POINTER_ID = 1;\n\n// helpers for hitTest() - only used inside hitTest()\nconst hitTestEvent = {\n    target: null,\n    data: {\n        global: null,\n    },\n};\n\n/**\n * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.interaction\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI.interaction\n */\nexport default class InteractionManager extends EventEmitter\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n     */\n    constructor(renderer, options)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.SystemRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * Actively tracked InteractionData\n         *\n         * @private\n         * @member {Object.<number,PIXI.interation.InteractionData>}\n         */\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n\n        /**\n         * Pool of unused InteractionData\n         *\n         * @private\n         * @member {PIXI.interation.InteractionData[]}\n         */\n        this.interactionDataPool = [];\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @private\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM verison works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = false;\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in window;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!window.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, (string|Function|Object.<string, string>)>}\n         */\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string}\n         */\n        this.currentCursorMode = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {string}\n         */\n        this.cursor = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {PIXI.Point}\n         */\n        this._tempPoint = new core.Point();\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * Not always fired when some buttons are held down while others are released. In those cases,\n         * use [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown} and\n         * [mouseup]{@link PIXI.interaction.InteractionManager#event:mouseup} instead.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event PIXI.interaction.InteractionManager#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event PIXI.interaction.InteractionManager#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n         *\n         * @event PIXI.interaction.InteractionManager#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n    }\n\n    /**\n     * Hit tests a point against the display tree, returning the first interactive object that is hit.\n     *\n     * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n     * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n     * to the last rendered root of the associated renderer.\n     * @return {PIXI.DisplayObject} The hit display object, if any.\n     */\n    hitTest(globalPoint, root)\n    {\n        // clear the target for our hit test\n        hitTestEvent.target = null;\n        // assign the global point\n        hitTestEvent.data.global = globalPoint;\n        // ensure safety of the root\n        if (!root)\n        {\n            root = this.renderer._lastObjectRendered;\n        }\n        // run the hit test\n        this.processInteractive(hitTestEvent, root, null, true);\n        // return our found object - it'll be null if we didn't hit anything\n\n        return hitTestEvent.target;\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     */\n    setTargetElement(element, resolution = 1)\n    {\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    addEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.INTERACTION);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n            this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = 'none';\n        }\n\n        /**\n         * These events are added first, so that if pointer events are normalised, they are fired\n         * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            window.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n            window.addEventListener('pointercancel', this.onPointerCancel, true);\n            window.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n            window.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    removeEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.remove(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = '';\n            this.interactionDOMElement.style['-ms-touch-action'] = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            window.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n            window.removeEventListener('pointercancel', this.onPointerCancel, true);\n            window.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n            window.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.\n     *\n     * @param {number} deltaTime - time delta since last tick\n     */\n    update(deltaTime)\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this.didMove)\n        {\n            this.didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.renderer._lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n\n        // TODO\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    setCursorMode(mode)\n    {\n        mode = mode || 'default';\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    this.interactionDOMElement.style.cursor = style;\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    Object.assign(this.interactionDOMElement.style, style);\n                    break;\n            }\n        }\n        else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.interactionDOMElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    dispatchEvent(displayObject, eventString, eventData)\n    {\n        if (!eventData.stopped)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if (displayObject[eventString])\n            {\n                displayObject[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.Point} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    mapPositionToPoint(point, x, y)\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = { x: 0, y: 0, width: 0, height: 0 };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = navigator.isCocoonJS ? this.resolution : (1.0 / this.resolution);\n\n        point.x = ((x - rect.left) * (this.interactionDOMElement.width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * (this.interactionDOMElement.height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    processInteractive(interactionEvent, displayObject, func, hitTest, interactive)\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimisation once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimisation is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // Flag here can set to false if the event is outside the parents hitArea or mask\n        let hitTestChildren = true;\n\n        // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n        // There is also no longer a need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            if (hitTest)\n            {\n                displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n                else\n                {\n                    hit = true;\n                }\n            }\n            interactiveParent = false;\n        }\n        // If there is a mask, no need to test against anything else if the pointer is not within the mask\n        else if (displayObject._mask)\n        {\n            if (hitTest)\n            {\n                if (!displayObject._mask.containsPoint(point))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n        if (hitTestChildren && displayObject.interactiveChildren && displayObject.children)\n        {\n            const children = displayObject.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                // already tested against hitArea if it is defined\n                if (!displayObject.hitArea && displayObject.containsPoint)\n                {\n                    if (displayObject.containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                if (func)\n                {\n                    func(interactionEvent, displayObject, !!hit);\n                }\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n     */\n    onPointerDown(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /**\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && events[0].isNormalized)\n        {\n            originalEvent.preventDefault();\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n            else if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerDown(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (data.pointerType === 'mouse' || data.pointerType === 'pen')\n            {\n                const isRightButton = data.button === 2;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n     * @param {boolean} cancelled - true if the pointer is cancelled\n     * @param {Function} func - Function passed to {@link processInteractive}\n     */\n    onPointerComplete(originalEvent, cancelled, func)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n        // in all cases (unless it was a pointercancel)\n        const eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            // perform hit testing for events targeting our canvas or cancel events\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, func, cancelled || !eventAppend);\n\n            this.emit(cancelled ? 'pointercancel' : `pointerup${eventAppend}`, interactionEvent);\n\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? `rightup${eventAppend}` : `mouseup${eventAppend}`, interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : `touchend${eventAppend}`, interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId, interactionData);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerCancel(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     */\n    processPointerCancel(interactionEvent, displayObject)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerUp(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerUp(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n        // need to track mouse down status in the mouse block so that we can emit\n        // event in a later block\n        let isMouseTap = false;\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = data.button === 2;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                    // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n                    isMouseTap = true;\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n                if (!isMouse || isMouseTap)\n                {\n                    this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                }\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n     */\n    onPointerMove(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen')\n        {\n            this.didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            const interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;\n\n            this.processInteractive(\n                interactionEvent,\n                this.renderer._lastObjectRendered,\n                this.processPointerMove,\n                interactive\n            );\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerMove(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    onPointerOut(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerOverOut(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.dispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.dispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n     */\n    onPointerOver(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well\n     *\n     * @private\n     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n     * @return {PIXI.interaction.InteractionData} - Interaction data for the given pointer identifier\n     */\n    getInteractionDataForPointerId(event)\n    {\n        const pointerId = event.pointerId;\n\n        let interactionData;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            interactionData = this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            interactionData = this.activeInteractionData[pointerId];\n        }\n        else\n        {\n            interactionData = this.interactionDataPool.pop() || new InteractionData();\n            interactionData.identifier = pointerId;\n            this.activeInteractionData[pointerId] = interactionData;\n        }\n        // copy properties from the event, so that we can make sure that touch/pointer specific\n        // data is available\n        interactionData.copyEvent(event);\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @private\n     * @param {number} pointerId - Identifier from a pointer event\n     */\n    releaseInteractionDataForPointerId(pointerId)\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            interactionData.reset();\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The event to be configured\n     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param {PIXI.interaction.InteractionData} interactionData - The InteractionData that will be paired\n     *        with the InteractionEvent\n     * @return {PIXI.interaction.InteractionEvent} the interaction event that was passed in\n     */\n    configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData)\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // This is the way InteractionManager processed touch events before the refactoring, so I've kept\n        // it here. But it doesn't make that much sense to me, since mapPositionToPoint already factors\n        // in this.resolution, so this just divides by this.resolution twice for touch events...\n        if (navigator.isCocoonJS && pointerEvent.pointerType === 'touch')\n        {\n            interactionData.global.x = interactionData.global.x / this.resolution;\n            interactionData.global.y = interactionData.global.y / this.resolution;\n        }\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            pointerEvent.globalX = interactionData.global.x;\n            pointerEvent.globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent.reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    normalizeToPointerData(event)\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i];\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent)))\n        {\n            if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n            if (typeof event.width === 'undefined') event.width = 1;\n            if (typeof event.height === 'undefined') event.height = 1;\n            if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n            if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n            if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n            if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;\n            if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n            if (typeof event.twist === 'undefined') event.twist = 0;\n            if (typeof event.tangentialPressure === 'undefined') event.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            event.isNormalized = true;\n\n            normalizedEvents.push(event);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents;\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    destroy()\n    {\n        this.removeEvents();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this._tempPoint = null;\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);\n"]},"metadata":{},"sourceType":"script"}