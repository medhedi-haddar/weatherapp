{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport getCurrentForecast from './helpers/getCurrentForecast';\nimport getAlertForecast from './helpers/getAlertForecast';\nimport getHourlyForecast from './helpers/getHourlyForecast';\nimport getDailyForecast from './helpers/getDailyForecast';\nimport getDetailCurrentForecast from './helpers/getDetailCurrentForecast';\nconst API_KEY = \"b96cf2201d3a30a9889082d993d5610e\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\"; // const CROSS_URL = \"https://cors-anywhere.herokuapp.com\"\n// const REQUEST_URL = `${CROSS_URL}/${BASE_URL}`;\n\nconst useForecast = () => {\n  _s();\n\n  const [isError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  const getCurrentLocationData = async location => {\n    const allData = await axios(`${BASE_URL}/weather?q=${location}&units=metric&lang=fr&appid=${API_KEY}`);\n    if (!allData || allData.length === 0) return;\n    const data = allData.data;\n    return {\n      data\n    };\n  };\n\n  const getDetailLocationData = async (lat, lon) => {\n    try {\n      const detailData = await axios(`${BASE_URL}/onecall?units=metric&lat=${lat}&lon=${lon}&lang=fr&exclude=minutely&appid=${API_KEY}`);\n      const data = detailData;\n      return {\n        data\n      };\n    } catch (error) {}\n\n    if (!detailData || detailData.length === 0) return;\n  };\n\n  const getLocationBase = async location => {\n    try {\n      const cityData = await getCurrentLocationData(location);\n      const current_data = cityData.data;\n      const Location_lat = cityData.data.coord.lat;\n      const Location_lon = cityData.data.coord.lon;\n\n      try {\n        const cityDetails = await getDetailLocationData(Location_lat, Location_lon);\n        const dataObject = {\n          current_data: current_data,\n          cityDetails: cityDetails.data.data\n        };\n        return dataObject;\n      } catch (error) {\n        return;\n      }\n    } catch (error) {\n      return;\n    }\n  };\n\n  const deployData = data => {\n    const currentForecast = getCurrentForecast(data.current_data);\n    const hourlyForecast = getHourlyForecast(data.cityDetails.hourly);\n    const daylyForecast = getDailyForecast(data.cityDetails.daily);\n    const alertsForecast = getAlertForecast(data.cityDetails.alerts);\n    const detailCurrentForecast = getDetailCurrentForecast(data.cityDetails.daily[0]);\n    setForecast({\n      currentForecast,\n      hourlyForecast,\n      daylyForecast,\n      alertsForecast,\n      detailCurrentForecast\n    });\n    setLoading(false);\n  }; // on submit location recup DATA\n\n\n  const submitRequest = async location => {\n    setLoading(true);\n    setError(false);\n    const response = await getLocationBase(location);\n    console.log('heeeeeeeeeeeere');\n\n    if (!response || response === 0) {\n      console.log('hi');\n      setError(true);\n      setLoading(false);\n      return;\n    }\n\n    deployData(response);\n  };\n\n  return {\n    isError,\n    isLoading,\n    forecast,\n    submitRequest\n  };\n};\n\n_s(useForecast, \"98jJfAbkRG8B5Phem9UEdOko1FU=\");\n\nexport default useForecast;","map":{"version":3,"sources":["/Users/mohamedelhedihaddar/weather-app/src/useForecast.js"],"names":["useState","axios","getCurrentForecast","getAlertForecast","getHourlyForecast","getDailyForecast","getDetailCurrentForecast","API_KEY","BASE_URL","useForecast","isError","setError","isLoading","setLoading","forecast","setForecast","getCurrentLocationData","location","allData","length","data","getDetailLocationData","lat","lon","detailData","error","getLocationBase","cityData","current_data","Location_lat","coord","Location_lon","cityDetails","dataObject","deployData","currentForecast","hourlyForecast","hourly","daylyForecast","daily","alertsForecast","alerts","detailCurrentForecast","submitRequest","response","console","log"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,wBAAP,MAAqC,oCAArC;AAEA,MAAMC,OAAO,GAAG,kCAAhB;AACA,MAAMC,QAAQ,GAAG,yCAAjB,C,CACA;AACA;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBX,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,SAAD,EAAYC,UAAZ,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,IAAD,CAAxC;;AAGA,QAAMgB,sBAAsB,GAAG,MAAOC,QAAP,IAAmB;AAC9C,UAAMC,OAAO,GAAG,MAAMjB,KAAK,CAAE,GAAEO,QAAS,cAAaS,QAAS,+BAA8BV,OAAQ,EAAzE,CAA3B;AACA,QAAG,CAACW,OAAD,IAAYA,OAAO,CAACC,MAAR,KAAmB,CAAlC,EAAqC;AACrC,UAAMC,IAAI,GAAGF,OAAO,CAACE,IAArB;AACA,WAAO;AAACA,MAAAA;AAAD,KAAP;AAEH,GAND;;AAOA,QAAMC,qBAAqB,GAAG,OAAOC,GAAP,EAAWC,GAAX,KAAkB;AAE5C,QAAI;AACA,YAAMC,UAAU,GAAG,MAAMvB,KAAK,CAAE,GAAEO,QAAS,6BAA4Bc,GAAI,QAAOC,GAAI,mCAAkChB,OAAQ,EAAlG,CAA9B;AAEA,YAAMa,IAAI,GAAGI,UAAb;AACJ,aAAO;AAACJ,QAAAA;AAAD,OAAP;AACC,KALD,CAKE,OAAOK,KAAP,EAAc,CAEf;;AAED,QAAG,CAACD,UAAD,IAAeA,UAAU,CAACL,MAAX,KAAsB,CAAxC,EAA0C;AAI7C,GAfD;;AAgBA,QAAMO,eAAe,GAAG,MAAOT,QAAP,IAAoB;AAExC,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMX,sBAAsB,CAACC,QAAD,CAA7C;AAEA,YAAMW,YAAY,GAAGD,QAAQ,CAACP,IAA9B;AACA,YAAMS,YAAY,GAAGF,QAAQ,CAACP,IAAT,CAAcU,KAAd,CAAoBR,GAAzC;AACA,YAAMS,YAAY,GAAGJ,QAAQ,CAACP,IAAT,CAAcU,KAAd,CAAoBP,GAAzC;;AACA,UAAI;AACA,cAAMS,WAAW,GAAE,MAAMX,qBAAqB,CAACQ,YAAD,EAAcE,YAAd,CAA9C;AAEA,cAAME,UAAU,GAAG;AAACL,UAAAA,YAAY,EAAGA,YAAhB;AAA8BI,UAAAA,WAAW,EAAGA,WAAW,CAACZ,IAAZ,CAAiBA;AAA7D,SAAnB;AACA,eAAOa,UAAP;AACH,OALD,CAKE,OAAOR,KAAP,EAAc;AACZ;AACH;AACJ,KAdD,CAcE,OAAOA,KAAP,EAAc;AACZ;AACH;AACJ,GAnBD;;AAqBA,QAAMS,UAAU,GAAId,IAAD,IAAS;AAExB,UAAMe,eAAe,GAAGjC,kBAAkB,CAACkB,IAAI,CAACQ,YAAN,CAA1C;AACA,UAAMQ,cAAc,GAAGhC,iBAAiB,CAACgB,IAAI,CAACY,WAAL,CAAiBK,MAAlB,CAAxC;AACA,UAAMC,aAAa,GAAGjC,gBAAgB,CAACe,IAAI,CAACY,WAAL,CAAiBO,KAAlB,CAAtC;AACA,UAAMC,cAAc,GAAGrC,gBAAgB,CAACiB,IAAI,CAACY,WAAL,CAAiBS,MAAlB,CAAvC;AACA,UAAMC,qBAAqB,GAAGpC,wBAAwB,CAACc,IAAI,CAACY,WAAL,CAAiBO,KAAjB,CAAuB,CAAvB,CAAD,CAAtD;AAEAxB,IAAAA,WAAW,CAAC;AACRoB,MAAAA,eADQ;AAERC,MAAAA,cAFQ;AAGRE,MAAAA,aAHQ;AAIRE,MAAAA,cAJQ;AAKRE,MAAAA;AALQ,KAAD,CAAX;AAOA7B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAhBD,CAnDsB,CAoEtB;;;AACA,QAAM8B,aAAa,GAAG,MAAM1B,QAAN,IAAiB;AACnCJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,UAAMiC,QAAQ,GAAG,MAAMlB,eAAe,CAACT,QAAD,CAAtC;AACA4B,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AACA,QAAG,CAACF,QAAD,IAAaA,QAAQ,KAAK,CAA7B,EAAgC;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAnC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AACDqB,IAAAA,UAAU,CAACU,QAAD,CAAV;AACH,GAbD;;AAeE,SAAO;AACLlC,IAAAA,OADK;AAELE,IAAAA,SAFK;AAGLE,IAAAA,QAHK;AAIL6B,IAAAA;AAJK,GAAP;AAML,CA1FD;;GAAMlC,W;;AA4FN,eAAeA,WAAf","sourcesContent":["import {useState} from 'react'\nimport axios from 'axios';\nimport getCurrentForecast from './helpers/getCurrentForecast';\nimport getAlertForecast from './helpers/getAlertForecast';\nimport getHourlyForecast from './helpers/getHourlyForecast';\nimport getDailyForecast from './helpers/getDailyForecast';\nimport getDetailCurrentForecast from './helpers/getDetailCurrentForecast';\n\nconst API_KEY = \"b96cf2201d3a30a9889082d993d5610e\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\"\n// const CROSS_URL = \"https://cors-anywhere.herokuapp.com\"\n// const REQUEST_URL = `${CROSS_URL}/${BASE_URL}`;\n\n\nconst useForecast = () => {\n\n    const [isError, setError] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n    const [forecast, setForecast] = useState(null);\n    \n\n    const getCurrentLocationData = async (location) =>{\n        const allData = await axios(`${BASE_URL}/weather?q=${location}&units=metric&lang=fr&appid=${API_KEY}`);\n        if(!allData || allData.length === 0) return; \n        const data = allData.data;\n        return {data};\n            \n    }\n    const getDetailLocationData = async (lat,lon) =>{\n\n        try {\n            const detailData = await axios(`${BASE_URL}/onecall?units=metric&lat=${lat}&lon=${lon}&lang=fr&exclude=minutely&appid=${API_KEY}`);\n\n            const data = detailData;\n        return {data};\n        } catch (error) {\n            \n        }\n       \n        if(!detailData || detailData.length === 0)return;\n\n        \n\n    }\n    const getLocationBase = async (location) => {\n\n        try {\n            const cityData = await getCurrentLocationData(location); \n\n            const current_data = cityData.data;\n            const Location_lat = cityData.data.coord.lat;\n            const Location_lon = cityData.data.coord.lon;\n            try {\n                const cityDetails= await getDetailLocationData(Location_lat,Location_lon);\n                \n                const dataObject = {current_data : current_data, cityDetails : cityDetails.data.data};\n                return dataObject;\n            } catch (error) {\n                return;\n            }\n        } catch (error) {\n            return; \n        }\n    }\n\n    const deployData = (data) =>{\n        \n        const currentForecast = getCurrentForecast(data.current_data);\n        const hourlyForecast = getHourlyForecast(data.cityDetails.hourly);\n        const daylyForecast = getDailyForecast(data.cityDetails.daily);\n        const alertsForecast = getAlertForecast(data.cityDetails.alerts);\n        const detailCurrentForecast = getDetailCurrentForecast(data.cityDetails.daily[0]);\n\n        setForecast({\n            currentForecast,\n            hourlyForecast,\n            daylyForecast,\n            alertsForecast,\n            detailCurrentForecast\n        });\n        setLoading(false);\n    }\n    // on submit location recup DATA\n    const submitRequest = async location =>{\n        setLoading(true);\n        setError(false);\n        \n        const response = await getLocationBase(location);\n        console.log('heeeeeeeeeeeere');\n        if(!response || response === 0) {\n            console.log('hi');\n            setError(true);\n            setLoading(false);\n            return;\n        }\n        deployData(response);\n    }\n\n      return {\n        isError,\n        isLoading,\n        forecast,\n        submitRequest\n    }\n}\n\nexport default useForecast\n"]},"metadata":{},"sourceType":"module"}