{"ast":null,"code":"'use strict';\n\nvar _core = require('../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _Texture = require('../core/textures/Texture');\n\nvar _Texture2 = _interopRequireDefault(_Texture);\n\nvar _BaseTexture = require('../core/textures/BaseTexture');\n\nvar _BaseTexture2 = _interopRequireDefault(_BaseTexture);\n\nvar _utils = require('../core/utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar DisplayObject = core.DisplayObject;\n\nvar _tempMatrix = new core.Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false; // figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n\n/**\n * @class\n * @ignore\n */\n\nvar CacheData =\n/**\n *\n */\nfunction CacheData() {\n  _classCallCheck(this, CacheData);\n\n  this.textureCacheId = null;\n  this.originalRenderWebGL = null;\n  this.originalRenderCanvas = null;\n  this.originalCalculateBounds = null;\n  this.originalGetLocalBounds = null;\n  this.originalUpdateTransform = null;\n  this.originalHitTest = null;\n  this.originalDestroy = null;\n  this.originalMask = null;\n  this.originalFilterArea = null;\n  this.sprite = null;\n};\n\nObject.defineProperties(DisplayObject.prototype, {\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to 'false'\n   *\n   * IMPORTANT GOTCHA - make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function get() {\n      return this._cacheAsBitmap;\n    },\n    set: function set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n\n      this._cacheAsBitmap = value;\n      var data = void 0;\n\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n\n        data = this._cacheData;\n        data.originalRenderWebGL = this.renderWebGL;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.renderWebGL = this._renderCachedWebGL;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n\n        this.renderWebGL = data.originalRenderWebGL;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\n\nDisplayObject.prototype._renderCachedWebGL = function _renderCachedWebGL(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  this._initCachedDisplayObject(renderer);\n\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n\n  this._cacheData.sprite._renderWebGL(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\n\n\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  } // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n\n\n  var cacheAlpha = this.alpha;\n  this.alpha = 1; // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n\n  renderer.currentRenderer.flush(); // this.filters= [];\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n\n  var bounds = this.getLocalBounds().clone(); // add some padding!\n\n  if (this._filters && this._filters.length) {\n    var padding = this._filters[0].padding;\n    bounds.pad(padding);\n  }\n\n  bounds.ceil(core.settings.RESOLUTION); // for now we cache the current renderTarget that the webGL renderer is currently using.\n  // this could be more elegent..\n\n  var cachedRenderTarget = renderer._activeRenderTarget; // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n\n  var stack = renderer.filterManager.filterStack; // this renderTexture will be used to store the cached DisplayObject\n\n  var renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n  var textureCacheId = 'cacheAsBitmap_' + (0, _utils.uid)();\n  this._cacheData.textureCacheId = textureCacheId;\n\n  _BaseTexture2.default.addToCache(renderTexture.baseTexture, textureCacheId);\n\n  _Texture2.default.addToCache(renderTexture, textureCacheId); // need to set //\n\n\n  var m = _tempMatrix;\n  m.tx = -bounds.x;\n  m.ty = -bounds.y; // reset\n\n  this.transform.worldTransform.identity(); // set all properties to there original so we can render to a texture\n\n  this.renderWebGL = this._cacheData.originalRenderWebGL;\n  renderer.render(this, renderTexture, true, m, true); // now restore the state be setting the new properties\n\n  renderer.bindRenderTarget(cachedRenderTarget);\n  renderer.filterManager.filterStack = stack;\n  this.renderWebGL = this._renderCachedWebGL; // the rest is the same as for Canvas\n\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null; // create our cached sprite\n\n  var cachedSprite = new core.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1; // restore the transform of the cached sprite to avoid the nasty flicker..\n\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  } // map the hit test..\n\n\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\n\n\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  this._initCachedDisplayObjectCanvas(renderer);\n\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n\n  this._cacheData.sprite._renderCanvas(renderer);\n}; // TODO this can be the same as the webGL verison.. will need to do a little tweaking first though..\n\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\n\n\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  } // get bounds actually transforms the object for us already!\n\n\n  var bounds = this.getLocalBounds();\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  bounds.ceil(core.settings.RESOLUTION);\n  var renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n  var textureCacheId = 'cacheAsBitmap_' + (0, _utils.uid)();\n  this._cacheData.textureCacheId = textureCacheId;\n\n  _BaseTexture2.default.addToCache(renderTexture.baseTexture, textureCacheId);\n\n  _Texture2.default.addToCache(renderTexture, textureCacheId); // need to set //\n\n\n  var m = _tempMatrix;\n  this.transform.localTransform.copy(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y; // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n\n  this.renderCanvas = this._cacheData.originalRenderCanvas; // renderTexture.render(this, m, true);\n\n  renderer.render(this, renderTexture, true, m, false); // now restore the state be setting the new properties\n\n  renderer.context = cachedRenderTarget;\n  this.renderCanvas = this._renderCachedCanvas; // the rest is the same as for WebGL\n\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null; // create our cached sprite\n\n  var cachedSprite = new core.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1; // restore the transform of the cached sprite to avoid the nasty flicker..\n\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  } // map the hit test..\n\n\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\n\n\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n\n  this._cacheData.sprite._calculateBounds();\n\n  this._lastBoundsID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\n\n\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds();\n};\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\n\n\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n\n  this._cacheData.sprite = null;\n\n  _BaseTexture2.default.removeFromCache(this._cacheData.textureCacheId);\n\n  _Texture2.default.removeFromCache(this._cacheData.textureCacheId);\n\n  this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\n\n\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};","map":{"version":3,"sources":["../../src/extras/cacheAsBitmap.js"],"names":["core","DisplayObject","_tempMatrix","CacheData","Object","cacheAsBitmap","get","set","data","cacheAlpha","renderer","bounds","padding","cachedRenderTarget","stack","renderTexture","textureCacheId","m","cachedSprite"],"mappings":"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","sourcesContent":["import * as core from '../core';\nimport Texture from '../core/textures/Texture';\nimport BaseTexture from '../core/textures/BaseTexture';\nimport { uid } from '../core/utils';\n\nconst DisplayObject = core.DisplayObject;\nconst _tempMatrix = new core.Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false;\n\n// figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nclass CacheData\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRenderWebGL = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalHitTest = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to 'false'\n     *\n     * IMPORTANT GOTCHA - make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get()\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value)\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRenderWebGL = this.renderWebGL;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.renderWebGL = this._renderCachedWebGL;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.renderWebGL = data.originalRenderWebGL;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedWebGL = function _renderCachedWebGL(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderWebGL(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.currentRenderer.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = this.getLocalBounds().clone();\n\n    // add some padding!\n    if (this._filters && this._filters.length)\n    {\n        const padding = this._filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(core.settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the webGL renderer is currently using.\n    // this could be more elegent..\n    const cachedRenderTarget = renderer._activeRenderTarget;\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n\n    const renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    m.tx = -bounds.x;\n    m.ty = -bounds.y;\n\n    // reset\n    this.transform.worldTransform.identity();\n\n    // set all properties to there original so we can render to a texture\n    this.renderWebGL = this._cacheData.originalRenderWebGL;\n\n    renderer.render(this, renderTexture, true, m, true);\n    // now restore the state be setting the new properties\n\n    renderer.bindRenderTarget(cachedRenderTarget);\n\n    renderer.filterManager.filterStack = stack;\n\n    this.renderWebGL = this._renderCachedWebGL;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new core.Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the webGL verison.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = this.getLocalBounds();\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n\n    bounds.ceil(core.settings.RESOLUTION);\n\n    const renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copy(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    // renderTexture.render(this, m, true);\n    renderer.render(this, renderTexture, true, m, false);\n\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new core.Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds()\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite._calculateBounds();\n    this._lastBoundsID = this._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds()\n{\n    return this._cacheData.sprite.getLocalBounds();\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject()\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options)\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"]},"metadata":{},"sourceType":"script"}