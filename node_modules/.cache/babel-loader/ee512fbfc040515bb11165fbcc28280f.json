{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _Mesh2 = require('./Mesh');\n\nvar _Mesh3 = _interopRequireDefault(_Mesh2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The Plane allows you to draw a texture across several points and them manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let Plane = new PIXI.Plane(PIXI.Texture.fromImage(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.mesh.Mesh\n * @memberof PIXI.mesh\n *\n */\n\n\nvar Plane = function (_Mesh) {\n  _inherits(Plane, _Mesh);\n  /**\n   * @param {PIXI.Texture} texture - The texture to use on the Plane.\n   * @param {number} [verticesX=10] - The number of vertices in the x-axis\n   * @param {number} [verticesY=10] - The number of vertices in the y-axis\n   */\n\n\n  function Plane(texture, verticesX, verticesY) {\n    _classCallCheck(this, Plane);\n    /**\n     * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can\n     * call _onTextureUpdated which could call refresh too early.\n     *\n     * @member {boolean}\n     * @private\n     */\n\n\n    var _this = _possibleConstructorReturn(this, _Mesh.call(this, texture));\n\n    _this._ready = true;\n    _this.verticesX = verticesX || 10;\n    _this.verticesY = verticesY || 10;\n    _this.drawMode = _Mesh3.default.DRAW_MODES.TRIANGLES;\n\n    _this.refresh();\n\n    return _this;\n  }\n  /**\n   * Refreshes plane coordinates\n   *\n   */\n\n\n  Plane.prototype._refresh = function _refresh() {\n    var texture = this._texture;\n    var total = this.verticesX * this.verticesY;\n    var verts = [];\n    var colors = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.verticesX - 1;\n    var segmentsY = this.verticesY - 1;\n    var sizeX = texture.width / segmentsX;\n    var sizeY = texture.height / segmentsY;\n\n    for (var i = 0; i < total; i++) {\n      var x = i % this.verticesX;\n      var y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    } //  cons\n\n\n    var totalSub = segmentsX * segmentsY;\n\n    for (var _i = 0; _i < totalSub; _i++) {\n      var xpos = _i % segmentsX;\n      var ypos = _i / segmentsX | 0;\n      var value = ypos * this.verticesX + xpos;\n      var value2 = ypos * this.verticesX + xpos + 1;\n      var value3 = (ypos + 1) * this.verticesX + xpos;\n      var value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(value, value2, value3);\n      indices.push(value2, value4, value3);\n    } // console.log(indices)\n\n\n    this.vertices = new Float32Array(verts);\n    this.uvs = new Float32Array(uvs);\n    this.colors = new Float32Array(colors);\n    this.indices = new Uint16Array(indices);\n    this.dirty++;\n    this.indexDirty++;\n    this.multiplyUvs();\n  };\n  /**\n   * Clear texture UVs when new texture is set\n   *\n   * @private\n   */\n\n\n  Plane.prototype._onTextureUpdate = function _onTextureUpdate() {\n    _Mesh3.default.prototype._onTextureUpdate.call(this); // wait for the Plane ctor to finish before calling refresh\n\n\n    if (this._ready) {\n      this.refresh();\n    }\n  };\n\n  return Plane;\n}(_Mesh3.default);\n\nexports.default = Plane;","map":{"version":3,"sources":["../../src/mesh/Plane.js"],"names":["Plane","verticesX","verticesY","_refresh","texture","total","verts","colors","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","totalSub","xpos","ypos","value","value2","value3","value4","_onTextureUpdate"],"mappings":"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","sourcesContent":["import Mesh from './Mesh';\n\n/**\n * The Plane allows you to draw a texture across several points and them manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let Plane = new PIXI.Plane(PIXI.Texture.fromImage(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.mesh.Mesh\n * @memberof PIXI.mesh\n *\n */\nexport default class Plane extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the Plane.\n     * @param {number} [verticesX=10] - The number of vertices in the x-axis\n     * @param {number} [verticesY=10] - The number of vertices in the y-axis\n     */\n    constructor(texture, verticesX, verticesY)\n    {\n        super(texture);\n\n        /**\n         * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can\n         * call _onTextureUpdated which could call refresh too early.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._ready = true;\n\n        this.verticesX = verticesX || 10;\n        this.verticesY = verticesY || 10;\n\n        this.drawMode = Mesh.DRAW_MODES.TRIANGLES;\n        this.refresh();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     *\n     */\n    _refresh()\n    {\n        const texture = this._texture;\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const colors = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.verticesX - 1;\n        const segmentsY = this.verticesY - 1;\n\n        const sizeX = texture.width / segmentsX;\n        const sizeY = texture.height / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        //  cons\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3);\n            indices.push(value2, value4, value3);\n        }\n\n        // console.log(indices)\n        this.vertices = new Float32Array(verts);\n        this.uvs = new Float32Array(uvs);\n        this.colors = new Float32Array(colors);\n        this.indices = new Uint16Array(indices);\n\n        this.dirty++;\n        this.indexDirty++;\n\n        this.multiplyUvs();\n    }\n\n    /**\n     * Clear texture UVs when new texture is set\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        Mesh.prototype._onTextureUpdate.call(this);\n\n        // wait for the Plane ctor to finish before calling refresh\n        if (this._ready)\n        {\n            this.refresh();\n        }\n    }\n\n}\n"]},"metadata":{},"sourceType":"script"}