{"ast":null,"code":"var Texture = require('./GLTexture');\n/**\n * Helper class to create a webGL Framebuffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n */\n\n\nvar Framebuffer = function (gl, width, height) {\n  /**\n   * The current WebGL rendering context\n   *\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl;\n  /**\n   * The frame buffer\n   *\n   * @member {WebGLFramebuffer}\n   */\n\n  this.framebuffer = gl.createFramebuffer();\n  /**\n   * The stencil buffer\n   *\n   * @member {WebGLRenderbuffer}\n   */\n\n  this.stencil = null;\n  /**\n   * The stencil buffer\n   *\n   * @member {PIXI.glCore.GLTexture}\n   */\n\n  this.texture = null;\n  /**\n   * The width of the drawing area of the buffer\n   *\n   * @member {Number}\n   */\n\n  this.width = width || 100;\n  /**\n   * The height of the drawing area of the buffer\n   *\n   * @member {Number}\n   */\n\n  this.height = height || 100;\n};\n/**\n * Adds a texture to the frame buffer\n * @param texture {PIXI.glCore.GLTexture}\n */\n\n\nFramebuffer.prototype.enableTexture = function (texture) {\n  var gl = this.gl;\n  this.texture = texture || new Texture(gl);\n  this.texture.bind(); //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n  this.bind();\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n};\n/**\n * Initialises the stencil buffer\n */\n\n\nFramebuffer.prototype.enableStencil = function () {\n  if (this.stencil) return;\n  var gl = this.gl;\n  this.stencil = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil); // TODO.. this is depth AND stencil?\n\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencil);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, this.width, this.height);\n};\n/**\n * Erases the drawing area and fills it with a colour\n * @param  r {Number} the red value of the clearing colour\n * @param  g {Number} the green value of the clearing colour\n * @param  b {Number} the blue value of the clearing colour\n * @param  a {Number} the alpha value of the clearing colour\n */\n\n\nFramebuffer.prototype.clear = function (r, g, b, a) {\n  this.bind();\n  var gl = this.gl;\n  gl.clearColor(r, g, b, a);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n/**\n * Binds the frame buffer to the WebGL context\n */\n\n\nFramebuffer.prototype.bind = function () {\n  var gl = this.gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n};\n/**\n * Unbinds the frame buffer to the WebGL context\n */\n\n\nFramebuffer.prototype.unbind = function () {\n  var gl = this.gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n/**\n * Resizes the drawing area of the buffer to the given width and height\n * @param  width  {Number} the new width\n * @param  height {Number} the new height\n */\n\n\nFramebuffer.prototype.resize = function (width, height) {\n  var gl = this.gl;\n  this.width = width;\n  this.height = height;\n\n  if (this.texture) {\n    this.texture.uploadData(null, width, height);\n  }\n\n  if (this.stencil) {\n    // update the stencil buffer width and height\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\n  }\n};\n/**\n * Destroys this buffer\n */\n\n\nFramebuffer.prototype.destroy = function () {\n  var gl = this.gl; //TODO\n\n  if (this.texture) {\n    this.texture.destroy();\n  }\n\n  gl.deleteFramebuffer(this.framebuffer);\n  this.gl = null;\n  this.stencil = null;\n  this.texture = null;\n};\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\n\n\nFramebuffer.createRGBA = function (gl, width, height, data) {\n  var texture = Texture.fromData(gl, null, width, height);\n  texture.enableNearestScaling();\n  texture.enableWrapClamp(); //now create the framebuffer object and attach the texture to it.\n\n  var fbo = new Framebuffer(gl, width, height);\n  fbo.enableTexture(texture); //fbo.enableStencil(); // get this back on soon!\n  //fbo.enableStencil(); // get this back on soon!\n\n  fbo.unbind();\n  return fbo;\n};\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\n\n\nFramebuffer.createFloat32 = function (gl, width, height, data) {\n  // create a new texture..\n  var texture = new Texture.fromData(gl, data, width, height);\n  texture.enableNearestScaling();\n  texture.enableWrapClamp(); //now create the framebuffer object and attach the texture to it.\n\n  var fbo = new Framebuffer(gl, width, height);\n  fbo.enableTexture(texture);\n  fbo.unbind();\n  return fbo;\n};\n\nmodule.exports = Framebuffer;","map":{"version":3,"sources":["/Users/mohamedelhedihaddar/weather-app/node_modules/pixi-gl-core/src/GLFramebuffer.js"],"names":["Texture","require","Framebuffer","gl","width","height","framebuffer","createFramebuffer","stencil","texture","prototype","enableTexture","bind","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","TEXTURE_2D","enableStencil","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","renderbufferStorage","DEPTH_STENCIL","clear","r","g","b","a","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","bindFramebuffer","unbind","resize","uploadData","destroy","deleteFramebuffer","createRGBA","data","fromData","enableNearestScaling","enableWrapClamp","fbo","createFloat32","module","exports"],"mappings":"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","sourcesContent":["\nvar Texture = require('./GLTexture');\n\n/**\n * Helper class to create a webGL Framebuffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n */\nvar Framebuffer = function(gl, width, height)\n{\n    /**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     * The frame buffer\n     *\n     * @member {WebGLFramebuffer}\n     */\n    this.framebuffer = gl.createFramebuffer();\n\n    /**\n     * The stencil buffer\n     *\n     * @member {WebGLRenderbuffer}\n     */\n    this.stencil = null;\n\n    /**\n     * The stencil buffer\n     *\n     * @member {PIXI.glCore.GLTexture}\n     */\n    this.texture = null;\n\n    /**\n     * The width of the drawing area of the buffer\n     *\n     * @member {Number}\n     */\n    this.width = width || 100;\n    /**\n     * The height of the drawing area of the buffer\n     *\n     * @member {Number}\n     */\n    this.height = height || 100;\n};\n\n/**\n * Adds a texture to the frame buffer\n * @param texture {PIXI.glCore.GLTexture}\n */\nFramebuffer.prototype.enableTexture = function(texture)\n{\n    var gl = this.gl;\n\n    this.texture = texture || new Texture(gl);\n\n    this.texture.bind();\n\n    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    this.bind();\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n};\n\n/**\n * Initialises the stencil buffer\n */\nFramebuffer.prototype.enableStencil = function()\n{\n    if(this.stencil)return;\n\n    var gl = this.gl;\n\n    this.stencil = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n\n    // TODO.. this is depth AND stencil?\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencil);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,  this.width  , this.height );\n\n\n};\n\n/**\n * Erases the drawing area and fills it with a colour\n * @param  r {Number} the red value of the clearing colour\n * @param  g {Number} the green value of the clearing colour\n * @param  b {Number} the blue value of the clearing colour\n * @param  a {Number} the alpha value of the clearing colour\n */\nFramebuffer.prototype.clear = function( r, g, b, a )\n{\n    this.bind();\n\n    var gl = this.gl;\n\n    gl.clearColor(r, g, b, a);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n\n/**\n * Binds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.bind = function()\n{\n    var gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer );\n};\n\n/**\n * Unbinds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.unbind = function()\n{\n    var gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null );\n};\n/**\n * Resizes the drawing area of the buffer to the given width and height\n * @param  width  {Number} the new width\n * @param  height {Number} the new height\n */\nFramebuffer.prototype.resize = function(width, height)\n{\n    var gl = this.gl;\n\n    this.width = width;\n    this.height = height;\n\n    if ( this.texture )\n    {\n        this.texture.uploadData(null, width, height);\n    }\n\n    if ( this.stencil )\n    {\n        // update the stencil buffer width and height\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\n    }\n};\n\n/**\n * Destroys this buffer\n */\nFramebuffer.prototype.destroy = function()\n{\n    var gl = this.gl;\n\n    //TODO\n    if(this.texture)\n    {\n        this.texture.destroy();\n    }\n\n    gl.deleteFramebuffer(this.framebuffer);\n\n    this.gl = null;\n\n    this.stencil = null;\n    this.texture = null;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createRGBA = function(gl, width, height, data)\n{\n    var texture = Texture.fromData(gl, null, width, height);\n    texture.enableNearestScaling();\n    texture.enableWrapClamp();\n\n    //now create the framebuffer object and attach the texture to it.\n    var fbo = new Framebuffer(gl, width, height);\n    fbo.enableTexture(texture);\n    //fbo.enableStencil(); // get this back on soon!\n\n    //fbo.enableStencil(); // get this back on soon!\n\n    fbo.unbind();\n\n    return fbo;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createFloat32 = function(gl, width, height, data)\n{\n    // create a new texture..\n    var texture = new Texture.fromData(gl, data, width, height);\n    texture.enableNearestScaling();\n    texture.enableWrapClamp();\n\n    //now create the framebuffer object and attach the texture to it.\n    var fbo = new Framebuffer(gl, width, height);\n    fbo.enableTexture(texture);\n\n    fbo.unbind();\n\n    return fbo;\n};\n\nmodule.exports = Framebuffer;\n"]},"metadata":{},"sourceType":"script"}