{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nexports.default = function (graphicsData, webGLData, webGLDataNativeLines) {\n  if (graphicsData.nativeLines) {\n    buildNativeLine(graphicsData, webGLDataNativeLines);\n  } else {\n    buildLine(graphicsData, webGLData);\n  }\n};\n\nvar _math = require('../../../math');\n\nvar _utils = require('../../../utils');\n/**\n * Builds a line to draw using the poligon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\n\n\nfunction buildLine(graphicsData, webGLData) {\n  // TODO OPTIMISE!\n  var points = graphicsData.points;\n\n  if (points.length === 0) {\n    return;\n  } // if the line width is an odd number add 0.5 to align to a whole pixel\n  // commenting this out fixes #711 and #1620\n  // if (graphicsData.lineWidth%2)\n  // {\n  //     for (i = 0; i < points.length; i++)\n  //     {\n  //         points[i] += 0.5;\n  //     }\n  // }\n  // get first and last point.. figure out the middle!\n\n\n  var firstPoint = new _math.Point(points[0], points[1]);\n  var lastPoint = new _math.Point(points[points.length - 2], points[points.length - 1]); // if the first point is the last point - gonna have issues :)\n\n  if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y) {\n    // need to clone as we are going to slightly modify the shape..\n    points = points.slice();\n    points.pop();\n    points.pop();\n    lastPoint = new _math.Point(points[points.length - 2], points[points.length - 1]);\n    var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;\n    var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n\n  var verts = webGLData.points;\n  var indices = webGLData.indices;\n  var length = points.length / 2;\n  var indexCount = points.length;\n  var indexStart = verts.length / 6; // DRAW the Line\n\n  var width = graphicsData.lineWidth / 2; // sort color\n\n  var color = (0, _utils.hex2rgb)(graphicsData.lineColor);\n  var alpha = graphicsData.lineAlpha;\n  var r = color[0] * alpha;\n  var g = color[1] * alpha;\n  var b = color[2] * alpha;\n  var p1x = points[0];\n  var p1y = points[1];\n  var p2x = points[2];\n  var p2y = points[3];\n  var p3x = 0;\n  var p3y = 0;\n  var perpx = -(p1y - p2y);\n  var perpy = p1x - p2x;\n  var perp2x = 0;\n  var perp2y = 0;\n  var perp3x = 0;\n  var perp3y = 0;\n  var dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  var ratio = graphicsData.lineAlignment; // 0.5;\n\n  var r1 = (1 - ratio) * 2;\n  var r2 = ratio * 2; // start\n\n  verts.push(p1x - perpx * r1, p1y - perpy * r1, r, g, b, alpha);\n  verts.push(p1x + perpx * r2, p1y + perpy * r2, r, g, b, alpha);\n\n  for (var i = 1; i < length - 1; ++i) {\n    p1x = points[(i - 1) * 2];\n    p1y = points[(i - 1) * 2 + 1];\n    p2x = points[i * 2];\n    p2y = points[i * 2 + 1];\n    p3x = points[(i + 1) * 2];\n    p3y = points[(i + 1) * 2 + 1];\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n    dist = Math.sqrt(perpx * perpx + perpy * perpy);\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n    perp2x = -(p2y - p3y);\n    perp2y = p2x - p3x;\n    dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y);\n    perp2x /= dist;\n    perp2y /= dist;\n    perp2x *= width;\n    perp2y *= width;\n    var a1 = -perpy + p1y - (-perpy + p2y);\n    var b1 = -perpx + p2x - (-perpx + p1x);\n    var c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);\n    var a2 = -perp2y + p3y - (-perp2y + p2y);\n    var b2 = -perp2x + p2x - (-perp2x + p3x);\n    var c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);\n    var denom = a1 * b2 - a2 * b1;\n\n    if (Math.abs(denom) < 0.1) {\n      denom += 10.1;\n      verts.push(p2x - perpx * r1, p2y - perpy * r1, r, g, b, alpha);\n      verts.push(p2x + perpx * r2, p2y + perpy * r2, r, g, b, alpha);\n      continue;\n    }\n\n    var px = (b1 * c2 - b2 * c1) / denom;\n    var py = (a2 * c1 - a1 * c2) / denom;\n    var pdist = (px - p2x) * (px - p2x) + (py - p2y) * (py - p2y);\n\n    if (pdist > 196 * width * width) {\n      perp3x = perpx - perp2x;\n      perp3y = perpy - perp2y;\n      dist = Math.sqrt(perp3x * perp3x + perp3y * perp3y);\n      perp3x /= dist;\n      perp3y /= dist;\n      perp3x *= width;\n      perp3y *= width;\n      verts.push(p2x - perp3x * r1, p2y - perp3y * r1);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x + perp3x * r2, p2y + perp3y * r2);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x - perp3x * r2 * r1, p2y - perp3y * r1);\n      verts.push(r, g, b, alpha);\n      indexCount++;\n    } else {\n      verts.push(p2x + (px - p2x) * r1, p2y + (py - p2y) * r1);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x - (px - p2x) * r2, p2y - (py - p2y) * r2);\n      verts.push(r, g, b, alpha);\n    }\n  }\n\n  p1x = points[(length - 2) * 2];\n  p1y = points[(length - 2) * 2 + 1];\n  p2x = points[(length - 1) * 2];\n  p2y = points[(length - 1) * 2 + 1];\n  perpx = -(p1y - p2y);\n  perpy = p1x - p2x;\n  dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  verts.push(p2x - perpx * r1, p2y - perpy * r1);\n  verts.push(r, g, b, alpha);\n  verts.push(p2x + perpx * r2, p2y + perpy * r2);\n  verts.push(r, g, b, alpha);\n  indices.push(indexStart);\n\n  for (var _i = 0; _i < indexCount; ++_i) {\n    indices.push(indexStart++);\n  }\n\n  indices.push(indexStart - 1);\n}\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\n\n\nfunction buildNativeLine(graphicsData, webGLData) {\n  var i = 0;\n  var points = graphicsData.points;\n  if (points.length === 0) return;\n  var verts = webGLData.points;\n  var length = points.length / 2; // sort color\n\n  var color = (0, _utils.hex2rgb)(graphicsData.lineColor);\n  var alpha = graphicsData.lineAlpha;\n  var r = color[0] * alpha;\n  var g = color[1] * alpha;\n  var b = color[2] * alpha;\n\n  for (i = 1; i < length; i++) {\n    var p1x = points[(i - 1) * 2];\n    var p1y = points[(i - 1) * 2 + 1];\n    var p2x = points[i * 2];\n    var p2y = points[i * 2 + 1];\n    verts.push(p1x, p1y);\n    verts.push(r, g, b, alpha);\n    verts.push(p2x, p2y);\n    verts.push(r, g, b, alpha);\n  }\n}","map":{"version":3,"sources":["../../../../../src/core/graphics/webgl/utils/buildLine.js"],"names":["graphicsData","buildNativeLine","buildLine","points","firstPoint","lastPoint","midPointX","midPointY","verts","webGLData","indices","length","indexCount","indexStart","width","color","alpha","r","g","b","p1x","p1y","p2x","p2y","p3x","p3y","perpx","perpy","perp2x","perp2y","perp3x","perp3y","dist","Math","ratio","r1","r2","i","a1","b1","c1","a2","b2","c2","denom","px","py","pdist"],"mappings":"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","sourcesContent":["import { Point } from '../../../math';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function (graphicsData, webGLData, webGLDataNativeLines)\n{\n    if (graphicsData.nativeLines)\n    {\n        buildNativeLine(graphicsData, webGLDataNativeLines);\n    }\n    else\n    {\n        buildLine(graphicsData, webGLData);\n    }\n}\n\n/**\n * Builds a line to draw using the poligon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nfunction buildLine(graphicsData, webGLData)\n{\n    // TODO OPTIMISE!\n    let points = graphicsData.points;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    let lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n\n    // if the first point is the last point - gonna have issues :)\n    if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        points.pop();\n        points.pop();\n\n        lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n\n        const midPointX = lastPoint.x + ((firstPoint.x - lastPoint.x) * 0.5);\n        const midPointY = lastPoint.y + ((firstPoint.y - lastPoint.y) * 0.5);\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = webGLData.points;\n    const indices = webGLData.indices;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    let indexStart = verts.length / 6;\n\n    // DRAW the Line\n    const width = graphicsData.lineWidth / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.lineColor);\n    const alpha = graphicsData.lineAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    let p1x = points[0];\n    let p1y = points[1];\n    let p2x = points[2];\n    let p2y = points[3];\n    let p3x = 0;\n    let p3y = 0;\n\n    let perpx = -(p1y - p2y);\n    let perpy = p1x - p2x;\n    let perp2x = 0;\n    let perp2y = 0;\n    let perp3x = 0;\n    let perp3y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = graphicsData.lineAlignment;// 0.5;\n    const r1 = (1 - ratio) * 2;\n    const r2 = ratio * 2;\n\n    // start\n    verts.push(\n        p1x - (perpx * r1),\n        p1y - (perpy * r1),\n        r, g, b, alpha\n    );\n\n    verts.push(\n        p1x + (perpx * r2),\n        p1y + (perpy * r2),\n        r, g, b, alpha\n    );\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        p1x = points[(i - 1) * 2];\n        p1y = points[((i - 1) * 2) + 1];\n\n        p2x = points[i * 2];\n        p2y = points[(i * 2) + 1];\n\n        p3x = points[(i + 1) * 2];\n        p3y = points[((i + 1) * 2) + 1];\n\n        perpx = -(p1y - p2y);\n        perpy = p1x - p2x;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp2x = -(p2y - p3y);\n        perp2y = p2x - p3x;\n\n        dist = Math.sqrt((perp2x * perp2x) + (perp2y * perp2y));\n        perp2x /= dist;\n        perp2y /= dist;\n        perp2x *= width;\n        perp2y *= width;\n\n        const a1 = (-perpy + p1y) - (-perpy + p2y);\n        const b1 = (-perpx + p2x) - (-perpx + p1x);\n        const c1 = ((-perpx + p1x) * (-perpy + p2y)) - ((-perpx + p2x) * (-perpy + p1y));\n        const a2 = (-perp2y + p3y) - (-perp2y + p2y);\n        const b2 = (-perp2x + p2x) - (-perp2x + p3x);\n        const c2 = ((-perp2x + p3x) * (-perp2y + p2y)) - ((-perp2x + p2x) * (-perp2y + p3y));\n\n        let denom = (a1 * b2) - (a2 * b1);\n\n        if (Math.abs(denom) < 0.1)\n        {\n            denom += 10.1;\n            verts.push(\n                p2x - (perpx * r1),\n                p2y - (perpy * r1),\n                r, g, b, alpha\n            );\n\n            verts.push(\n                p2x + (perpx * r2),\n                p2y + (perpy * r2),\n                r, g, b, alpha\n            );\n\n            continue;\n        }\n\n        const px = ((b1 * c2) - (b2 * c1)) / denom;\n        const py = ((a2 * c1) - (a1 * c2)) / denom;\n        const pdist = ((px - p2x) * (px - p2x)) + ((py - p2y) * (py - p2y));\n\n        if (pdist > (196 * width * width))\n        {\n            perp3x = perpx - perp2x;\n            perp3y = perpy - perp2y;\n\n            dist = Math.sqrt((perp3x * perp3x) + (perp3y * perp3y));\n            perp3x /= dist;\n            perp3y /= dist;\n            perp3x *= width;\n            perp3y *= width;\n\n            verts.push(p2x - (perp3x * r1), p2y - (perp3y * r1));\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x + (perp3x * r2), p2y + (perp3y * r2));\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - (perp3x * r2 * r1), p2y - (perp3y * r1));\n            verts.push(r, g, b, alpha);\n\n            indexCount++;\n        }\n        else\n        {\n            verts.push(p2x + ((px - p2x) * r1), p2y + ((py - p2y) * r1));\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - ((px - p2x) * r2), p2y - ((py - p2y) * r2));\n            verts.push(r, g, b, alpha);\n        }\n    }\n\n    p1x = points[(length - 2) * 2];\n    p1y = points[((length - 2) * 2) + 1];\n\n    p2x = points[(length - 1) * 2];\n    p2y = points[((length - 1) * 2) + 1];\n\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(p2x - (perpx * r1), p2y - (perpy * r1));\n    verts.push(r, g, b, alpha);\n\n    verts.push(p2x + (perpx * r2), p2y + (perpy * r2));\n    verts.push(r, g, b, alpha);\n\n    indices.push(indexStart);\n\n    for (let i = 0; i < indexCount; ++i)\n    {\n        indices.push(indexStart++);\n    }\n\n    indices.push(indexStart - 1);\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nfunction buildNativeLine(graphicsData, webGLData)\n{\n    let i = 0;\n    const points = graphicsData.points;\n\n    if (points.length === 0) return;\n\n    const verts = webGLData.points;\n    const length = points.length / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.lineColor);\n    const alpha = graphicsData.lineAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    for (i = 1; i < length; i++)\n    {\n        const p1x = points[(i - 1) * 2];\n        const p1y = points[((i - 1) * 2) + 1];\n\n        const p2x = points[i * 2];\n        const p2y = points[(i * 2) + 1];\n\n        verts.push(p1x, p1y);\n        verts.push(r, g, b, alpha);\n\n        verts.push(p2x, p2y);\n        verts.push(r, g, b, alpha);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}