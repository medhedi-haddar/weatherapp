{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @private\n * @memberof PIXI\n */\n\n\nvar WebGLGraphicsData = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The current WebGL drawing context\n   * @param {PIXI.Shader} shader - The shader\n   * @param {object} attribsState - The state for the VAO\n   */\n  function WebGLGraphicsData(gl, shader, attribsState) {\n    _classCallCheck(this, WebGLGraphicsData);\n    /**\n     * The current WebGL drawing context\n     *\n     * @member {WebGLRenderingContext}\n     */\n\n\n    this.gl = gl; // TODO does this need to be split before uploading??\n\n    /**\n     * An array of color components (r,g,b)\n     * @member {number[]}\n     */\n\n    this.color = [0, 0, 0]; // color split!\n\n    /**\n     * An array of points to draw\n     * @member {PIXI.Point[]}\n     */\n\n    this.points = [];\n    /**\n     * The indices of the vertices\n     * @member {number[]}\n     */\n\n    this.indices = [];\n    /**\n     * The main buffer\n     * @member {WebGLBuffer}\n     */\n\n    this.buffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl);\n    /**\n     * The index buffer\n     * @member {WebGLBuffer}\n     */\n\n    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl);\n    /**\n     * Whether this graphics is dirty or not\n     * @member {boolean}\n     */\n\n    this.dirty = true;\n    /**\n     * Whether this graphics is nativeLines or not\n     * @member {boolean}\n     */\n\n    this.nativeLines = false;\n    this.glPoints = null;\n    this.glIndices = null;\n    /**\n     *\n     * @member {PIXI.Shader}\n     */\n\n    this.shader = shader;\n    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl, attribsState).addIndex(this.indexBuffer).addAttribute(this.buffer, shader.attributes.aVertexPosition, gl.FLOAT, false, 4 * 6, 0).addAttribute(this.buffer, shader.attributes.aColor, gl.FLOAT, false, 4 * 6, 2 * 4);\n  }\n  /**\n   * Resets the vertices and the indices\n   */\n\n\n  WebGLGraphicsData.prototype.reset = function reset() {\n    this.points.length = 0;\n    this.indices.length = 0;\n  };\n  /**\n   * Binds the buffers and uploads the data\n   */\n\n\n  WebGLGraphicsData.prototype.upload = function upload() {\n    this.glPoints = new Float32Array(this.points);\n    this.buffer.upload(this.glPoints);\n    this.glIndices = new Uint16Array(this.indices);\n    this.indexBuffer.upload(this.glIndices);\n    this.dirty = false;\n  };\n  /**\n   * Empties all the data\n   */\n\n\n  WebGLGraphicsData.prototype.destroy = function destroy() {\n    this.color = null;\n    this.points = null;\n    this.indices = null;\n    this.vao.destroy();\n    this.buffer.destroy();\n    this.indexBuffer.destroy();\n    this.gl = null;\n    this.buffer = null;\n    this.indexBuffer = null;\n    this.glPoints = null;\n    this.glIndices = null;\n  };\n\n  return WebGLGraphicsData;\n}();\n\nexports.default = WebGLGraphicsData;","map":{"version":3,"sources":["../../../../src/core/graphics/webgl/WebGLGraphicsData.js"],"names":["WebGLGraphicsData","shader","gl","reset","upload","destroy"],"mappings":";;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;AAEA;;;;;;;;;IAOqBA,iB;AAEjB;;;;;AAKA,WAAA,iBAAA,CAAA,EAAA,EAAA,MAAA,EAAA,YAAA,EACA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;AACI;;;;;;;AAKA,SAAA,EAAA,GAAA,EAAA,CANJ,CAQI;;AACA;;;;;AAIA,SAAA,KAAA,GAAa,CAAA,CAAA,EAAA,CAAA,EAbjB,CAaiB,CAAb,CAbJ,CAa4B;;AAExB;;;;;AAIA,SAAA,MAAA,GAAA,EAAA;AAEA;;;;;AAIA,SAAA,OAAA,GAAA,EAAA;AACA;;;;;AAIA,SAAA,MAAA,GAAc,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,kBAAA,CAAd,EAAc,CAAd;AAEA;;;;;AAIA,SAAA,WAAA,GAAmB,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,iBAAA,CAAnB,EAAmB,CAAnB;AAEA;;;;;AAIA,SAAA,KAAA,GAAA,IAAA;AAEA;;;;;AAIA,SAAA,WAAA,GAAA,KAAA;AAEA,SAAA,QAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAA,IAAA;AAEA;;;;;AAIA,SAAA,MAAA,GAAA,MAAA;AAEA,SAAA,GAAA,GAAW,IAAI,YAAA,CAAA,OAAA,CAAJ,iBAAA,CAAA,EAAA,EAAA,YAAA,EAAA,QAAA,CACD,KADC,WAAA,EAAA,YAAA,CAEG,KAFH,MAAA,EAEgBC,MAAAA,CAAAA,UAAAA,CAFhB,eAAA,EAEmDC,EAAAA,CAFnD,KAAA,EAAA,KAAA,EAEoE,IAFpE,CAAA,EAAA,CAAA,EAAA,YAAA,CAGG,KAHH,MAAA,EAGgBD,MAAAA,CAAAA,UAAAA,CAHhB,MAAA,EAG0CC,EAAAA,CAH1C,KAAA,EAAA,KAAA,EAG2D,IAH3D,CAAA,EAGkE,IAH7E,CAAW,CAAX;AAIH;AAED;;;;;8BAGAC,K,oBACA;AACI,SAAA,MAAA,CAAA,MAAA,GAAA,CAAA;AACA,SAAA,OAAA,CAAA,MAAA,GAAA,CAAA;;AAGJ;;;;;8BAGAC,M,qBACA;AACI,SAAA,QAAA,GAAgB,IAAA,YAAA,CAAiB,KAAjC,MAAgB,CAAhB;AACA,SAAA,MAAA,CAAA,MAAA,CAAmB,KAAnB,QAAA;AAEA,SAAA,SAAA,GAAiB,IAAA,WAAA,CAAgB,KAAjC,OAAiB,CAAjB;AACA,SAAA,WAAA,CAAA,MAAA,CAAwB,KAAxB,SAAA;AAEA,SAAA,KAAA,GAAA,KAAA;;AAGJ;;;;;8BAGAC,O,sBACA;AACI,SAAA,KAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,IAAA;AAEA,SAAA,GAAA,CAAA,OAAA;AACA,SAAA,MAAA,CAAA,OAAA;AACA,SAAA,WAAA,CAAA,OAAA;AAEA,SAAA,EAAA,GAAA,IAAA;AAEA,SAAA,MAAA,GAAA,IAAA;AACA,SAAA,WAAA,GAAA,IAAA;AAEA,SAAA,QAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAA,IAAA;;;;;;kBAnHaL,iB","sourcesContent":["import glCore from 'pixi-gl-core';\n\n/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class WebGLGraphicsData\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL drawing context\n     * @param {PIXI.Shader} shader - The shader\n     * @param {object} attribsState - The state for the VAO\n     */\n    constructor(gl, shader, attribsState)\n    {\n        /**\n         * The current WebGL drawing context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        // TODO does this need to be split before uploading??\n        /**\n         * An array of color components (r,g,b)\n         * @member {number[]}\n         */\n        this.color = [0, 0, 0]; // color split!\n\n        /**\n         * An array of points to draw\n         * @member {PIXI.Point[]}\n         */\n        this.points = [];\n\n        /**\n         * The indices of the vertices\n         * @member {number[]}\n         */\n        this.indices = [];\n        /**\n         * The main buffer\n         * @member {WebGLBuffer}\n         */\n        this.buffer = glCore.GLBuffer.createVertexBuffer(gl);\n\n        /**\n         * The index buffer\n         * @member {WebGLBuffer}\n         */\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl);\n\n        /**\n         * Whether this graphics is dirty or not\n         * @member {boolean}\n         */\n        this.dirty = true;\n\n        /**\n         * Whether this graphics is nativeLines or not\n         * @member {boolean}\n         */\n        this.nativeLines = false;\n\n        this.glPoints = null;\n        this.glIndices = null;\n\n        /**\n         *\n         * @member {PIXI.Shader}\n         */\n        this.shader = shader;\n\n        this.vao = new glCore.VertexArrayObject(gl, attribsState)\n        .addIndex(this.indexBuffer)\n        .addAttribute(this.buffer, shader.attributes.aVertexPosition, gl.FLOAT, false, 4 * 6, 0)\n        .addAttribute(this.buffer, shader.attributes.aColor, gl.FLOAT, false, 4 * 6, 2 * 4);\n    }\n\n    /**\n     * Resets the vertices and the indices\n     */\n    reset()\n    {\n        this.points.length = 0;\n        this.indices.length = 0;\n    }\n\n    /**\n     * Binds the buffers and uploads the data\n     */\n    upload()\n    {\n        this.glPoints = new Float32Array(this.points);\n        this.buffer.upload(this.glPoints);\n\n        this.glIndices = new Uint16Array(this.indices);\n        this.indexBuffer.upload(this.glIndices);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Empties all the data\n     */\n    destroy()\n    {\n        this.color = null;\n        this.points = null;\n        this.indices = null;\n\n        this.vao.destroy();\n        this.buffer.destroy();\n        this.indexBuffer.destroy();\n\n        this.gl = null;\n\n        this.buffer = null;\n        this.indexBuffer = null;\n\n        this.glPoints = null;\n        this.glIndices = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}